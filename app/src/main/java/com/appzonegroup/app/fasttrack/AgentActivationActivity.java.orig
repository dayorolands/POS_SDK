package com.appzonegroup.app.fasttrack;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import androidx.appcompat.app.AlertDialog;
import android.text.InputFilter;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Response;
import com.appzonegroup.app.fasttrack.model.AppConstants;
import com.appzonegroup.app.fasttrack.model.LoadDataType;
import com.appzonegroup.app.fasttrack.model.PinChangeRequest;
import com.appzonegroup.app.fasttrack.model.online.AuthResponse;
import com.appzonegroup.app.fasttrack.utility.LocalStorage;
import com.appzonegroup.app.fasttrack.utility.task.GetCallTask;
import com.appzonegroup.app.fasttrack.utility.task.PostCallTask;
import com.crashlytics.android.Crashlytics;
import com.google.gson.Gson;

import java.util.Locale;


public class AgentActivationActivity extends BaseActivity {

    boolean isActivation = false;
    //boolean isPINValidation = false;
    String url = "";
    String json = "";
    String code = "";
    Response response;
    String institutionCode = null;
    public String phoneNumber;
    public String pin;
    //CustomAutoCompleteAdapter adapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_agent_activation);

        if (BuildConfig.DEBUG) {
            View skipButton = findViewById(R.id.skip_button);
            skipButton.setVisibility(View.VISIBLE);
            skipButton.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    EditText phoneNumberET = findViewById(R.id.agentActivation_phoneNumberEt);
                    phoneNumber = phoneNumberET.getText().toString().trim();

                    if (phoneNumber.isEmpty()) {
                        indicateError("You did not enter your phone number", phoneNumberET);
                        return;
                    }

                    LocalStorage.SaveValue(AppConstants.INSTITUTION_CODE, "100287", getBaseContext());
                    LocalStorage.SaveValue(AppConstants.AGENT_PHONE, phoneNumber, getBaseContext());
                    LocalStorage.SaveValue(AppConstants.AGENT_CODE, "1111", getBaseContext());
                    LocalStorage.saveCacheAuth(new Gson().toJson(new AuthResponse(phoneNumber, "1111")), getBaseContext());
                    LocalStorage.SaveValue(AppConstants.AGENT_PIN, "1111", getBaseContext());
                    LocalStorage.SaveValue(AppConstants.ACTIVATED, AppConstants.ACTIVATED, getBaseContext());

                    Intent intent = new Intent(AgentActivationActivity.this, DataLoaderActivity.class);
                    intent.putExtra(AppConstants.LOAD_DATA, LoadDataType.OTHER_DATA.ordinal());
                    startActivity(intent);
                    finish();
                }
            });
        }
    }

    public void submit_click(View view) {

        code = ((EditText) findViewById(R.id.agentActivation_codeEt)).getText().toString().trim();
        phoneNumber = ((EditText) findViewById(R.id.agentActivation_phoneNumberEt)).getText().toString().trim();

        if (phoneNumber.length() == 0) {
            indicateError("You did not enter your phone number", ((EditText) findViewById(R.id.agentActivation_phoneNumberEt)));
            Crashlytics.logException(new Exception("No phone number was entered"));
            return;
        }

        if (code.length() == 0 && !isActivation) {
            indicateError("You did not enter your verification code", ((EditText) findViewById(R.id.agentActivation_codeEt)));
            Crashlytics.logException(new Exception("verification code not inputted"));
            return;
        }

        /*if (isActivation && ((EditText)findViewById(R.id.agentActivation_oldPINEt)).getText().toString().length() == 0){
            indicateError("You did not enter your old PIN", ((EditText)findViewById(R.id.agentActivation_PINEt)));
            Crashlytics.logException(new Exception("No PIN was entered"));
            return;
        }*/

        if (isActivation && ((EditText) findViewById(R.id.agentActivation_PINEt)).getText().toString().length() == 0) {
            indicateError("You did not enter the PIN", ((EditText) findViewById(R.id.agentActivation_PINEt)));
            Crashlytics.logException(new Exception("No PIN was entered"));
            return;
        }

        if (isActivation && ((EditText) findViewById(R.id.agentActivation_PIN2Et)).getText().toString().length() == 0) {
            indicateError("You did not confirm the PIN", ((EditText) findViewById(R.id.agentActivation_PIN2Et)));
            Crashlytics.logException(new Exception("PIN entry was not confirmed"));
            return;
        }

        if (isActivation && ((EditText) findViewById(R.id.agentActivation_PINEt)).getText().toString().length() != 4) {
            indicateError("Your PIN must have 4-digit", ((EditText) findViewById(R.id.agentActivation_PINEt)));
            Crashlytics.logException(new Exception("Pin was not 4 digits"));
            return;
        }

        if (isActivation && ((EditText) findViewById(R.id.agentActivation_PIN2Et)).getText().toString().length() != 4) {
            indicateError("Your PIN Confirmation must have 4-digit", ((EditText) findViewById(R.id.agentActivation_PIN2Et)));
            Crashlytics.logException(new Exception("confirmation pin was not 4 digits"));
            return;
        }

        if ((!((EditText) findViewById(R.id.agentActivation_PIN2Et)).getText().toString().equals(
                ((EditText) findViewById(R.id.agentActivation_PINEt)).getText().toString()))) {
            indicateError("PIN mismatch", ((EditText) findViewById(R.id.agentActivation_PIN2Et)));
            return;
        }

        pin = ((EditText) findViewById(R.id.agentActivation_PINEt)).getText().toString();

        showProgressBar("Processing...");

        if (isActivation) {

            PinChangeRequest request = new PinChangeRequest();
            request.setActivationCode(code);
            request.setInstitutionCode(institutionCode);
            request.setAgentPhoneNumber(phoneNumber);
            request.setConfirmNewPin(pin);
            request.setNewPin(pin);
            request.setGeoLocation("");
            request.setOldPin(code);//((EditText)findViewById(R.id.agentActivation_oldPINEt)).getText().toString());

            json = new Gson().toJson(request);// "{\"AgentPhoneNumber\":" + "\"" + phoneNumber + "\"" + ", \"InstitutionCode\":" + "\"" + institutionCode + "\"" + ", \"ActivationCode\":" + "\"" + code + "\"" + ", \"NewPin\":" + "\"" + pin + "\"" + ", \"ConfirmNewPin\":" + "\"" + pin + "\"" + "}";
            url = AppConstants.getBaseUrl() + "/CreditClubMiddleWareAPI/CreditClubStatic/CompleteActivationWithPinChange";
            Log.e("URL", "URL: " + url);
            Log.e("Data", json);

            //sendPostRequest(url, new Gson().toJson(request));
            PostCallTask postCallTask = new PostCallTask(getProgressDialog(), this, this);
            postCallTask.execute(url, json);
        } else {
            //code here for if it is not activation

            url = AppConstants.getBaseUrl() + "/CreditClubMiddleWareAPI/" + String.format(Locale.getDefault(), "CreditClubStatic/AgentVerification?verificationCode=%s&institutionCode=%s&agentPhoneNumber=%s", code, institutionCode, phoneNumber);
            Log.e("URL", "URL: " + url);

            GetCallTask task = new GetCallTask(getProgressDialog(), this, this);
            task.execute(url);
            //sendGetRequest(url);
        }


    }

    @Override
    public void processFinished(String response) {
        if (!isActivation) {
            if (response != null) {
                try {
                    Log.e("Response", response);
                    //Standard .NET additions to serialized objects
                    response = response.replace("\\", "").replace("\n", "").trim();
                    Log.e("Activation", "RESPONSE: " + response);
                    com.appzonegroup.app.fasttrack.model.Response serverResponse = new Gson().fromJson(response, com.appzonegroup.app.fasttrack.model.Response.class);

                    if (serverResponse.isSuccessful()) {
                        isActivation = true;
                        findViewById(R.id.pin_layout).setVisibility(View.VISIBLE);
                        findViewById(R.id.agentActivation_phoneNumberEt).setVisibility(View.GONE);
                        ((TextView) findViewById(R.id.instructionTv)).setText(getString(R.string.activateAccount));
                        ((EditText) findViewById(R.id.agentActivation_codeEt)).setHint(getString(R.string.enter_activation_code));
                        ((EditText) findViewById(R.id.agentActivation_codeEt)).setText("");
                        ((EditText) findViewById(R.id.agentActivation_codeEt)).setFilters(new InputFilter[]{new InputFilter.LengthFilter(4)});
                        findViewById(R.id.agentActivation_codeEt).requestFocus();
                        institutionCode = serverResponse.getReponseMessage();
                        showNotification("Verification successful");
                    } else {
                        showError(serverResponse.getReponseMessage());
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    Crashlytics.logException(new Exception(e.getMessage()));
                    showError(e.getMessage());
                }
            } else {
                Log.e("ResponseFailed", "Api call failed");
                showError("Api call failed");
            }
        } else {
            if (response == null) {
                showError("An error just occurred. Please ensure that you have internet and try again");
                return;
            }
            //String result = object.toString();
            response = response.replace("\\", "").replace("\n", "").trim();
            com.appzonegroup.app.fasttrack.model.Response result = new Gson().fromJson(response, com.appzonegroup.app.fasttrack.model.Response.class);

            if (result.isSuccessful()) {
                Log.e("Activation", "RESPONSE: " + response);
                LocalStorage.SaveValue(AppConstants.INSTITUTION_CODE, institutionCode, getBaseContext());
                LocalStorage.SaveValue(AppConstants.AGENT_PHONE, phoneNumber, getBaseContext());
                //showNotificationMessage("Activation code processed");
                LocalStorage.SaveValue(AppConstants.AGENT_CODE, code, getBaseContext());
                LocalStorage.saveCacheAuth(new Gson().toJson(new AuthResponse(phoneNumber, code)), getBaseContext());
                LocalStorage.SaveValue(AppConstants.AGENT_PIN, pin, getBaseContext());
                LocalStorage.SaveValue(AppConstants.ACTIVATED, AppConstants.ACTIVATED, getBaseContext());
                Intent intent = new Intent(AgentActivationActivity.this, DataLoaderActivity.class);
                intent.putExtra(AppConstants.LOAD_DATA, LoadDataType.OTHER_DATA.ordinal());
                startActivity(intent);
                finish();
                showNotification("Activation was successful");
            } else {
                showError(result.getReponseMessage());
            }
        }
    }

    /*public void sendPostRequest(String url, String data){
        RequestQueue queue = Volley.newRequestQueue(this);
        JSONObject convertedObject = null;
        try {
            convertedObject = new JSONObject(data);
        }
        catch (Exception e){
            Log.e("creditclub","failed json parsing");
        }


        JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, url,convertedObject, new com.android.volley.Response.Listener<JSONObject>() {

            @Override
            public void onResponse(JSONObject object) {
                String result = object.toString();
                result = result.replace("\\", "").replace("\n", "").trim();
                com.appzonegroup.app.fasttrack.model.Response response = new Gson().fromJson(result, com.appzonegroup.app.fasttrack.model.Response.class);

                if(response.isSuccessful()){
                    Log.e("Activation", "RESPONSE: " + new Gson().toJson(response));
                    LocalStorage.SaveValue(AppConstants.INSTITUTION_CODE, institutionCode, getBaseContext());
                    LocalStorage.SaveValue(AppConstants.AGENT_PHONE, phoneNumber, getBaseContext());
                    showNotificationMessage("Activation code processed");
                    LocalStorage.SaveValue(AppConstants.AGENT_CODE, code, getBaseContext());
                    LocalStorage.saveCacheAuth(new Gson().toJson(new AuthResponse(phoneNumber, code)), getBaseContext());
                    LocalStorage.SaveValue(AppConstants.AGENT_PIN, pin, getBaseContext());
                    LocalStorage.SaveValue(AppConstants.ACTIVATED, AppConstants.ACTIVATED, getBaseContext());
                    Intent intent = new Intent(AgentActivationActivity.this, DataLoaderActivity.class);
                    intent.putExtra(AppConstants.LOAD_DATA, LoadDataType.OTHER_DATA.ordinal());
                    startActivity(intent);
                    finish();
                    showNotification("Activation was successful");
                }
                else{
                    showError(response.getReponseMessage());
                }
            }


        }, new com.android.volley.Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError volleyError) {
                showError("A network-related error just occurred. Please try again later");
            }

        });
        queue.add(request);
    }

    public void sendGetRequest(String url){
        RequestQueue queue = Volley.newRequestQueue(this);
        JSONObject convertedObject = null;
        showProgressBar("Loading...");
        // Request a string response from the provided URL.
        StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        // Display the first 500 characters of the response string.
                        if (response != null) {
                            try
                            {
                                Log.e("Response", response);
                                //Standard .NET additions to serialized objects
                                response = response.replace("\\", "").replace("\n", "").trim();
                                Log.e("Activation", "RESPONSE: " + response);
                                com.appzonegroup.app.fasttrack.model.Response serverResponse = new Gson().fromJson(response, com.appzonegroup.app.fasttrack.model.Response.class);

                                if(serverResponse.isSuccessful()) {
                                    isActivation = true;
                                    findViewById(R.id.pin_layout).setVisibility(View.VISIBLE);
                                    findViewById(R.id.agentActivation_phoneNumberEt).setVisibility(View.GONE);
                                    ((TextView) findViewById(R.id.instructionTv)).setText("Activate Account");
                                    ((EditText)findViewById(R.id.agentActivation_codeEt)).setHint(getString(R.string.enter_activation_code));
                                    ((EditText) findViewById(R.id.agentActivation_codeEt)).setText("");
                                    ((EditText) findViewById(R.id.agentActivation_codeEt)).setFilters(new InputFilter[] {new InputFilter.LengthFilter(4)});
                                    findViewById(R.id.agentActivation_codeEt).requestFocus();
                                   showNotification("Verification successful");
                                }
                                else {
                                    showError(serverResponse.getReponseMessage());
                                }

                            } catch (Exception e) {
                                e.printStackTrace();
                                Crashlytics.logException(new Exception(e.getMessage()));
                                showError(e.getMessage());
                            }
                        } else {
                            Log.e("ResponseFailed","Api call failed");
                            showError("Api call failed");
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                Log.e("Error Response", "ERROR: " + new Gson().toJson(error));
                showError("A network-related error occurred.");
            }
        });

// Add the request to the RequestQueue.
        queue.add(stringRequest);

    }*/

    void showNotificationMessage(final String message) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(getBaseContext(), message, Toast.LENGTH_LONG).show();
            }
        });
    }

    public void signin_click(View view) {

        Intent intent = new Intent(AgentActivationActivity.this, AgentSigninActivity.class);
        startActivity(intent);

    }

    @Override
    public void onBackPressed() {
        new AlertDialog.Builder(this)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setTitle("Closing Activity")
                .setMessage("Are you sure you want to close this activity?")
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        finish();
                    }

                })
                .setNegativeButton("No", null)
                .show();
    }
}

