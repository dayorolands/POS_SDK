package com.appzonegroup.app.fasttrack;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.os.StrictMode;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.appcompat.app.AppCompatActivity;

import com.appzonegroup.app.fasttrack.model.AppConstants;
import com.appzonegroup.app.fasttrack.utility.Dialogs;
import com.appzonegroup.app.fasttrack.utility.LocalStorage;
import com.crashlytics.android.Crashlytics;

import io.fabric.sdk.android.Fabric;

public class SplashScreenActivity extends AppCompatActivity {
    private static final int MY_PERMISSIONS_REQUEST = 200;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        try {

            Fabric.with(this, new Crashlytics());
            logUser();

            setContentView(R.layout.activity_splashscreen);

            setPolicy();
        }catch (Exception ex)
        {
            Dialogs.showErrorMessage(this, ex.toString());
        }
     //   ((TextView)findViewById(R.id.version_tv)).setText("Version " + Misc.getVersionName(this));

        /*ATMCard card = new ATMCard("5399831634828889", "5488", "31 12 18", "2222");
        final String escapedData =
                "{\"CVV\":\"5488\",\"EXP\":\"31 12 18\",\"PAN\":\"5399831634828889\",\"PIN\":\"2222\"}";
                //new Gson().toJson(card);
        //"{\\\"CVV\\\":\\\"5488\\\",\\\"EXP\\\":\\\"31 12 18\\\",\\\"PAN\\\":\\\"5399831634828889\\\",\\\"PIN\\\":\\\"2222\\\"}";

        String encryptedData = null;
        try {
            encryptedData = TripleDES.encrypt(escapedData);//, AppConstants.getEncryptionKey());
            *//*String dd = TT._decrypt(encryptedData, AppConstants.getEncryptionKey());

            Log.e("ss", dd);*//*
        } catch (Exception e) {
            e.printStackTrace();
        }

        Log.e("EncryptedData", encryptedData);*/
        checkPermissions();
        /**/
        //finish();
    }

    void loadPage()
    {
        new Thread() {
            @Override
            public void run() {
                try {
                    Thread.sleep(3000);

                    LocalStorage.SaveValue("test","test",SplashScreenActivity.this);

                    if (LocalStorage.GetValueFor(AppConstants.ACTIVATED, getBaseContext()) == null) {
                        Intent intent = new Intent(SplashScreenActivity.this, AgentActivationActivity.class);
                        startActivity(intent);

                    }else if(LocalStorage.GetValueFor(AppConstants.API_TOKEN, getBaseContext()) == null){

                        Intent intent = new Intent(SplashScreenActivity.this, DataLoaderActivity.class);
                        startActivity(intent);

                    } else {
                        startService(new Intent(SplashScreenActivity.this, LocationChangedService.class));
                        Intent intent = new Intent(SplashScreenActivity.this, LoginActivity.class);
                        startActivity(intent);
                        //finish();
                    }

                    finish();

                } catch (InterruptedException ex) {
                    Crashlytics.logException(ex);
                }
            }
        }.start();
    }

    void setPolicy()
    {
        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
        StrictMode.setVmPolicy(builder.build());

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            //builder.detectFileUriExposure();
            builder.detectAll();
        }
    }

    void checkPermissions()
    {
        // Here, thisActivity is the current activity
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_NETWORK_STATE) != PackageManager.PERMISSION_GRANTED ||
                ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {

            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.RECORD_AUDIO) ||
                    ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_PHONE_STATE) ||
                    ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_NETWORK_STATE) ||
                    ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_FINE_LOCATION) ||
            ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_COARSE_LOCATION) ||
                    ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {

                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
            } else {

                // No explanation needed, we can request the permission.
                ActivityCompat.requestPermissions(this, new String[]{
                        Manifest.permission.READ_PHONE_STATE,
                        Manifest.permission.RECORD_AUDIO,
                        Manifest.permission.ACCESS_NETWORK_STATE,
                        Manifest.permission.ACCESS_FINE_LOCATION,
                        Manifest.permission.ACCESS_COARSE_LOCATION,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                }, MY_PERMISSIONS_REQUEST);

                // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
                // app-defined int constant. The callback method gets the
                // result of the request.
            }
        }else{
            loadPage();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    loadPage();
                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.

                } else {

                    Dialogs.getAlertDialog(this, "The app cannot function without the permissions approved.").show();
                    //finish();
                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request
        }
    }

    private void logUser() {
        // TODO: Use the current user's information
        // You can call any combination of these three methods
        Crashlytics.setUserIdentifier("Agents Number: "+ LocalStorage.GetValueFor(AppConstants.AGENT_PHONE, getBaseContext()));
        Crashlytics.setUserEmail("Agents Institution: "+ LocalStorage.GetValueFor(AppConstants.INSTITUTION_CODE, getBaseContext()));
        Crashlytics.setUserName("Live");
    }

}
