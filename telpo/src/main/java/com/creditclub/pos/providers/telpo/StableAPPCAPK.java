package com.creditclub.pos.providers.telpo;

import android.util.Log;
import com.telpo.emv.EmvApp;
import com.telpo.emv.EmvCAPK;
import com.telpo.emv.EmvService;
import com.telpo.emv.PaypassResult;
import com.telpo.emv.util.StringUtil;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;

public class StableAPPCAPK {
    public static void Log(String mes) {
        Log.w("test", mes);
    }

    public static void Add_All_CAPK_Test() {
        EmvCAPK capk_pobc_80 = new EmvCAPK();
        capk_pobc_80.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_80.KeyID = Byte.MIN_VALUE;
        capk_pobc_80.HashInd = 1;
        capk_pobc_80.ArithInd = 1;
        capk_pobc_80.Modul = new byte[]{-52, -37, -90, -122, -30, -17, -72, 76, -30, -22, 1, 32, -98, -21, 83, -66, -14, 26, -74, -45, 83, 39, 79, -8, 57, 29, 112, 53, -41, 110, EmvService.TYPE_SAVE, 86, -54, -19, -48, 117, 16, -32, 125, -81, -54, -54, -69, 124, -53, 9, 80, -70, 47, 10, 60, -20, EmvService.TYPE_BALANCE_INQUIRY, 60, 82, -18, 108, -48, -98, -16, 4, 1, -93, -42, -52, 95, 104, -54, 95, -51, 10, -58, 19, EmvService.TYPE_SAVE, 65, -6, -3, 28, -6, 54, -94, 105, 45, 2, -35, -62, 126, -38, 76, -43, -66, -90, -1, EmvService.TYPE_SAVE, -111, 59, 81, 60, -25, -117, -13, 62, 104, 119, -86, 91, 96, 91, -58, -102, 83, 79, 55, 119, -53, -19, 99, 118, -70, 100, -100, 114, 81, 106, 126, 22, -81, -123};
        capk_pobc_80.Exponent = new byte[]{1, 0, 1};
        capk_pobc_80.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_80.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result = EmvService.Emv_AddCapk(capk_pobc_80);
        StringBuilder sb = new StringBuilder();
        sb.append("Add CAPK capk_pobc_80:");
        sb.append(result);
        sb.append(" ID:");
        sb.append(capk_pobc_80.KeyID);
        Log(sb.toString());
        if (result == 1) {
            StringBuilder sb2 = new StringBuilder();
            sb2.append("Create capk_pobc_80 database:");
            sb2.append(false);
            Log(sb2.toString());
        }
        EmvCAPK capk_pobc_C0 = new EmvCAPK();
        capk_pobc_C0.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_C0.KeyID = -64;
        capk_pobc_C0.HashInd = 1;
        capk_pobc_C0.ArithInd = 1;
        capk_pobc_C0.Modul = new byte[]{-57, -51, -74, -14, -93, -2, Byte.MIN_VALUE, -88, -125, 76, -35, -35, 50, 110, 16, -126, -86, 34, -120, -12, 124, 70, 77, 87, -77, 71, 24, 25, 52, EmvService.TYPE_BALANCE_INQUIRY, 113, 26, 68, 17, -111, 72, 5, 80, 68, -49, -29, EmvService.TYPE_BALANCE_INQUIRY, 55, 8, -66, -48, -55, -114, 28, 88, -101, 15, 83, -49, 109, 126, -126, -97, -51, -112, 109, EmvService.TYPE_SAVE, -87, 15, -44, -53, 107, -81, 19, 17, 12, 70, -123, 16, 124, 39, -32, 9, -127, -37, 41, -36, 10, -63, -122, -26, -41, 1, 87, Byte.MAX_VALUE, 35, -122, 86, 38, 36, 78, 31, -101, 44, -47, -35, -4, -71, -24, -103, -76, 31, 80, -124, -40, -52, -63, 120, -89, -61, -12, 84, 108, -7, EmvService.TYPE_BALANCE_INQUIRY, -121, 16, 111, -85, 5, 90, 122, -58, 125, -10, 46, 119, -116, -72, -120, 35, -70, 88, -49, 117, 70, -62, -80, -97};
        capk_pobc_C0.Exponent = new byte[]{1, 0, 1};
        capk_pobc_C0.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_C0.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result2 = EmvService.Emv_AddCapk(capk_pobc_C0);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("Add CAPK capk_pobc_C0:");
        sb3.append(result2);
        sb3.append(" ID:");
        sb3.append(capk_pobc_C0.KeyID);
        Log(sb3.toString());
        if (result2 == 1) {
            StringBuilder sb4 = new StringBuilder();
            sb4.append("Create capk_pobc_C0 database:");
            sb4.append(false);
            Log(sb4.toString());
        }
        EmvCAPK capk_pobc_C1 = new EmvCAPK();
        capk_pobc_C1.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_C1.KeyID = -63;
        capk_pobc_C1.HashInd = 1;
        capk_pobc_C1.ArithInd = 1;
        capk_pobc_C1.Modul = new byte[]{-110, -16, -125, -53, -28, 111, -115, -52, 12, 4, -28, -104, -70, -103, 82, -70, -99, 76, 9, -56, 13, -46, 119, -27, 121, -16, 126, 69, 119, 40, 70, -6, 67, -35, 58, -77, 28, -58, -80, -115, -47, -122, -107, 113, 89, 73, -5, 16, -114, 83, -96, 113, -45, -109, -89, -3, -37, -7, -59, -5, 11, 5, 7, 19, -121, -105, EmvService.TYPE_BALANCE_INQUIRY, 116, Byte.MIN_VALUE, -4, 72, -42, 51, -19, 56, -76, 1, -92, 81, 68, 58, -41, -15, 95, -84, -38, 69, -90, 42, -66, 36, -1, 99, 67, -83, -48, -112, -98, -88, 56, -109, 72, -27, 78, 38, -8, 66, -120, 13, 26, 105, -7, EmvService.TYPE_SAVE, 67, 104, -70, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -63, -115, -27, -59, -32, -53, -110, 83, -75, -85, -59, 95, -74, -17, 10, 115, -115, -110, 116, -108, -93, 11, -65, -126, -29, EmvService.TYPE_TRANSFER, 40, 83, 99, -74, -6, -95, 86, 115, -126, -99, -69, EmvService.TYPE_SAVE, 14, 113, 13, -91, -114, -23, -27, 120, -25, -50, 85, -36, -127, 42, -73, -42, -36, -50, 14, 59, 26, -31, 121, -42, 100, -13, 53, 110, -71, 81, -29, -55, 26, 28, -69, -10, -89, -54, -115, 12, 126, -55, -58, -81, 122, 73, 65, -59, 5, 16, -103, -71, 120, 78, 86, -55, 22, 32, 103, -72, -61, -79, 92, 95, -92, 72, 10, 100, 92, -46, 82, 106, 105, -56, 11, -88, -17, 54, 27, -30, -86, -108, 23, -34, -4, -29, 91, 98, -80, -55, -49, 9, 125};
        capk_pobc_C1.Exponent = new byte[]{1, 0, 1};
        capk_pobc_C1.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_C1.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result3 = EmvService.Emv_AddCapk(capk_pobc_C1);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("Add CAPK capk_pobc_C1:");
        sb5.append(result3);
        sb5.append(" ID:");
        sb5.append(capk_pobc_C1.KeyID);
        Log(sb5.toString());
        if (result3 == 1) {
            StringBuilder sb6 = new StringBuilder();
            sb6.append("Create capk_pobc_C1 database:");
            sb6.append(false);
            Log(sb6.toString());
        }
        EmvCAPK capk_pobc_61 = new EmvCAPK();
        capk_pobc_61.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_61.KeyID = 97;
        capk_pobc_61.HashInd = 1;
        capk_pobc_61.ArithInd = 1;
        capk_pobc_61.Modul = new byte[]{-125, 77, 42, 56, 124, 90, 95, 23, 110, -13, -26, 108, -86, -8, 63, 25, 75, 21, -86, -46, 71, 12, 120, -57, 125, 110, -77, -114, -38, -29, -94, -7, -70, 22, 35, -10, -91, -116, -119, 44, -55, 37, 99, 45, -1, 72, -50, -107, 75, EmvService.TYPE_SAVE, -91, 62, 31, 30, 67, 102, -66, EmvService.TYPE_TRANSFER, 60, 39, -101, -112, 2, 124, -68, 114, 96, 93, -74, -57, -112, 73, -72, -103, 44, -76, -111, 46, -6, 39, 11, -20, -85, 58, 124, -17, -32, 91, -6, 70, -28, -57, -69, -49, 124, 122, 23, 59, -39, -120, -39, -119, -77, 44, -73, -97, -84, -114, 53, -5, -31, -122, 14, 126, -87, -14, 56, -87, 42, 53, -109, 85, 45, 3, -47, -29, -122, 1};
        capk_pobc_61.Exponent = new byte[]{3};
        capk_pobc_61.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_61.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result4 = EmvService.Emv_AddCapk(capk_pobc_61);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("Add CAPK capk_pobc_61:");
        sb7.append(result4);
        sb7.append(" ID:");
        sb7.append(capk_pobc_61.KeyID);
        Log(sb7.toString());
        if (result4 == 1) {
            StringBuilder sb8 = new StringBuilder();
            sb8.append("Create capk_pobc_61 database:");
            sb8.append(false);
            Log(sb8.toString());
        }
        EmvCAPK capk_pobc_62 = new EmvCAPK();
        capk_pobc_62.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_62.KeyID = 98;
        capk_pobc_62.HashInd = 1;
        capk_pobc_62.ArithInd = 1;
        capk_pobc_62.Modul = new byte[]{-75, -51, -47, -27, 54, -120, 25, -4, 62, -90, 91, Byte.MIN_VALUE, -58, -127, 23, -69, -62, -97, -112, -106, -21, -46, 23, 38, -101, 88, 59, 7, 69, -32, -63, 100, 51, -43, 75, -114, -13, -121, -79, -26, -51, -38, -19, 73, 35, -61, -98, 55, 14, 92, -83, -2, 4, 23, 115, 2, 58, 107, -64, -96, 51, -80, 3, 27, 0, 72, -15, -118, -63, 89, 119, 60, -74, 105, 94, -23, -97, 85, 31, 65, 72, -125, -5, 5, -27, 38, EmvService.TYPE_TRANSFER, -24, -109, -12, -127, 96, -126, 36, 29, 123, -6, 54, EmvService.TYPE_TRANSFER, -106, 0, 3, -83, 117, 23, -119, 92, 80, -31, -124, -86, -107, 99, 103, -73, -65, -4, 109, -122, 22, -89, -75, 126, 45, 68, 122, -77, -31};
        capk_pobc_62.Exponent = new byte[]{1, 0, 1};
        capk_pobc_62.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_62.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result5 = EmvService.Emv_AddCapk(capk_pobc_62);
        StringBuilder sb9 = new StringBuilder();
        sb9.append("Add CAPK capk_pobc_62:");
        sb9.append(result5);
        Log(sb9.toString());
        if (result5 == 1) {
            StringBuilder sb10 = new StringBuilder();
            sb10.append("Create capk_pobc_62 database:");
            sb10.append(false);
            Log(sb10.toString());
        }
        EmvCAPK capk_pobc_63 = new EmvCAPK();
        capk_pobc_63.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_63.KeyID = 99;
        capk_pobc_63.HashInd = 1;
        capk_pobc_63.ArithInd = 1;
        capk_pobc_63.Modul = new byte[]{-122, 126, -54, 38, -91, 116, 114, -34, -5, 108, -87, 66, -119, EmvService.TYPE_BALANCE_INQUIRY, 43, -93, -100, 99, 5, 37, 24, -36, 72, 11, 110, -44, -111, -84, -61, 124, 2, -120, 70, -12, -41, -73, -102, -6, -18, -6, 7, -5, 1, 29, -86, 70, -64, 96, EmvService.TYPE_SAVE, -23, 50, -43, 1, -65, 82, -14, -125, 74, -34, 58, -57, 104, -98, -108, -78, 72, -78, -113, 63, -30, Byte.MIN_VALUE, 54, 105, -34, -38, 0, 9, -120, -38, 18, 73, -7, -88, -111, 85, -118, 5, -95, -27, -89, -67, 44, 40, 47, -31, -115, 32, 65, -119, -87, -103, 77, 74, -35, -122, -64, -50, 80, -107, 46, -40, -68, -20, 12, -26, 51, 103, -111, -120, 40, 94, 81, -31, -66, -40, EmvService.TYPE_TRANSFER, -4, -65, -63, 9, 83, -109, -102, -12, -99, -71, 0, 72, -111, 46, 72, -76, 65, -127};
        capk_pobc_63.Exponent = new byte[]{3};
        capk_pobc_63.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_63.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result6 = EmvService.Emv_AddCapk(capk_pobc_63);
        StringBuilder sb11 = new StringBuilder();
        sb11.append("Add CAPK capk_pobc_63:");
        sb11.append(result6);
        sb11.append(" ID:");
        sb11.append(capk_pobc_63.KeyID);
        Log(sb11.toString());
        if (result6 == 1) {
            StringBuilder sb12 = new StringBuilder();
            sb12.append("Create capk_pobc_63 database:");
            sb12.append(false);
            Log(sb12.toString());
        }
        EmvCAPK capk_pobc_64 = new EmvCAPK();
        capk_pobc_64.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_64.KeyID = 100;
        capk_pobc_64.HashInd = 1;
        capk_pobc_64.ArithInd = 1;
        byte[] bArr = new byte[EmvService.QVSDC_ONLINE_APPROVE];
        // fill-array-data instruction
        bArr[0] = -111;
        bArr[1] = 18;
        bArr[2] = 62;
        bArr[3] = -49;
        bArr[4] = 2;
        bArr[5] = 48;
        bArr[6] = -29;
        bArr[7] = -53;
        bArr[8] = 36;
        bArr[9] = 92;
        bArr[10] = -120;
        bArr[11] = -35;
        bArr[12] = -6;
        bArr[13] = 62;
        bArr[14] = -27;
        bArr[15] = 123;
        bArr[16] = -59;
        bArr[17] = -114;
        bArr[18] = -48;
        bArr[19] = 11;
        bArr[20] = 54;
        bArr[21] = 123;
        bArr[22] = 56;
        bArr[23] = 117;
        bArr[24] = -4;
        bArr[25] = -73;
        bArr[26] = -107;
        bArr[27] = 72;
        bArr[28] = -121;
        bArr[29] = 38;
        bArr[30] = -128;
        bArr[31] = -10;
        bArr[32] = 1;
        bArr[33] = -24;
        bArr[34] = -56;
        bArr[35] = 57;
        bArr[36] = -84;
        bArr[37] = 7;
        bArr[38] = 33;
        bArr[39] = -70;
        bArr[40] = -77;
        bArr[41] = -72;
        bArr[42] = -98;
        bArr[43] = -46;
        bArr[44] = 22;
        bArr[45] = 7;
        bArr[46] = 40;
        bArr[47] = 28;
        bArr[48] = -119;
        bArr[49] = 25;
        bArr[50] = -65;
        bArr[51] = 114;
        bArr[52] = 98;
        bArr[53] = 102;
        bArr[54] = -22;
        bArr[55] = -72;
        bArr[56] = 72;
        bArr[57] = 80;
        bArr[58] = 42;
        bArr[59] = -40;
        bArr[60] = 116;
        bArr[61] = -75;
        bArr[62] = 16;
        bArr[63] = 122;
        bArr[64] = 78;
        bArr[65] = 101;
        bArr[66] = 78;
        bArr[67] = -10;
        bArr[68] = -45;
        bArr[69] = 119;
        bArr[70] = 115;
        bArr[71] = 52;
        bArr[72] = 63;
        bArr[73] = 70;
        bArr[74] = 20;
        bArr[75] = 53;
        bArr[76] = -56;
        bArr[77] = 110;
        bArr[78] = 74;
        bArr[79] = -113;
        bArr[80] = -122;
        bArr[81] = 111;
        bArr[82] = -79;
        bArr[83] = -116;
        bArr[84] = 124;
        bArr[85] = -70;
        bArr[86] = 73;
        bArr[87] = 123;
        bArr[88] = 66;
        bArr[89] = 98;
        bArr[90] = -112;
        bArr[91] = -61;
        bArr[92] = -115;
        bArr[93] = 25;
        bArr[94] = 110;
        bArr[95] = 42;
        bArr[96] = -1;
        bArr[97] = 51;
        bArr[98] = -64;
        bArr[99] = -112;
        bArr[100] = 111;
        bArr[101] = -110;
        bArr[102] = -106;
        bArr[103] = -14;
        bArr[104] = -105;
        bArr[105] = -31;
        bArr[106] = 86;
        bArr[107] = -36;
        bArr[108] = 96;
        bArr[109] = 42;
        bArr[110] = 94;
        bArr[111] = 101;
        bArr[112] = 60;
        bArr[113] = -95;
        bArr[114] = 22;
        bArr[115] = -113;
        bArr[116] = 17;
        bArr[117] = 9;
        bArr[118] = 38;
        bArr[119] = 17;
        bArr[120] = 20;
        bArr[121] = -65;
        bArr[122] = 123;
        bArr[123] = -24;
        bArr[124] = 18;
        bArr[125] = 122;
        bArr[126] = 62;
        bArr[127] = -128;
        bArr[128] = 7;
        bArr[129] = 25;
        bArr[130] = 24;
        bArr[131] = 48;
        bArr[132] = 19;
        bArr[133] = 66;
        bArr[134] = -103;
        bArr[135] = 57;
        bArr[136] = 92;
        bArr[137] = -30;
        bArr[138] = -77;
        bArr[139] = 34;
        bArr[140] = 34;
        bArr[141] = -122;
        bArr[142] = 103;
        bArr[143] = -73;
        bArr[144] = 110;
        bArr[145] = 7;
        bArr[146] = 46;
        bArr[147] = -73;
        bArr[148] = -3;
        bArr[149] = 93;
        bArr[150] = 15;
        bArr[151] = -77;
        bArr[152] = -88;
        bArr[153] = 62;
        bArr[154] = -118;
        bArr[155] = -47;
        bArr[156] = -41;
        bArr[157] = -10;
        bArr[158] = -3;
        bArr[159] = -127;
        capk_pobc_64.Modul = bArr;
        capk_pobc_64.Exponent = new byte[]{3};
        capk_pobc_64.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_64.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result7 = EmvService.Emv_AddCapk(capk_pobc_64);
        StringBuilder sb13 = new StringBuilder();
        sb13.append("Add CAPK capk_pobc_64:");
        sb13.append(result7);
        sb13.append(" ID:");
        sb13.append(capk_pobc_64.KeyID);
        Log(sb13.toString());
        if (result7 == 1) {
            StringBuilder sb14 = new StringBuilder();
            sb14.append("Create capk_pobc_64 database:");
            sb14.append(false);
            Log(sb14.toString());
        }
        EmvCAPK capk_pobc_65 = new EmvCAPK();
        capk_pobc_65.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_65.KeyID = 101;
        capk_pobc_65.HashInd = 1;
        capk_pobc_65.ArithInd = 1;
        capk_pobc_65.Modul = new byte[]{-127, -70, 30, 107, -97, 103, 28, -4, -124, -116, -94, -84, -40, -31, 122, -12, 6, -76, -45, 41, -47, -20, -91, -48, 27, -64, -108, -88, 124, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -81, 73, -122, 121, 68, -58, 50, -24, 24, 80, 116, 101, 95, -91, 53, -83, -116, -92, 42, -125, -76, 26, -86, -22, -123, -97, 67, 47, -96, -72, 24, -25, 45, -64, 126, -45, -9, Byte.MAX_VALUE, -77, 24, -92, 117, -94, 97, -64, 118, 10, 21, 110, 93, -36, 21, 122, -24, -73, -101, -89, 45, -119, -42, -97, -1, 117, 70, 25, -23, 40, -15, 81, 106, 42, 114, -64, -8, 107, 9, -72, -22, 37, -8, 109, -59, -92, -114, -68, 90, 22, -8, 63, -70, -113, -60, -29, -87, -126, 120, -111, 34, 73, -12, -32, 121, -68, -68, 6, -25, -66, -39, -82, -45, -105, -121, -99, 39, -98, -39, 25, 37, 57, 73, 1, 38, 9, 73, -68, -50, 111, -95, 22, -105, -104, -94, 113, 93, -82, 50, -104, -117, -17, -66, -106, EmvService.TYPE_SAVE, -82, 21, -32, -63};
        capk_pobc_65.Exponent = new byte[]{1, 0, 1};
        capk_pobc_65.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_65.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result8 = EmvService.Emv_AddCapk(capk_pobc_65);
        StringBuilder sb15 = new StringBuilder();
        sb15.append("Add CAPK capk_pobc_65:");
        sb15.append(result8);
        sb15.append(" ID:");
        sb15.append(capk_pobc_65.KeyID);
        Log(sb15.toString());
        if (result8 == 1) {
            StringBuilder sb16 = new StringBuilder();
            sb16.append("Create capk_pobc_65 database:");
            sb16.append(false);
            Log(sb16.toString());
        }
        EmvCAPK capk_pobc_66 = new EmvCAPK();
        capk_pobc_66.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_66.KeyID = 102;
        capk_pobc_66.HashInd = 1;
        capk_pobc_66.ArithInd = 1;
        capk_pobc_66.Modul = new byte[]{Byte.MAX_VALUE, 90, 57, 69, 121, 77, 107, 21, -11, -14, 107, 74, EmvService.TYPE_SAVE, -90, 58, 94, -13, 85, EmvService.TYPE_TRANSFER, -40, -56, -64, -103, 21, 31, 34, 121, 120, 10, 92, 24, -93, 23, 112, 60, -104, 99, 46, Byte.MIN_VALUE, 77, 37, 87, 106, 123, 70, 12, 5, 6, 30, 3, -105, 94, 80, -5, -41, 73, 91, 58, -36, -114, 66, 94, 83, -33, 118, -6, EmvService.TYPE_TRANSFER, -80, 53, -24, Byte.MAX_VALUE, 105, -85, -8, 118, 90, 82, 82, 63, 59, 26, 57, -79, -107, 40, -80, 2, 35, -112, 21, -6, -37, -91, -110, 16, 81};
        capk_pobc_66.Exponent = new byte[]{1, 0, 1};
        capk_pobc_66.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_66.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result9 = EmvService.Emv_AddCapk(capk_pobc_66);
        StringBuilder sb17 = new StringBuilder();
        sb17.append("Add CAPK capk_pobc_66:");
        sb17.append(result9);
        sb17.append(" ID:");
        sb17.append(capk_pobc_66.KeyID);
        Log(sb17.toString());
        if (result9 == 1) {
            StringBuilder sb18 = new StringBuilder();
            sb18.append("Create capk_pobc_66 database:");
            sb18.append(false);
            Log(sb18.toString());
        }
        EmvCAPK capk_pobc_05 = new EmvCAPK();
        capk_pobc_05.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_05.KeyID = 5;
        capk_pobc_05.HashInd = 1;
        capk_pobc_05.ArithInd = 1;
        capk_pobc_05.Modul = new byte[]{-105, -49, -117, -83, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -54, -32, -7, -88, -110, -123, 69, 77, -35, -23, 103, -86, -5, -51, 75, -64, -73, -113, 41, -20, -79, 0, 82, -122, -15, 95, 109, 117, 50, -87, -60, 118, 96, 124, 115, -1, 116, 36, EmvService.TYPE_BALANCE_INQUIRY, 109, -4, 116, 24, -108, -86, 82, -19, -70, -7, 9, 113, -100, 123, 83, 68, -125, 67, -76, 92, -14, -16, 10, -118, -65, -73, -116, -18, -66, -124, -119, 51, -86, -19, -105, -37, -24, 79, 7, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -13, 79, -79, -86, 21, 40, -45, -42, -20, 117, -73, 50, 82, -93, 13, 12, 113, 117, 24, -66, 54, 69, -118, -35, 15, -65, -123, 76, 101, 73, Byte.MAX_VALUE, 63, 84, 8, 65, 84, -74, 15, 81, 86, 19, 97, -18, -114, -123, -9, 66, -91, EmvService.TYPE_TRANSFER, 5, 82, 76, -80, 15, -21, -61, 52, 39, 110, 14, 99, -38, -40, 108, 7, -102, -102, 61, -11, -35, 50, -66, -54, -34, 26, -78, -73, 31, 95, 10, 14, -107, -92, 0, 13, 1, -15, 4, 74, 87, -118, -83, -110, -23, -3, -23, 46, 60, 106, -93, -36, -44, -111, 61, -6, 85, 82, 83, 126, 125, -25, 94, 36, 31, -82, -44, 85, -41, 108, -72, -4, -81, -18, -45, -3, 109, -85, 36, -41, -87, -61, 40, 82, -8, 102, -57, 81, -41, 113, 15, 73, 74, 13, -15, 27, 103, -6, -20, -35, -121, -87, -92, -30, -52, 68, -10, -14, 126, 70, -29, -64, -52, -51, 15};
        capk_pobc_05.Exponent = new byte[]{3};
        capk_pobc_05.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_05.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result10 = EmvService.Emv_AddCapk(capk_pobc_05);
        StringBuilder sb19 = new StringBuilder();
        sb19.append("Add CAPK capk_pobc_05:");
        sb19.append(result10);
        sb19.append(" ID:");
        sb19.append(capk_pobc_05.KeyID);
        Log(sb19.toString());
        if (result10 == 1) {
            StringBuilder sb20 = new StringBuilder();
            sb20.append("Create capk_pobc_05 database:");
            sb20.append(false);
            Log(sb20.toString());
        }
        EmvCAPK capk_pobc_08 = new EmvCAPK();
        capk_pobc_08.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_08.KeyID = 8;
        capk_pobc_08.HashInd = 1;
        capk_pobc_08.ArithInd = 1;
        capk_pobc_08.Modul = new byte[]{-74, 22, 69, -19, -3, 84, -104, -5, 36, 100, 68, 3, 122, 15, -95, -116, 15, 16, 30, -67, -114, -6, 84, 87, 60, -26, -26, -89, -5, -10, 62, -46, 29, 102, 52, 8, 82, -80, EmvService.TYPE_SAVE, 28, -11, -18, -10, -95, -51, -104, -97, 102, -81, EmvService.TYPE_SAVE, -88, -21, 25, -37, -40, -37, -61, 112, 109, 19, 83, 99, -96, -42, -125, -48, 70, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 79, 90, -125, 107, -63, -68, 99, 40, EmvService.TYPE_SAVE, -81, -25, -94, -9, 93, -93, -59, 10, -57, 76, 84, 90, 117, 69, 98, 32, 65, 55, 22, -106, 99, -49, -52, 11, 6, -26, 126, EmvService.TYPE_SAVE, 9, -21, -92, 27, -58, Byte.MAX_VALUE, -14, 12, -56, -84, Byte.MIN_VALUE, -41, -74, -18, 26, -107, 70, 91, 59, 38, 87, 83, 62, -91, 109, -110, -43, 57, -27, 6, 67, 96, -22, 72, 80, -2, -46, -47, -65};
        capk_pobc_08.Exponent = new byte[]{3};
        capk_pobc_08.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_08.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result11 = EmvService.Emv_AddCapk(capk_pobc_08);
        StringBuilder sb21 = new StringBuilder();
        sb21.append("Add CAPK capk_pobc_08:");
        sb21.append(result11);
        sb21.append(" ID:");
        sb21.append(capk_pobc_08.KeyID);
        Log(sb21.toString());
        if (result11 == 1) {
            StringBuilder sb22 = new StringBuilder();
            sb22.append("Create capk_pobc_08 database:");
            sb22.append(false);
            Log(sb22.toString());
        }
        EmvCAPK capk_pobc_09 = new EmvCAPK();
        int i = result11;
        capk_pobc_09.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_09.KeyID = 8;
        capk_pobc_09.HashInd = 1;
        capk_pobc_09.ArithInd = 1;
        capk_pobc_09.Modul = new byte[]{-21, 55, 77, -4, 90, -106, -73, 29, 40, 99, -121, 94, -38, 46, -81, -71, 107, 27, 67, -99, 62, -50, 11, 24, 38, -94, 103, 46, -18, -6, 121, -112, 40, 103, 118, -8, -67, -104, -102, 21, 20, 26, 117, -61, -124, -33, -63, 79, -17, -110, 67, -86, -77, 39, 7, 101, -101, -23, -28, 121, 122, 36, 124, 47, 11, 109, -103, 55, 47, 56, 74, -10, 47, -30, 59, -59, 75, -51, -59, 122, -102, -51, 29, 85, -123, -61, 3, -14, 1, -17, 78, -117, Byte.MIN_VALUE, 106, -5, Byte.MIN_VALUE, -99, -79, -93, -37, 28, -47, 18, -84, -120, 79, 22, 74, 103, -71, -100, 125, 110, 90, -118, 109, -15, -45, -54, -26, -41, -19, 61, 91, -25, 37, -78, -34, 74, -34, 35, -6, 103, -101, -12, -21, 21, -87, 61, -118, 110, 41, -57, -1, -95, -89, 13, -30, -27, 79, 89, 61, -112, -118, 59, -7, -21, -67, 118, 11, -65, -36, -115, -72, -75, 68, -105, -26, -59, -66, 14, 74, 77, -84, 41, -27};
        capk_pobc_09.Exponent = new byte[]{3};
        capk_pobc_09.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_09.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result12 = EmvService.Emv_AddCapk(capk_pobc_09);
        StringBuilder sb23 = new StringBuilder();
        sb23.append("Add CAPK capk_pobc_09:");
        sb23.append(result12);
        sb23.append(" ID:");
        sb23.append(capk_pobc_09.KeyID);
        Log(sb23.toString());
        if (result12 == 1) {
            StringBuilder sb24 = new StringBuilder();
            sb24.append("Create capk_pobc_09 database:");
            sb24.append(false);
            Log(sb24.toString());
        }
        EmvCAPK capk_pobc_0B = new EmvCAPK();
        int i2 = result12;
        capk_pobc_0B.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_0B.KeyID = 11;
        capk_pobc_0B.HashInd = 1;
        capk_pobc_0B.ArithInd = 1;
        capk_pobc_0B.Modul = new byte[]{-49, -97, -33, 70, -77, 86, 55, -114, -102, -13, 17, -80, -7, -127, -78, 26, 31, 34, -14, 80, -5, 17, -11, 92, -107, -121, 9, -29, -57, 36, 25, 24, 41, 52, -125, 40, -98, -82, 104, -118, 9, 76, 2, -61, 68, -30, -103, -97, EmvService.TYPE_BALANCE_INQUIRY, 90, 114, -124, 31, 72, -98, 36, -79, -70, 0, 86, -49, -85, 59, 71, -99, 14, -126, 100, 82, 55, 93, -51, -69, 103, -23, 126, -62, -86, 102, -12, 96, 29, 119, 79, -22, -17, 119, 90, -52, -58, EmvService.TYPE_SAVE, -65, -21, 101, -5, 0, 83, -4, 95, 57, 42, -91, -31, -44, -60, 26, 77, -23, -1, -33, -33, 19, 39, -60, -69, -121, 79, 31, 99, -91, -103, -18, 57, 2, -2, -107, -25, 41, -3, 120, -44, 35, 77, -57, -26, -49, 26, -70, -70, -93, -10, -37, 41, -73, -16, 93, 29, -112, 29, 46, 118, -90, 6, -88, -53, -1, -1, -20, -67, -111, -113, -94, -46, 120, -67, -76, 59, 4, 52, -11, -44, 81, 52, -66, 28, 39, -127, -47, 87, -43, 1, -1, 67, -27, -15, -60, 112, -106, 124, -43, 124, -27, 59, 100, -40, 41, 116, -56, 39, 89, 55, -59, -40, 80, 42, 18, 82, -88, -91, -42, 8, -118, 37, -101, 105, 79, -104, 100, -115, -102, -14, -53, 14, -3, -99, -108, 60, 105, -8, -106, -44, -97, -93, -105, 2, 22, 42, -53, 90, -14, -101, -112, -70, -34, 0, 91, -63, 87};
        capk_pobc_0B.Exponent = new byte[]{3};
        capk_pobc_0B.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_0B.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result13 = EmvService.Emv_AddCapk(capk_pobc_0B);
        StringBuilder sb25 = new StringBuilder();
        EmvCAPK emvCAPK = capk_pobc_80;
        sb25.append("Add CAPK capk_pobc_0B:");
        sb25.append(result13);
        sb25.append(" ID:");
        sb25.append(capk_pobc_0B.KeyID);
        Log(sb25.toString());
        if (result13 == 1) {
            StringBuilder sb26 = new StringBuilder();
            sb26.append("Create capk_pobc_0B database:");
            sb26.append(false);
            Log(sb26.toString());
        }
        EmvCAPK capk_pobc_84 = new EmvCAPK();
        int i3 = result13;
        capk_pobc_84.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_84.KeyID = -124;
        capk_pobc_84.HashInd = 1;
        capk_pobc_84.ArithInd = 1;
        capk_pobc_84.Modul = new byte[]{-7, -22, 85, 3, -49, -28, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 56, 89, 108, 114, 6, 69, -87, 78, 1, 84, 121, 61, -25, 58, -27, -87, 53, -47, -5, -99, 15, -25, 114, -122, -74, 18, 97, -29, -69, 29, 61, -2, -59, 71, 68, -103, -110, -30, 3, 124, 1, -1, 78, -5, -120, -38, -118, -126, -13, 15, -22, EmvService.TYPE_BALANCE_INQUIRY, -104, -43, -47, 103, 84, 36, 122, 22, 38, -23, -49, -5, 76, -39, -29, 19, -103, -103, 14, 67, -4, -89, 124, 116, 74, -109, 104, 90, 38, 10, 32, -26, -90, 7, -13, -18, 63, -82, 42, -69, -23, -106, 120, -55, -15, -99, -3, 45, -114, -89, 103, -119, 35, -99, 19, 54, -99, 125, 45, 86, -81, 63, 39, -109, 6, -119, 80, -75, -67, Byte.MIN_VALUE, -116, 70, 37, 113, 102, 45, 67, 100, -77, 10, 37, -126, -107, -99, -78, 56, 51, 59, -83, -84, -76, 66, -7, 81, 107, 92, 51, 108, -118, 97, 63, -32, 20, -73, -41, 115, 88, 26, -31, 15, -33, 123, -37, 38, 105, 1, 45};
        capk_pobc_84.Exponent = new byte[]{3};
        capk_pobc_84.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_84.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result14 = EmvService.Emv_AddCapk(capk_pobc_84);
        StringBuilder sb27 = new StringBuilder();
        EmvCAPK emvCAPK2 = capk_pobc_0B;
        sb27.append("Add CAPK capk_pobc_84:");
        sb27.append(result14);
        sb27.append(" ID:");
        sb27.append(capk_pobc_84.KeyID);
        Log(sb27.toString());
        if (result14 == 1) {
            StringBuilder sb28 = new StringBuilder();
            sb28.append("Create capk_pobc_84 database:");
            sb28.append(false);
            Log(sb28.toString());
        }
        EmvCAPK capk_pobc_85 = new EmvCAPK();
        int i4 = result14;
        capk_pobc_85.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_85.KeyID = -123;
        capk_pobc_85.HashInd = 1;
        capk_pobc_85.ArithInd = 1;
        capk_pobc_85.Modul = new byte[]{-55, 36, 46, -58, 3, 15, 16, -27, 34, 94, 114, 42, -95, 125, -99, -56, -108, 41, -110, 51, -82, -61, EmvService.TYPE_SAVE, -101, -107, 13, 79, 36, 58, -11, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -6, 19, -29, -93, 26, -6, -96, -44, -65, 77, -27, 98, -74, -76, -61, 16, -118, -21, -68, 108, -80, Byte.MIN_VALUE, -7, 7, 112, -43, 50, -14, 65, -68, 21, 54, EmvService.TYPE_TRANSFER, 30, 27, -9, 47, -99, -63, -80, -119, 51, -71, -65, 119, EmvService.TYPE_TRANSFER, 63, 106, 15, -75, 119, 123, -86, 76, -101, -23, 21, 116, -69, -65, -75, EmvService.TYPE_SAVE, 52, 42, 32, 56, 103, -112, 81, 34, EmvService.TYPE_SAVE, -12, 119, -5, -59, 63, -15, -74, 83, 58, 1, 88, 21, 67, 84, 16, -20, 39, 47, 10, 52, -22, 7, 53, -60, 57, 103, 125, 126, 70, -5, -89, 102, -20, 0, -50, -43, -101, 103, 21, -29, 65, 45, 111, -72, -87, 52, -65, -99, 20, -105, -94, 74, 98, 82, -59, 45, 117, -122, -3, 102, -92, 80, -5, 93, 43, 68, -124, -20, -110, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 97, 67, -106, 34, -68, 5, 53, EmvService.TYPE_BALANCE_INQUIRY, 108, -44, 35, 28, 19, -58, 39, -65, 77, 46, -34, 28, 2, -56, 2, 70, 70, 88, -15, -71, -41, -1, 35, -93, 105, -123, 16, -6, -112, -48, -61, 22, 73, 66, -5, 53, -110, 85, -51, -126, 60, -78, 99, 91, 63, 22, Byte.MAX_VALUE, -67, -4, -112, 6, 65, -71, 112, -42, 2, -94, 119, 26, Byte.MAX_VALUE, 79, -108, -33, 109, 52, -66, -117, -69};
        capk_pobc_85.Exponent = new byte[]{3};
        capk_pobc_85.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_85.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result15 = EmvService.Emv_AddCapk(capk_pobc_85);
        StringBuilder sb29 = new StringBuilder();
        EmvCAPK emvCAPK3 = capk_pobc_84;
        sb29.append("Add CAPK capk_pobc_85:");
        sb29.append(result15);
        sb29.append(" ID:");
        sb29.append(capk_pobc_85.KeyID);
        Log(sb29.toString());
        if (result15 == 1) {
            StringBuilder sb30 = new StringBuilder();
            sb30.append("Create capk_pobc_85 database:");
            sb30.append(false);
            Log(sb30.toString());
        }
        EmvCAPK capk_E1 = new EmvCAPK();
        int i5 = result15;
        capk_E1.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E1.KeyID = -31;
        capk_E1.HashInd = 1;
        capk_E1.ArithInd = 1;
        byte[] bArr2 = new byte[PaypassResult.PAYPASS_STATUS_TRYAGAIN];
        // fill-array-data instruction
        bArr2[0] = -103;
        bArr2[1] = -59;
        bArr2[2] = -73;
        bArr2[3] = 10;
        bArr2[4] = -90;
        bArr2[5] = 27;
        bArr2[6] = 79;
        bArr2[7] = 76;
        bArr2[8] = 81;
        bArr2[9] = -74;
        bArr2[10] = -7;
        bArr2[11] = 11;
        bArr2[12] = 14;
        bArr2[13] = 59;
        bArr2[14] = -5;
        bArr2[15] = 122;
        bArr2[16] = 62;
        bArr2[17] = -32;
        bArr2[18] = -25;
        bArr2[19] = -37;
        bArr2[20] = 65;
        bArr2[21] = -68;
        bArr2[22] = 70;
        bArr2[23] = 104;
        bArr2[24] = -120;
        bArr2[25] = -77;
        bArr2[26] = -20;
        bArr2[27] = -114;
        bArr2[28] = -103;
        bArr2[29] = 119;
        bArr2[30] = -57;
        bArr2[31] = 98;
        bArr2[32] = 64;
        bArr2[33] = 126;
        bArr2[34] = -15;
        bArr2[35] = -41;
        bArr2[36] = -98;
        bArr2[37] = 10;
        bArr2[38] = -5;
        bArr2[39] = 40;
        bArr2[40] = 35;
        bArr2[41] = 16;
        bArr2[42] = 10;
        bArr2[43] = 2;
        bArr2[44] = 12;
        bArr2[45] = 62;
        bArr2[46] = -128;
        bArr2[47] = 32;
        bArr2[48] = 89;
        bArr2[49] = 61;
        bArr2[50] = -75;
        bArr2[51] = 14;
        bArr2[52] = -112;
        bArr2[53] = -37;
        bArr2[54] = -22;
        bArr2[55] = -63;
        bArr2[56] = -117;
        bArr2[57] = 120;
        bArr2[58] = -47;
        bArr2[59] = 63;
        bArr2[60] = -106;
        bArr2[61] = -69;
        bArr2[62] = 47;
        bArr2[63] = 87;
        bArr2[64] = -18;
        bArr2[65] = -35;
        bArr2[66] = -61;
        bArr2[67] = 15;
        bArr2[68] = 37;
        bArr2[69] = 101;
        bArr2[70] = -110;
        bArr2[71] = 65;
        bArr2[72] = 124;
        bArr2[73] = -33;
        bArr2[74] = 115;
        bArr2[75] = -100;
        bArr2[76] = -90;
        bArr2[77] = -128;
        bArr2[78] = 74;
        bArr2[79] = 16;
        bArr2[80] = -94;
        bArr2[81] = -99;
        bArr2[82] = 40;
        bArr2[83] = 6;
        bArr2[84] = -25;
        bArr2[85] = 116;
        bArr2[86] = -65;
        bArr2[87] = -89;
        bArr2[88] = 81;
        bArr2[89] = -14;
        bArr2[90] = 44;
        bArr2[91] = -13;
        bArr2[92] = -74;
        bArr2[93] = 91;
        bArr2[94] = 56;
        bArr2[95] = -13;
        bArr2[96] = 127;
        bArr2[97] = -111;
        bArr2[98] = -76;
        bArr2[99] = -38;
        bArr2[100] = -8;
        bArr2[101] = -82;
        bArr2[102] = -55;
        bArr2[103] = -72;
        bArr2[104] = 3;
        bArr2[105] = -9;
        bArr2[106] = 97;
        bArr2[107] = 14;
        bArr2[108] = 6;
        bArr2[109] = -84;
        bArr2[110] = -98;
        bArr2[111] = 107;
        capk_E1.Modul = bArr2;
        capk_E1.Exponent = new byte[]{3};
        capk_E1.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E1.CheckSum = new byte[]{-8, 112, 123, -101, -19, -16, EmvService.TYPE_BALANCE_INQUIRY, -27, -118, -97, -124, 54, EmvService.TYPE_BALANCE_INQUIRY, -71, 12, -112, -40, 14, -42, -107};
        int result16 = EmvService.Emv_AddCapk(capk_E1);
        StringBuilder sb31 = new StringBuilder();
        EmvCAPK emvCAPK4 = capk_pobc_85;
        sb31.append("Add CAPK capk_E1:");
        sb31.append(result16);
        sb31.append(" ID:");
        sb31.append(capk_E1.KeyID);
        Log(sb31.toString());
        if (result16 == 1) {
            StringBuilder sb32 = new StringBuilder();
            sb32.append("Create capk_E1 database:");
            sb32.append(false);
            Log(sb32.toString());
        }
        EmvCAPK capk_E2 = new EmvCAPK();
        int i6 = result16;
        capk_E2.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E2.KeyID = -30;
        capk_E2.HashInd = 1;
        capk_E2.ArithInd = 1;
        byte[] bArr3 = new byte[PaypassResult.PAYPASS_STATUS_TRYAGAIN];
        // fill-array-data instruction
        bArr3[0] = -67;
        bArr3[1] = 35;
        bArr3[2] = 46;
        bArr3[3] = 52;
        bArr3[4] = -117;
        bArr3[5] = 17;
        bArr3[6] = -114;
        bArr3[7] = -77;
        bArr3[8] = -10;
        bArr3[9] = 68;
        bArr3[10] = 110;
        bArr3[11] = -12;
        bArr3[12] = -38;
        bArr3[13] = 108;
        bArr3[14] = 59;
        bArr3[15] = -84;
        bArr3[16] = -101;
        bArr3[17] = 42;
        bArr3[18] = -27;
        bArr3[19] = 16;
        bArr3[20] = -59;
        bArr3[21] = -83;
        bArr3[22] = 16;
        bArr3[23] = 125;
        bArr3[24] = 56;
        bArr3[25] = 52;
        bArr3[26] = 50;
        bArr3[27] = 85;
        bArr3[28] = -46;
        bArr3[29] = 28;
        bArr3[30] = 75;
        bArr3[31] = -33;
        bArr3[32] = 73;
        bArr3[33] = 82;
        bArr3[34] = -92;
        bArr3[35] = 46;
        bArr3[36] = -110;
        bArr3[37] = -58;
        bArr3[38] = 51;
        bArr3[39] = -79;
        bArr3[40] = -50;
        bArr3[41] = 75;
        bArr3[42] = -2;
        bArr3[43] = -61;
        bArr3[44] = -102;
        bArr3[45] = -5;
        bArr3[46] = 109;
        bArr3[47] = -2;
        bArr3[48] = 20;
        bArr3[49] = 126;
        bArr3[50] = -53;
        bArr3[51] = -71;
        bArr3[52] = 29;
        bArr3[53] = 104;
        bArr3[54] = 29;
        bArr3[55] = -84;
        bArr3[56] = 21;
        bArr3[57] = -5;
        bArr3[58] = 14;
        bArr3[59] = 25;
        bArr3[60] = -114;
        bArr3[61] = -102;
        bArr3[62] = 126;
        bArr3[63] = 70;
        bArr3[64] = 54;
        bArr3[65] = -67;
        bArr3[66] = -54;
        bArr3[67] = 16;
        bArr3[68] = 123;
        bArr3[69] = -51;
        bArr3[70] = -93;
        bArr3[71] = 56;
        bArr3[72] = 79;
        bArr3[73] = -53;
        bArr3[74] = 40;
        bArr3[75] = -80;
        bArr3[76] = 106;
        bArr3[77] = -2;
        bArr3[78] = -7;
        bArr3[79] = 15;
        bArr3[80] = 9;
        bArr3[81] = -98;
        bArr3[82] = 112;
        bArr3[83] = -124;
        bArr3[84] = 81;
        bArr3[85] = 31;
        bArr3[86] = 60;
        bArr3[87] = -64;
        bArr3[88] = 16;
        bArr3[89] = -44;
        bArr3[90] = 52;
        bArr3[91] = 53;
        bArr3[92] = 3;
        bArr3[93] = -31;
        bArr3[94] = -27;
        bArr3[95] = -90;
        bArr3[96] = 114;
        bArr3[97] = 100;
        bArr3[98] = -76;
        bArr3[99] = 54;
        bArr3[100] = 125;
        bArr3[101] = -86;
        bArr3[102] = -102;
        bArr3[103] = 57;
        bArr3[104] = 73;
        bArr3[105] = 73;
        bArr3[106] = -110;
        bArr3[107] = 114;
        bArr3[108] = -23;
        bArr3[109] = -75;
        bArr3[110] = 2;
        bArr3[111] = 47;
        capk_E2.Modul = bArr3;
        capk_E2.Exponent = new byte[]{3};
        capk_E2.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E2.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result17 = EmvService.Emv_AddCapk(capk_E2);
        StringBuilder sb33 = new StringBuilder();
        EmvCAPK emvCAPK5 = capk_E1;
        sb33.append("Add CAPK capk_E2:");
        sb33.append(result17);
        sb33.append(" ID:");
        sb33.append(capk_E2.KeyID);
        Log(sb33.toString());
        if (result17 == 1) {
            StringBuilder sb34 = new StringBuilder();
            sb34.append("Create capk_E2 database:");
            sb34.append(false);
            Log(sb34.toString());
        }
        EmvCAPK capk_E3 = new EmvCAPK();
        int i7 = result17;
        capk_E3.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E3.KeyID = -29;
        capk_E3.HashInd = 1;
        capk_E3.ArithInd = 1;
        byte[] bArr4 = new byte[PaypassResult.PAYPASS_STATUS_TRYAGAIN];
        // fill-array-data instruction
        bArr4[0] = -68;
        bArr4[1] = 1;
        bArr4[2] = -31;
        bArr4[3] = 34;
        bArr4[4] = 35;
        bArr4[5] = -31;
        bArr4[6] = -92;
        bArr4[7] = 30;
        bArr4[8] = -120;
        bArr4[9] = -65;
        bArr4[10] = -6;
        bArr4[11] = -128;
        bArr4[12] = 16;
        bArr4[13] = -109;
        bArr4[14] = -59;
        bArr4[15] = -8;
        bArr4[16] = -50;
        bArr4[17] = -59;
        bArr4[18] = -51;
        bArr4[19] = 5;
        bArr4[20] = -37;
        bArr4[21] = -67;
        bArr4[22] = -69;
        bArr4[23] = 120;
        bArr4[24] = 124;
        bArr4[25] = -24;
        bArr4[26] = 114;
        bArr4[27] = 73;
        bArr4[28] = -24;
        bArr4[29] = -128;
        bArr4[30] = -125;
        bArr4[31] = 39;
        bArr4[32] = -62;
        bArr4[33] = -46;
        bArr4[34] = 24;
        bArr4[35] = -103;
        bArr4[36] = 31;
        bArr4[37] = -105;
        bArr4[38] = -95;
        bArr4[39] = 19;
        bArr4[40] = 30;
        bArr4[41] = -118;
        bArr4[42] = 37;
        bArr4[43] = -80;
        bArr4[44] = 18;
        bArr4[45] = 46;
        bArr4[46] = -47;
        bArr4[47] = 30;
        bArr4[48] = 112;
        bArr4[49] = -100;
        bArr4[50] = 83;
        bArr4[51] = 62;
        bArr4[52] = -120;
        bArr4[53] = -122;
        bArr4[54] = -95;
        bArr4[55] = 37;
        bArr4[56] = -102;
        bArr4[57] = -35;
        bArr4[58] = -3;
        bArr4[59] = -53;
        bArr4[60] = -77;
        bArr4[61] = -106;
        bArr4[62] = 96;
        bArr4[63] = 77;
        bArr4[64] = 36;
        bArr4[65] = -27;
        bArr4[66] = 5;
        bArr4[67] = -94;
        bArr4[68] = -48;
        bArr4[69] = -75;
        bArr4[70] = -35;
        bArr4[71] = 3;
        bArr4[72] = -124;
        bArr4[73] = -5;
        bArr4[74] = 0;
        bArr4[75] = 2;
        bArr4[76] = -89;
        bArr4[77] = -95;
        bArr4[78] = -21;
        bArr4[79] = 57;
        bArr4[80] = -68;
        bArr4[81] = -118;
        bArr4[82] = 17;
        bArr4[83] = 51;
        bArr4[84] = -100;
        bArr4[85] = 122;
        bArr4[86] = -108;
        bArr4[87] = 51;
        bArr4[88] = -87;
        bArr4[89] = 72;
        bArr4[90] = 51;
        bArr4[91] = 119;
        bArr4[92] = 97;
        bArr4[93] = -66;
        bArr4[94] = 115;
        bArr4[95] = -68;
        bArr4[96] = 73;
        bArr4[97] = 123;
        bArr4[98] = -114;
        bArr4[99] = 88;
        bArr4[100] = 115;
        bArr4[101] = 109;
        bArr4[102] = -92;
        bArr4[103] = 99;
        bArr4[104] = 101;
        bArr4[105] = 56;
        bArr4[106] = -83;
        bArr4[107] = 40;
        bArr4[108] = 45;
        bArr4[109] = 60;
        bArr4[110] = -45;
        bArr4[111] = -37;
        capk_E3.Modul = bArr4;
        capk_E3.Exponent = new byte[]{1, 0, 1};
        capk_E3.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E3.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result18 = EmvService.Emv_AddCapk(capk_E3);
        StringBuilder sb35 = new StringBuilder();
        EmvCAPK emvCAPK6 = capk_E2;
        sb35.append("Add CAPK capk_E3:");
        sb35.append(result18);
        sb35.append(" ID:");
        sb35.append(capk_E3.KeyID);
        Log(sb35.toString());
        if (result18 == 1) {
            StringBuilder sb36 = new StringBuilder();
            sb36.append("Create capk_E3 database:");
            sb36.append(false);
            Log(sb36.toString());
        }
        EmvCAPK capk_E4 = new EmvCAPK();
        int i8 = result18;
        capk_E4.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E4.KeyID = -28;
        capk_E4.HashInd = 1;
        capk_E4.ArithInd = 1;
        capk_E4.Modul = new byte[]{-53, -14, -28, 15, 8, 54, -55, -91, -29, -112, -93, 123, -29, -72, 9, -67, -11, -41, EmvService.TYPE_TRANSFER, -53, 29, -93, -116, -4, 5, -43, -8, -42, -73, 116, 91, 94, -102, 63, -90, -106, 30, 85, -1, 32, 65, EmvService.TYPE_SAVE, 8, 82, 94, 102, -71, 112, -7, 2, -9, -1, 67, 5, -35, -125, 44, -48, 118, 62, 58, -88, -72, 23, 63, -124, 119, 113, 0, -79, 4, 123, -47, -41, 68, 80, -109, 18, -96, -109, 46, -46, 95, -19, 82, -87, 89, 67, 7, 104, -52, -39, 2, -3, -116, -118, -39, 18, 62, 106, -35, -77, -13, 75, -110, -25, -110, 77, 114, -100, -74, 71, 53, 51, -82, 43, 43, 85, -65, 14, 68, -106, 79, -34, -88, 68, 1, 23};
        capk_E4.Exponent = new byte[]{3};
        capk_E4.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E4.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result19 = EmvService.Emv_AddCapk(capk_E4);
        StringBuilder sb37 = new StringBuilder();
        EmvCAPK emvCAPK7 = capk_E3;
        sb37.append("Add CAPK capk_E4:");
        sb37.append(result19);
        sb37.append(" ID:");
        sb37.append(capk_E4.KeyID);
        Log(sb37.toString());
        if (result19 == 1) {
            StringBuilder sb38 = new StringBuilder();
            sb38.append("Create capk_E4 database:");
            sb38.append(false);
            Log(sb38.toString());
        }
        EmvCAPK capk_E5 = new EmvCAPK();
        int i9 = result19;
        capk_E5.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E5.KeyID = -27;
        capk_E5.HashInd = 1;
        capk_E5.ArithInd = 1;
        capk_E5.Modul = new byte[]{-44, -3, -82, -108, -34, -37, -20, -58, -46, 13, 56, -80, 30, -111, -126, 109, -58, -107, 67, 56, 55, -103, 23, -78, -69, -118, 107, 54, -75, -45, -80, -59, -19, -90, 11, 51, 116, 72, -70, -1, -21, -52, 58, -67, -70, -122, -98, -115, -83, -20, 108, -121, 1, 16, -60, 47, 90, -85, -112, -95, -113, 79, -122, Byte.MAX_VALUE, 114, -29, 56, 111, -4, 126, 103, -25, -1, -108, -21, -96, 121, -27, EmvService.TYPE_BALANCE_INQUIRY, -77, -49, 50, -107, 23, -24, 28, 93, -39, -77, -36, 101, -37, 95, -112, 67, 25, 11, -32, -66, -119, 126, 95, -28, -118, -33, 93, 59, -6, 5, -123, -32, 118, -27, 84, -14, 110, -58, -104, 20, 121, Byte.MAX_VALUE, 21, 102, -97, 74, 37, 92, 19};
        capk_E5.Exponent = new byte[]{3};
        capk_E5.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E5.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result20 = EmvService.Emv_AddCapk(capk_E5);
        StringBuilder sb39 = new StringBuilder();
        EmvCAPK emvCAPK8 = capk_E4;
        sb39.append("Add CAPK capk_E5:");
        sb39.append(result20);
        sb39.append(" ID:");
        sb39.append(capk_E5.KeyID);
        Log(sb39.toString());
        if (result20 == 1) {
            StringBuilder sb40 = new StringBuilder();
            sb40.append("Create capk_E5 database:");
            sb40.append(false);
            Log(sb40.toString());
        }
        EmvCAPK capk_E6 = new EmvCAPK();
        int i10 = result20;
        capk_E6.RID = new byte[]{-96, 0, 0, -103, -103};
        capk_E6.KeyID = -26;
        capk_E6.HashInd = 1;
        capk_E6.ArithInd = 1;
        capk_E6.Modul = new byte[]{-21, -7, -6, -20, -61, -27, -61, 21, 112, -106, -108, 102, 71, 117, -45, -5, -38, 90, 80, 77, -119, 52, 77, -39, 32, -59, 86, -106, -24, -111, -39, -85, 98, 37, -104, -87, -42, -85, -113, -65, 53, -28, 89, -100, -85, 126, -78, 47, -107, 105, -110, -8, -85, 46, 101, 53, -34, -53, 107, 87, 111, -96, 103, 95, -105, -62, 61, -44, -61, 116, -90, 110, 106, -12, 25, -55, -46, 4, -48, -71, -7, 60, 8, -41, -119, -42, 56, 5, 102, 15, -69, 98, -99, -15, -76, -120, -49, -95, -41, -95, 62, -101, 114, -108, 55, -18, -81, -25, 24, -17, -88, 89, 52, -117, -96, -41, 104, 18, -87, -97, EmvService.TYPE_BALANCE_INQUIRY, -51, 54, 79, 42, 79, -44, 47};
        capk_E6.Exponent = new byte[]{1, 0, 1};
        capk_E6.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_E6.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result21 = EmvService.Emv_AddCapk(capk_E6);
        StringBuilder sb41 = new StringBuilder();
        EmvCAPK emvCAPK9 = capk_E5;
        sb41.append("Add CAPK capk_E6:");
        sb41.append(result21);
        sb41.append(" ID:");
        sb41.append(capk_E6.KeyID);
        Log(sb41.toString());
        if (result21 == 1) {
            StringBuilder sb42 = new StringBuilder();
            sb42.append("Create capk_E6 database:");
            sb42.append(false);
            Log(sb42.toString());
        }
        EmvCAPK capk_MasterCard_FE = new EmvCAPK();
        int i11 = result21;
        capk_MasterCard_FE.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FE.KeyID = -2;
        capk_MasterCard_FE.HashInd = 1;
        capk_MasterCard_FE.ArithInd = 1;
        capk_MasterCard_FE.Modul = new byte[]{-25, 99, 23, -106, 81, 117, -96, -117, -18, 81, 15, 88, -125, 14, -121, -78, 98, -57, 13, 82, -104, 3, 36, 95, -88, -72, -114, 12, 117, 53, 98, -34, 122, -21, 90, -98, 62, 108, 26, -104, -23, 77, -115, -73, -61, 20, 7, -38, -59, -48, 113, -32, 107, Byte.MIN_VALUE, -80, -98, 20, 111, 34, -37, -123, -15, -41, 45, 30, -95, -115, 34, 96, 0, 50, -58, -35, EmvService.TYPE_TRANSFER, -29, 113, 77, 90, -38, 125, -23, -41, -48, 30, -120, 57, 31, -119, EmvService.TYPE_BALANCE_INQUIRY, 86, -42, -12, -65, 19, -23, 6, 53, 89, -38, 7, -122, -34, -101, -34, 107, 28, -101, 11, -71, 104, -19, -34, 7, 20, 90, -65, -121, 123, -109, 22, -126, -52, -79, -5, Byte.MIN_VALUE, 7, 40, 114, 77, 4, -81, 36, 30, 40, 39, -32, -6, 31, 98, 89, 25, 20, -1, 37};
        capk_MasterCard_FE.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FE.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FE.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result22 = EmvService.Emv_AddCapk(capk_MasterCard_FE);
        StringBuilder sb43 = new StringBuilder();
        EmvCAPK emvCAPK10 = capk_E6;
        sb43.append("Add CAPK capk_MasterCard_FE:");
        sb43.append(result22);
        sb43.append(" ID:");
        sb43.append(capk_MasterCard_FE.KeyID);
        Log(sb43.toString());
        if (result22 == 1) {
            StringBuilder sb44 = new StringBuilder();
            sb44.append("Create capk_MasterCard_FE database:");
            sb44.append(false);
            Log(sb44.toString());
        }
        EmvCAPK capk_MasterCard_FC = new EmvCAPK();
        int i12 = result22;
        capk_MasterCard_FC.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FC.KeyID = -4;
        capk_MasterCard_FC.HashInd = 1;
        capk_MasterCard_FC.ArithInd = 1;
        capk_MasterCard_FC.Modul = new byte[]{-77, 41, 108, -111, -12, 121, 91, -39, 113, 18, 96, 105, 3, EmvService.TYPE_TRANSFER, 123, 110, -1, 58, -77, -110, 70, -23, 16, -107, -27, 29, 23, -122, 125, -92, -83, -27, -102, 72, -66, 47, -23, -75, 39, 16, 40, 61, 61, 50, 38, 14, 44, 125, 36, 114, 20, -59, 125, 70, -86, 100, 101, -28, 126, 10, 75, 63, -6, -83, -118, Byte.MAX_VALUE, 106, 25, 7, 85, -68, -49, -29, -13, -5, 57, -119, -87, -10, -79, -55, -31, -124, 91, -52, -54, -42, -14, 11, 29, -84, 96, 51, 96, 2, 52, -24, 29, -84, 65, 83, EmvService.TYPE_SAVE, 43, 15, 118, 12, 35, 9, -111, -110, -86, 108, 76, -112, -125, -66, -1, -39, -89, -99, 42, 39, -80, -113, -20, -56, -27, -44, 55, -42, -58, -123, 80, -88, 57, -79, 41, 65, 81, -38, -70, -99, -100, -78, -15, 96, -10, 15, 116, -110, -119, -11, 0, -56, -57, -13, 52, -67, 32, -21, -84, 74, -79, 9, -49, 60, 24, 47, 27, 120, 28, 124, 9, 122, 121, 3, 83, 7, 70, -60, 73, -71, -98, 57, -28, -37, 100, -109, -35, 42, 2, -29, 124, 98, -82, -117, -55, -89, 71, 14, -52, -49, -115, -64, 106, 24, -61, 60, -46, 75, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -43, 111, 37, -46, 117, 92, -24, 42, -92, -34, 77, 46, -82, -64, 119, 80, -96, 61, -73, 94, -67, 13, -114, -68, -97, 42, 29, -123, -96, -46, 82, -17, -12, 3, 41, -66, 5};
        capk_MasterCard_FC.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FC.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FC.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result23 = EmvService.Emv_AddCapk(capk_MasterCard_FC);
        StringBuilder sb45 = new StringBuilder();
        EmvCAPK emvCAPK11 = capk_MasterCard_FE;
        sb45.append("Add CAPK capk_MasterCard_FC:");
        sb45.append(result23);
        sb45.append(" ID:");
        sb45.append(capk_MasterCard_FC.KeyID);
        Log(sb45.toString());
        if (result23 == 1) {
            StringBuilder sb46 = new StringBuilder();
            sb46.append("Create capk_MasterCard_FC database:");
            sb46.append(false);
            Log(sb46.toString());
        }
        EmvCAPK capk_MasterCard_FD = new EmvCAPK();
        int i13 = result23;
        capk_MasterCard_FD.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FD.KeyID = -3;
        capk_MasterCard_FD.HashInd = 1;
        capk_MasterCard_FD.ArithInd = 1;
        capk_MasterCard_FD.Modul = new byte[]{-55, 72, 93, -66, -75, -28, 4, 21, -47, -77, -105, 82, 79, 71, 104, 95, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 108, -3, -60, -103, -44, -30, -25, -48, -53, -81, 34, 44, -6, -127, -124, -67, 17, 29, -82, -19, -55, -52, 110, -56, 84, 12, 63, 114, 113, -22, -103, -112, 17, -100, -59, -60, EmvService.TYPE_BALANCE_INQUIRY, Byte.MIN_VALUE, 80, 29, -97, 69, 37, 45, 104, 53, 5, 63, -82, 53, 105, 106, -24, -51, 103, -93, 37, 100, 116, 73, -49, 94, 89, 77, -88, -10, 39, 32, -97, Byte.MAX_VALUE, 3, -82, -115, 109, -4, 13, -77, -25, -98, 40, -28, 21, -33, 41, -91, -75, 125, 104, 20, -123, 108, -61, 10, -106, -38, 91, -120, -112, 54, 62, 80, Byte.MAX_VALUE, -53, 46, 40, 61, -95, -21, -75, -15, -114, -114, 36, 16, 43, 125, 1, -110, -69, -114, 53, -92, -9, -51, 5, -92, 53};
        capk_MasterCard_FD.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FD.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FD.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result24 = EmvService.Emv_AddCapk(capk_MasterCard_FD);
        StringBuilder sb47 = new StringBuilder();
        EmvCAPK emvCAPK12 = capk_MasterCard_FC;
        sb47.append("Add CAPK capk_MasterCard_FD:");
        sb47.append(result24);
        sb47.append(" ID:");
        sb47.append(capk_MasterCard_FD.KeyID);
        Log(sb47.toString());
        if (result24 == 1) {
            StringBuilder sb48 = new StringBuilder();
            sb48.append("Create capk_MasterCard_FD database:");
            sb48.append(false);
            Log(sb48.toString());
        }
        EmvCAPK capk_MasterCard_FB = new EmvCAPK();
        int i14 = result24;
        capk_MasterCard_FB.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FB.KeyID = -5;
        capk_MasterCard_FB.HashInd = 1;
        capk_MasterCard_FB.ArithInd = 1;
        capk_MasterCard_FB.Modul = new byte[]{-101, 23, 6, 3, -92, -119, -57, 84, 108, 69, -38, 87, -72, -1, -47, -37, 32, 97, 36, 15, 14, -116, 109, 31, -102, -67, -58, -78, 101, -86, -119, 17, -111, 92, 26, 78, -85, -40, -48, -19, 71, 85, -47, -71, 2, -70, 6, -2, 90, 100, 91, 120, 108, -46, 65, 41, 85, 23, -44, 78, -15, -89, -62, 93, 117, -81, -32, -21, 40, 6, 110, 77, 105, -2, -25, -85, -81, -35, 94, -21, 35, 15, 20, -28, 2, -55, -124, 8, 37, -6, 119, -22, -47, 43, 95, 28, 84, -108, 112, 29, -31, -119, Byte.MAX_VALUE, 101, -2, 107, -15, 6, -44, 117, 69, -21, -9, 12, -25, -63, 88, 6, -116, 97, -16, 119, 53, 52, -37, 116, 42, -72, 60, 40, 3, -116, 20, -108, -15, 89, 5, -48, -83, 23, -49, 27, -45, -115};
        capk_MasterCard_FB.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FB.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FB.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result25 = EmvService.Emv_AddCapk(capk_MasterCard_FB);
        StringBuilder sb49 = new StringBuilder();
        EmvCAPK emvCAPK13 = capk_MasterCard_FD;
        sb49.append("Add CAPK capk_MasterCard_FB:");
        sb49.append(result25);
        sb49.append(" ID:");
        sb49.append(capk_MasterCard_FB.KeyID);
        Log(sb49.toString());
        if (result25 == 1) {
            StringBuilder sb50 = new StringBuilder();
            sb50.append("Create capk_MasterCard_FB database:");
            sb50.append(false);
            Log(sb50.toString());
        }
        EmvCAPK capk_MasterCard_FA = new EmvCAPK();
        int i15 = result25;
        capk_MasterCard_FA.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FA.KeyID = -6;
        capk_MasterCard_FA.HashInd = 1;
        capk_MasterCard_FA.ArithInd = 1;
        capk_MasterCard_FA.Modul = new byte[]{-92, 32, 62, 12, 123, -21, 39, 9, 123, 99, -63, 3, -63, -97, -36, -38, 103, 26, -22, Byte.MAX_VALUE, -127, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 101, 117, 111, 59, -101, -127, -127, 12, -67, 75, -60, -34, -59, 72, -5, -15, -13, -51, -82, 81, -8, 71, 35, 92, -65, 44, -117, -83, -40, -84, -89, -55, 59, -22, 61, 68, -24, 14, -42, -89, -73, 14, 41, 98, 38, 25, -37, 66, 10, -52, -50, 7, -31, -35, 78, 108, 53, 79, 53, -97, -67, -55, -59, -73, 8, 19, -110, 111, 119, -40, 39, -27, 43, 25, -38, -16, -101, -6, -27, 39, 68, 56, -69, -113, 97, -47, 119, 83, -55, -20, 10, -114, -6, 59, 126, 70, -16, 38, -110, 22, 13, 38, 83, -51, -68, -57, 27, 125, 72, -67, 55, -106, -125, 22, -21, 68, 79, 101, 4, -71, 66, 27, 125, -45, 3, 90, 44, 17, 125, -117, 31, 118, -88, -105, 84, EmvService.TYPE_TRANSFER, -38, -107, 99, 97, -127, 2, 57, 123, -120, 28, -17, -118, -38, 118, -119, -19, -6, -50, 50, 72, 42, 45, -1, -19, 101, 110, Byte.MAX_VALUE, -107, 29, -72, 65, -38, 120, 54, -116, 98, -109, -65, -63, 5, 58, -122, -88, 69, -65, -90, 87, -114, 75, 105, -15, 0, -76, 43, 85, -113, -34, 26, -20, -20, 109, 37, 7, 65, -68, 120, 58, -88, -90, -118, 66, 97, -25, -69, -110, 70, -79, 5, -121, -92, -104, -42, -115, -39, 85, -50, -117, 43, 36, 51};
        capk_MasterCard_FA.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FA.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FA.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result26 = EmvService.Emv_AddCapk(capk_MasterCard_FA);
        StringBuilder sb51 = new StringBuilder();
        EmvCAPK emvCAPK14 = capk_MasterCard_FB;
        sb51.append("Add CAPK capk_MasterCard_FA:");
        sb51.append(result26);
        sb51.append(" ID:");
        sb51.append(capk_MasterCard_FA.KeyID);
        Log(sb51.toString());
        if (result26 == 1) {
            StringBuilder sb52 = new StringBuilder();
            sb52.append("Create capk_MasterCard_FA database:");
            sb52.append(false);
            Log(sb52.toString());
        }
        EmvCAPK capk_MasterCard_FF = new EmvCAPK();
        int i16 = result26;
        capk_MasterCard_FF.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_FF.KeyID = -1;
        capk_MasterCard_FF.HashInd = 1;
        capk_MasterCard_FF.ArithInd = 1;
        capk_MasterCard_FF.Modul = new byte[]{-10, -99, -69, 94, 21, -104, 62, -82, 60, -49, EmvService.TYPE_BALANCE_INQUIRY, -49, 78, 71, 9, -116, 47, -63, 111, -105, -96, -57, 16, -8, 71, 119, -17, -87, -106, 34, -40, 101, 2, -79, 56, 114, -118, -79, 46, 52, -127, -88, 77, 32, -32, 20, -83, 45, 99, 77, 40, 54, -14, Byte.MAX_VALUE, 41, 73, 36, -72, -107, -88, Byte.MAX_VALUE, -111, -8, 27, -127, 105, -44, -33, -38, -40, -41, -53, -41, 65, Byte.MIN_VALUE, 76, -42, 27, 70, 124, 122, -102, -49, -20, -21, 113, 24, -116, -86, 115, -87, 7, 84, 118, -103, -44, 92, -100, 125, 32, -104, -84, 41, 102, 38, 100, 23, -10, 101, -92, 107, -35, 1, 44, 9, 125, -67, 51, -47, -47, 26, -1, 110, -56, -87, -64, -83, -127, 74, 101, -76, -126, 98, -54, 1, 22, 54, 7, -102, 50, -116, 26, -82, -73};
        capk_MasterCard_FF.Exponent = new byte[]{1, 0, 1};
        capk_MasterCard_FF.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_FF.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result27 = EmvService.Emv_AddCapk(capk_MasterCard_FF);
        StringBuilder sb53 = new StringBuilder();
        EmvCAPK emvCAPK15 = capk_MasterCard_FA;
        sb53.append("Add CAPK capk_MasterCard_FF:");
        sb53.append(result27);
        sb53.append(" ID:");
        sb53.append(capk_MasterCard_FF.KeyID);
        Log(sb53.toString());
        if (result27 == 1) {
            StringBuilder sb54 = new StringBuilder();
            sb54.append("Create capk_MasterCard_FF database:");
            sb54.append(false);
            Log(sb54.toString());
        }
        EmvCAPK capk_MasterCard_05 = new EmvCAPK();
        int i17 = result27;
        capk_MasterCard_05.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_MasterCard_05.KeyID = 5;
        capk_MasterCard_05.HashInd = 1;
        capk_MasterCard_05.ArithInd = 1;
        capk_MasterCard_05.Modul = new byte[]{-72, 4, -118, -68, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -55, 13, -105, 99, 54, 84, 62, 63, -41, 9, 28, -113, -28, Byte.MIN_VALUE, 13, -8, 32, -19, 85, -25, -23, 72, 19, -19, 0, 85, 91, 87, 63, -20, -93, -40, 74, -10, 19, 26, 101, 29, 102, -49, -12, 40, 79, -79, 59, 99, 94, -35, 14, -28, 1, 118, -40, -65, 4, -73, -3, 28, 123, -84, -7, -84, 115, 39, -33, -86, -118, -89, 45, 16, -37, 59, -114, 112, -78, -35, -40, 17, -53, 65, -106, 82, 94, -93, -122, -84, -61, 60, 13, -99, 69, 117, -111, 100, 105, -60, -28, -11, 62, -114, 28, -111, 44, -58, 24, -53, 34, -35, -25, -61, 86, -114, -112, 2, 46, 107, -70, 119, 2, 2, -28, 82, 42, 45, -42, 35, -47, Byte.MIN_VALUE, -30, 21, -67, 29, 21, 7, -2, 61, -55, 12, -93, 16, -46, 123, 62, -4, -51, -113, -125, -34, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 82, -54, -47, -28, -119, 56, -58, -115, 9, 90, -84, -111, -75, -13, 126, 40, -69, 73, -20, 126, -43, -105};
        capk_MasterCard_05.Exponent = new byte[]{0, 0, 3};
        capk_MasterCard_05.ExpDate = new byte[]{EmvService.TYPE_SAVE, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_MasterCard_05.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result28 = EmvService.Emv_AddCapk(capk_MasterCard_05);
        StringBuilder sb55 = new StringBuilder();
        EmvCAPK emvCAPK16 = capk_MasterCard_FF;
        sb55.append("Add CAPK capk_MasterCard_FF:");
        sb55.append(result28);
        sb55.append(" ID:");
        sb55.append(capk_MasterCard_05.KeyID);
        Log(sb55.toString());
        if (result28 == 1) {
            StringBuilder sb56 = new StringBuilder();
            sb56.append("Create capk_MasterCard_FF database:");
            sb56.append(false);
            Log(sb56.toString());
        }
        EmvCAPK capk_JCB_02 = new EmvCAPK();
        int i18 = result28;
        capk_JCB_02.RID = new byte[]{-96, 0, 0, 0, 101};
        capk_JCB_02.KeyID = 2;
        capk_JCB_02.HashInd = 1;
        capk_JCB_02.ArithInd = 1;
        capk_JCB_02.Modul = new byte[]{-69, Byte.MAX_VALUE, 81, -104, 63, -40, 112, Byte.MAX_VALUE, -42, 34, 124, 35, -34, -11, -43, 55, 122, 90, 115, 124, -17, 60, 82, 82, -27, 120, -17, -31, 54, -33, -121, -75, 4, 115, -7, 52, 31, 22, EmvService.TYPE_TRANSFER, -56, -46, 88, 3, 78, 20, -63, 105, -109, -4, -26, -58, -72, -61, -50, -21, 101, -4, -113, -68, -40, -21, 119, -77, -80, 90, -57, -60, -48, -98, 15, -95, -70, 46, -2, -121, -45, 24, 77, -74, 113, -118, -28, 26, 124, -83, -119, -72, -36, -32, -2, Byte.MIN_VALUE, -50, -75, 35, -43, -42, 71, -7, -37, 88, -93, 29, 46, 113, -84, 103, 126, 103, -6, 110, 117, -126, 7, 54, -55, -119, 55, 97, -18, 74, -51, 17, -13, 29, -67, -61, 73, -17};
        capk_JCB_02.Exponent = new byte[]{1, 0, 1};
        capk_JCB_02.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_JCB_02.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result29 = EmvService.Emv_AddCapk(capk_JCB_02);
        StringBuilder sb57 = new StringBuilder();
        EmvCAPK emvCAPK17 = capk_MasterCard_05;
        sb57.append("Add CAPK capk_JCB_02:");
        sb57.append(result29);
        sb57.append(" ID:");
        sb57.append(capk_JCB_02.KeyID);
        Log(sb57.toString());
        if (result29 == 1) {
            StringBuilder sb58 = new StringBuilder();
            sb58.append("Create capk_JCB_02 database:");
            sb58.append(false);
            Log(sb58.toString());
        }
        EmvCAPK capk_JCB_03 = new EmvCAPK();
        int i19 = result29;
        capk_JCB_03.RID = new byte[]{-96, 0, 0, 0, 101};
        capk_JCB_03.KeyID = 3;
        capk_JCB_03.HashInd = 1;
        capk_JCB_03.ArithInd = 1;
        capk_JCB_03.Modul = new byte[]{-55, -26, -63, -13, -58, -108, -102, -118, 66, -87, 31, -115, 2, 36, 19, 43, 40, 101, -26, -39, 83, -91, -75, -91, 76, -1, -80, 65, 36, 57, -43, 74, -21, -89, -98, -101, 57, -102, 108, 16, 70, -124, -33, 63, -73, 39, -57, -11, 89, -124, -37, 122, 69, 14, 106, -87, 23, -31, 16, -89, -14, 52, 58, 0, 36, -46, 120, 93, -98, -66, 9, -10, 1, -43, -110, 54, 47, -37, 35, 119, 0, -75, 103, -70, 20, -69, -30, -90, -45, -46, 60, -15, 39, 11, 61, -40, 34, -75, 73, 101, 73, -65, -120, 73, 72, -11, 90, 13, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -125, 72, -60, -73, 35, -70, -5, 106, Byte.MAX_VALUE, 57, 117, -84, 57, 124, -83, 60, 93, 15, -62, -47, 120, 113, 111, 94, -114, 121, -25, 91, -21, 28, -124, -6, 32, 47, Byte.MIN_VALUE, -26, Byte.MIN_VALUE, 105, -87, -124, -32, 8, 112, 107, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -62, 18, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 84, 86, 32, 21, EmvService.TYPE_TRANSFER, 120, 121, 37, -24, 106, -117, 40, -79, 41, -95, 26, -14, 4, -77, -121, -53, 110, -28, 61, -75, 61, 21, -92, 110, 19, -112, 27, -21, -43, -50, -49, 72, 84, 37, 29, -98, -104, 117, -79, 110, -126, -83, 28, 89, 56, -87, 114, -124, 44, -113, 26, 66, -21, -75, -82, 83, 54, -80, 79, -13, -38, -117, -115, -5, -26, 6, -4, -88, -71, 8, 78, -32, 91, -10, 121, 80, -70, -119, -119, 124, -48, -119, -7, 36, -37, -51};
        capk_JCB_03.Exponent = new byte[]{3};
        capk_JCB_03.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_JCB_03.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result30 = EmvService.Emv_AddCapk(capk_JCB_03);
        StringBuilder sb59 = new StringBuilder();
        EmvCAPK emvCAPK18 = capk_JCB_02;
        sb59.append("Add CAPK capk_JCB_03:");
        sb59.append(result30);
        sb59.append(" ID:");
        sb59.append(capk_JCB_03.KeyID);
        Log(sb59.toString());
        if (result30 == 1) {
            StringBuilder sb60 = new StringBuilder();
            sb60.append("Create capk_JCB_03 database:");
            sb60.append(false);
            Log(sb60.toString());
        }
        EmvCAPK capk_VISA_50 = new EmvCAPK();
        int i20 = result30;
        capk_VISA_50.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_50.KeyID = 80;
        capk_VISA_50.HashInd = 1;
        capk_VISA_50.ArithInd = 1;
        capk_VISA_50.Modul = new byte[]{-47, 17, -105, 89, 0, 87, -72, 65, -106, -62, -12, -47, 26, -113, 60, 5, EmvService.TYPE_TRANSFER, -113, 66, 42, 53, -41, 2, -7, 1, 6, -22, 91, 1, -101, -78, -118, -26, 7, -86, -100, -34, -68, -48, -40, 26, 56, -44, -116, 126, -69, 0, 98, -46, -121, 54, -98, -64, -60, EmvService.TYPE_SAVE, 36, 36, 106, -61, 13, Byte.MIN_VALUE, -51, 96, 42, -73, 35, -115, 81, 8, 77, -19, 70, -104, 22, 44, 89, -46, 94, -84, 30, 102, 37, 91, 77, -78, 53, 37, 38, -17, 9, -126, -61, -72, -83, 61, 28, -50, -123, -80, 29, -75, 120, -114, 117, -32, -97, 68, -66, 115, 97, 54, 109, -17, -99, 30, 19, 23, -80, 94, 93, 15, -11, 41, 15, -120, -96, -37, 71};
        capk_VISA_50.Exponent = new byte[]{1, 0, 1};
        capk_VISA_50.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_50.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result31 = EmvService.Emv_AddCapk(capk_VISA_50);
        StringBuilder sb61 = new StringBuilder();
        EmvCAPK emvCAPK19 = capk_JCB_03;
        sb61.append("Add CAPK capk_VISA_50:");
        sb61.append(result31);
        sb61.append(" ID:");
        sb61.append(capk_VISA_50.KeyID);
        Log(sb61.toString());
        if (result31 == 1) {
            StringBuilder sb62 = new StringBuilder();
            sb62.append("Create capk_VISA_50 database:");
            sb62.append(false);
            Log(sb62.toString());
        }
        EmvCAPK capk_VISA_51 = new EmvCAPK();
        int i21 = result31;
        capk_VISA_51.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_51.KeyID = 81;
        capk_VISA_51.HashInd = 1;
        capk_VISA_51.ArithInd = 1;
        capk_VISA_51.Modul = new byte[]{-37, 95, -94, -99, 31, -38, -116, 22, 52, -80, 77, -52, -1, 20, -118, -66, -26, 60, 119, 32, 53, -57, -104, 81, -45, 81, EmvService.TYPE_SAVE, 7, 88, 110, 2, -87, 23, -9, -57, -24, -123, -25, -60, -89, -43, 41, 113, 10, 20, 83, 52, -50, 103, -36, 65, 44, -79, 89, 123, 119, -86, 37, 67, -71, -115, 25, -49, 44, -72, 12, 82, 43, -37, -22, 15, 27, 17, 63, -94, -56, 98, 22, -56, -58, 16, -94, -43, -113, 41, -49, 51, 85, -50, -79, -67, 62, -12, 16, -47, -19, -47, -9, -82, 15, 22, -119, 121, 121, -34, 40, -58, -17, 41, 62, 10, 25, 40, 43, -47, -41, -109, -15, 51, 21, 35, -4, 113, -94, 40, Byte.MIN_VALUE, 4, 104, -64, 26, 54, 83, -47, 76, 107, 72, 81, -91, -64, 41, 71, -114, 117, Byte.MAX_VALUE};
        capk_VISA_51.Exponent = new byte[]{3};
        capk_VISA_51.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_51.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result32 = EmvService.Emv_AddCapk(capk_VISA_51);
        StringBuilder sb63 = new StringBuilder();
        EmvCAPK emvCAPK20 = capk_VISA_50;
        sb63.append("Add CAPK capk_VISA_51:");
        sb63.append(result32);
        sb63.append(" ID:");
        sb63.append(capk_VISA_51.KeyID);
        Log(sb63.toString());
        if (result32 == 1) {
            StringBuilder sb64 = new StringBuilder();
            sb64.append("Create capk_VISA_51 database:");
            sb64.append(false);
            Log(sb64.toString());
        }
        EmvCAPK capk_VISA_53 = new EmvCAPK();
        int i22 = result32;
        capk_VISA_53.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_53.KeyID = 83;
        capk_VISA_53.HashInd = 1;
        capk_VISA_53.ArithInd = 1;
        capk_VISA_53.Modul = new byte[]{-68, -40, 55, EmvService.TYPE_SAVE, -66, 82, -52, -52, 75, 100, 87, 50, 31, 34, -89, -36, 118, -97, 84, -21, Byte.MIN_VALUE, 37, -111, 59, -24, 4, -39, -22, -69, -6, 25, -77, -41, -59, -45, -54, 101, -115, 118, -116, -81, 87, 6, 126, -20, -125, -57, -26, -23, -8, 29, 5, -122, 112, 62, -39, -35, -38, -35, 32, 103, 93, 99, 66, 73, Byte.MIN_VALUE, -79, 14, -77, 100, -24, 30, -77, 125, -76, 14, -47, 0, 52, 76, -110, -120, -122, -1, 76, -52, 55, 32, 62, -26, 16, 109, 91, 89, -47, -84, 16, 46, 44, -46, -41, -84, 23, -12, -39, 108, 57, -114, 95, -39, -109, -20, -76, -1, -33, 121, -79, 117, 71, -1, -97, -94, -86, -114, -17, -42, -53, -38, 18, 76, -69, 23, -96, -8, 82, -127, 70, 56, 113, 53, -30, 38, -80, 5, -92, 116, -71, 6, 47, -14, 100, -46, -1, -114, -6, 54, -127, 74, -94, -107, 0, 101, -79, -80, 76, 10, 26, -23, -78, -10, -99, 74, 74, -87, 121, -42, -50, -107, -2, -23, 72, 94, -48, -96, 58, -18, -101, -39, 83, -24, 28, -3, 30, -10, -24, 20, -33, -45, -62, -50, 55, -82, -6, 56, -63, -7, -121, 115, 113, -23, 29, 106, 94, -75, -97, -34, -33, 117, -45, 50, 95, -93, -54, 102, -51, -5, -96, -27, 113, 70, -52, 120, -104, 24, -1, 6, -66, 95, -52, 80, -85, -45, 98, -82, 75, Byte.MIN_VALUE, -103, 109};
        capk_VISA_53.Exponent = new byte[]{3};
        capk_VISA_53.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_53.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result33 = EmvService.Emv_AddCapk(capk_VISA_53);
        StringBuilder sb65 = new StringBuilder();
        EmvCAPK emvCAPK21 = capk_VISA_51;
        sb65.append("Add CAPK capk_VISA_53:");
        sb65.append(result33);
        sb65.append(" ID:");
        sb65.append(capk_VISA_53.KeyID);
        Log(sb65.toString());
        if (result33 == 1) {
            StringBuilder sb66 = new StringBuilder();
            sb66.append("Create capk_VISA_53 database:");
            sb66.append(false);
            Log(sb66.toString());
        }
        EmvCAPK capk_VISA_96 = new EmvCAPK();
        int i23 = result33;
        capk_VISA_96.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_96.KeyID = -106;
        capk_VISA_96.HashInd = 1;
        capk_VISA_96.ArithInd = 1;
        capk_VISA_96.Modul = new byte[]{-73, 69, -122, -47, -102, 32, 123, -26, 98, 124, 91, 10, -81, -68, 68, -94, -20, -11, -94, -108, 45, 58, 38, -50, 25, -60, -1, -82, -18, -110, 5, EmvService.TYPE_SAVE, -122, -119, 34, -24, -109, -25, -125, -126, 37, -93, -108, 122, 38, 20, 121, 111, -78, -64, 98, -116, -24, -63, 30, 56, 37, -91, 109, 59, 27, -70, -17, 120, 58, 92, 106, -127, -13, 111, -122, 37, 57, 81, 38, -6, -104, 60, 82, 22, -45, 22, 109, 72, -84, -34, -118, 67, 18, 18, -1, 118, 58, Byte.MAX_VALUE, 121, -39, -19, -73, -2, -41, 107, 72, 93, -28, 91, -21, -126, -102, 61, 71, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -124, -118, 54, 109, 51, 36, -61, 2, 112, 50, -1, -115, 22, -95, -28, 77, -115};
        capk_VISA_96.Exponent = new byte[]{3};
        capk_VISA_96.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_96.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result34 = EmvService.Emv_AddCapk(capk_VISA_96);
        StringBuilder sb67 = new StringBuilder();
        EmvCAPK emvCAPK22 = capk_VISA_53;
        sb67.append("Add CAPK capk_VISA_96:");
        sb67.append(result34);
        sb67.append(" ID:");
        sb67.append(capk_VISA_96.KeyID);
        Log(sb67.toString());
        if (result34 == 1) {
            StringBuilder sb68 = new StringBuilder();
            sb68.append("Create capk_VISA_96 database:");
            sb68.append(false);
            Log(sb68.toString());
        }
        EmvCAPK capk_VISA_57 = new EmvCAPK();
        int i24 = result34;
        capk_VISA_57.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_57.KeyID = 87;
        capk_VISA_57.HashInd = 1;
        capk_VISA_57.ArithInd = 1;
        capk_VISA_57.Modul = new byte[]{-108, 43, Byte.MAX_VALUE, 43, -91, -22, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 115, 18, -74, 61, -9, 124, 82, 67, 97, -118, -52, 32, 2, -67, 126, -53, 116, -40, EmvService.TYPE_SAVE, -2, 123, -36, 120, -65, 40, -12, -97, 116, 25, 10, -39, -78, 59, -105, 19, -79, EmvService.TYPE_TRANSFER, -1, -20, 31, -76, 41, -39, 63, 86, -67, -57, -83, -28, -84, 7, 93, 117, 83, 44, 30, 89, 11, EmvService.TYPE_SAVE, -121, 76, 121, 82, -14, -101, -116, 15, 12, 28, -29, -82, -19, -56, -38, 37, 52, EmvService.TYPE_BALANCE_INQUIRY, 35, -25, 29, -49, -122, -58, -103, -114, 21, -9, 86, -29};
        capk_VISA_57.Exponent = new byte[]{1, 0, 1};
        capk_VISA_57.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_57.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result35 = EmvService.Emv_AddCapk(capk_VISA_57);
        StringBuilder sb69 = new StringBuilder();
        EmvCAPK emvCAPK23 = capk_VISA_96;
        sb69.append("Add CAPK capk_VISA_57:");
        sb69.append(result35);
        sb69.append(" ID:");
        sb69.append(capk_VISA_57.KeyID);
        Log(sb69.toString());
        if (result35 == 1) {
            StringBuilder sb70 = new StringBuilder();
            sb70.append("Create capk_VISA_57 database:");
            sb70.append(false);
            Log(sb70.toString());
        }
        EmvCAPK capk_VISA_58 = new EmvCAPK();
        int i25 = result35;
        capk_VISA_58.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_58.KeyID = 88;
        capk_VISA_58.HashInd = 1;
        capk_VISA_58.ArithInd = 1;
        capk_VISA_58.Modul = new byte[]{-103, 85, 44, 74, 30, -51, 104, -96, 38, 1, 87, -4, 65, 81, -75, -103, 40, 55, 68, 93, 63, -59, 115, 101, -54, 86, -110, -56, 123, -29, 88, -51, -51, -14, -55, 47, -74, -125, 117, 34, -124, 42, 72, -21, 17, -51, -1, -30, -3, -111, 119, 12, 114, EmvService.TYPE_SAVE, -28, -81, 98, 7, -62, -34, EmvService.TYPE_TRANSFER, 4, -57, -34, -31, -74, 39, 109, -58, 45, 82, -88, 125, 44, -48, 31, -65, 45, -60, 6, 93, -75, 40, 36, -46, -94, 22, 122, 6, -47, -98, 106, 15, 120, 16, 113, -51, -78, -35, EmvService.TYPE_BALANCE_INQUIRY, 76, -71, 68, 65, -40, -36, 14, -109, 99, 23, -73, 123, -16, 111, 81, 119, -10, -59, -85, -93, -93, -68, 106, -93, 2, 9, -55, 114, 96, -73, -95, -83, 58, 25, 44, -101, -116, -47, -47, 83, 87, 10, -4, -56, 124, 60, -42, -127, -47, 62, -103, Byte.MAX_VALUE, -29, 59, 57, 99, -96, -95, -57, -105, 114, -84, -7, -111, 3, 62, 27, -125, -105, -83, 3, 65, 80, 14, 72, -94, 71, 112, -68, 76, -66, 25, -46, -52, -12, 25, 80, 79, -37, -16, 56, -101, -62, -14, -3, -51, 77, 68, -26, 31};
        capk_VISA_58.Exponent = new byte[]{1, 0, 1};
        capk_VISA_58.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_58.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result36 = EmvService.Emv_AddCapk(capk_VISA_58);
        StringBuilder sb71 = new StringBuilder();
        EmvCAPK emvCAPK24 = capk_VISA_57;
        sb71.append("Add CAPK capk_VISA_58:");
        sb71.append(result36);
        sb71.append(" ID:");
        sb71.append(capk_VISA_58.KeyID);
        Log(sb71.toString());
        if (result36 == 1) {
            StringBuilder sb72 = new StringBuilder();
            sb72.append("Create capk_VISA_58 database:");
            sb72.append(false);
            Log(sb72.toString());
        }
        EmvCAPK capk_VISA_54 = new EmvCAPK();
        int i26 = result36;
        capk_VISA_54.RID = new byte[]{-96, 0, 0, 0, 3};
        capk_VISA_54.KeyID = 84;
        capk_VISA_54.HashInd = 1;
        capk_VISA_54.ArithInd = 1;
        capk_VISA_54.Modul = new byte[]{-58, -35, -64, -73, 100, 95, Byte.MAX_VALUE, 22, 40, 106, -73, -28, 17, 102, 85, -11, 109, -48, -55, 68, 118, 96, EmvService.TYPE_TRANSFER, -36, 104, 102, 77, -39, 115, -67, 59, -3, 76, 82, 91, -53, -71, 82, 114, -74, -77, -83, -101, -88, -122, 3, 3, -83, 8, -39, -24, -52, 52, 74, EmvService.TYPE_TRANSFER, 112, -12, -49, -71, -18, -81, 41, -56, -93, 70, 8, 80, -62, 100, -51, -93, -101, -66, 58, 126, 125, 8, -90, -100, EmvService.TYPE_BALANCE_INQUIRY, -75, -56, -35, -97, -108, -35, -68, -110, 101, 117, -116, 14, 115, -103, -83, -49, 67, 98, -54, -18, 69, -115, 65, 76, 82, -76, -104, 39, 72, -127, -79, -106, -38, -52, -89, 39, 63, 104, Byte.MAX_VALUE, 42, 101, -6, -21, Byte.MIN_VALUE, -99, 75, 42, -63, -45, -47, -17, -76, -10, 73, 3, 34, EmvService.TYPE_BALANCE_INQUIRY, -117, -46, -106, -47, 83, -77, 7, -93, 40, 58, -76, -27, -66, 110, -67, -111, 3, 89, -88, 86, 94, -71, -60, 54, 13, 36, -70, -84, -93, -37, -2, 57, 63, 61, 108, -125, 13, 96, 60, 111, -63, -24, 52, 9, -33, -51, Byte.MIN_VALUE, -45, -93, 59, -94, 67, -127, 59, -69, 76, -22, -7, -53, -85, 107, 116, -80, 1, 22, -9, 42, -78, 120, -88, -118, 1, 29, 112, 7, 30, 6, -54, -79, EmvService.TYPE_TRANSFER, 100, 100, 56, -39, -122, -44, -126, -127, 98, 75, -123, -77, -78, -21, -71, -90, -85, 59, -14, 23, -113, -52, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 17, -25, -54, -14, 72, -105, -82, 125};
        capk_VISA_54.Exponent = new byte[]{1, 0, 1};
        capk_VISA_54.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_VISA_54.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result37 = EmvService.Emv_AddCapk(capk_VISA_54);
        StringBuilder sb73 = new StringBuilder();
        EmvCAPK emvCAPK25 = capk_VISA_58;
        sb73.append("Add CAPK capk_VISA_54:");
        sb73.append(result37);
        sb73.append(" ID:");
        sb73.append(capk_VISA_54.KeyID);
        Log(sb73.toString());
        if (result37 == 1) {
            StringBuilder sb74 = new StringBuilder();
            sb74.append("Create capk_VISA_54 database:");
            sb74.append(false);
            Log(sb74.toString());
        }
        EmvCAPK capk_AMEX_60 = new EmvCAPK();
        int i27 = result37;
        capk_AMEX_60.RID = new byte[]{-96, 0, 0, 0, 37};
        capk_AMEX_60.KeyID = 96;
        capk_AMEX_60.HashInd = 1;
        capk_AMEX_60.ArithInd = 1;
        capk_AMEX_60.Modul = new byte[]{-88, -18, 116, -19, -17, 60, 13, -54, 81, 2, -1, -101, 87, 7, -105, 95, -10, 123, 96, -42, 75, 94, 115, 34, -44, -115, -23, -45, -69, 97, 83, -10, 53, 18, -96, -111, -74, 6, -35, -113, -43, -10, -95, 69, -120, 50, 78, -8, -126, 120, 68, -57, -1, -64, -70, -78, 51, 74, -27, 32, 119, 112, 7, -117, 105, -51, -61, -14, -58, 102, -49, 105, -30, -114, 22, -31, -127, 103, 20, -60, -33, EmvService.TYPE_BALANCE_INQUIRY, 59, -17, 83, -100, -64, 29, -87, -35, 45, 111, 71, -34, 79, 36, 124, 80, 11, 86, 28, 9, -111, 102, -83, 79, -63, 109, -15, 45, -5, 104, 74, -60, -115, 53, -51, -46, -60, 122, 19, -88, 106, 90, 22, 35, 6, -10, 78, 51, -80, -110, -85, 116, -19, -89, 26, EmvService.TYPE_TRANSFER, -111, -39, 110, 61, -86, 71};
        capk_AMEX_60.Exponent = new byte[]{1, 0, 1};
        capk_AMEX_60.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_AMEX_60.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result38 = EmvService.Emv_AddCapk(capk_AMEX_60);
        StringBuilder sb75 = new StringBuilder();
        EmvCAPK emvCAPK26 = capk_VISA_54;
        sb75.append("Add CAPK capk_AMEX_60:");
        sb75.append(result38);
        sb75.append(" ID:");
        sb75.append(capk_AMEX_60.KeyID);
        Log(sb75.toString());
        if (result38 == 1) {
            StringBuilder sb76 = new StringBuilder();
            sb76.append("Create capk_AMEX_60 database:");
            sb76.append(false);
            Log(sb76.toString());
        }
        EmvCAPK capk_AMEX_61 = new EmvCAPK();
        int i28 = result38;
        capk_AMEX_61.RID = new byte[]{-96, 0, 0, 0, 37};
        capk_AMEX_61.KeyID = 97;
        capk_AMEX_61.HashInd = 1;
        capk_AMEX_61.ArithInd = 1;
        capk_AMEX_61.Modul = new byte[]{-122, -57, 37, 70, 101, -31, 124, -26, -109, 77, -9, -48, -126, 86, -97, 32, -115, 28, -63, -83, -114, -97, -78, -2, 35, -29, -41, 70, 123, -27, 11, 79, -121, 79, -112, 106, -33, 34, Byte.MIN_VALUE, -20, -99, 32, 79, 109, 16, -64, 55, -94, 60, -27, -3, -126, -125, -55, -19, 71, -47, -58, 105, -85, -35, 124, 28, -77, 86, -57, 11, -51, -60, 78, 92, -118, -30, EmvService.TYPE_BALANCE_INQUIRY, 85, 95, 123, 120, 106, -55, -61, 21, 91, -51, 81, -14, -114, -5, -63, -77, 60, -56, 114, 119, 4, -110, 25, -78, -56, -112, -107, 39, 54, -60, 113, 52, -121, 17, 22, 120, -111, 29, -97, 66, -32, Byte.MIN_VALUE, 116, -49, 82, 78, 101, -41, EmvService.TYPE_SAVE, -41, 39, -16, 84, -26, -75, -24, 94, -55, 43, 62, -75, -97, -2, -23, 38, -35, 108, EmvService.TYPE_BALANCE_INQUIRY, 77, -11, 85, -55, 74, -44, -121, -87, -101, 103, -53, 124, 123, -91, -28, 106, 91, -127, 61, -37, -111, -117, -114, 62, 4, 35, -12, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 42, 88, 104, 109, 18, 99, -64, -70, -54, -98, -126, 6, -116, 73, 50, -119, -29, -26, -109, 110, -54, 95, -97, 119, -32, 107, 13, 111, -67, -89, 24, -127, -117, -125, 80, 32, 9, -116, 103, 28, 93, -41, -23, -72, -24, -24, 65, -46, -33, 50, -18, -108, -89, -12, 116, -124, -124, -54, 68, 16, -118, -78, 65, -91, 38, 59, -95, -1, 0, -43, 19, 96, -35, -36, 116, -99, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -95};
        capk_AMEX_61.Exponent = new byte[]{1, 0, 1};
        capk_AMEX_61.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_AMEX_61.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result39 = EmvService.Emv_AddCapk(capk_AMEX_61);
        StringBuilder sb77 = new StringBuilder();
        EmvCAPK emvCAPK27 = capk_AMEX_60;
        sb77.append("Add CAPK capk_AMEX_61:");
        sb77.append(result39);
        sb77.append(" ID:");
        sb77.append(capk_AMEX_61.KeyID);
        Log(sb77.toString());
        if (result39 == 1) {
            StringBuilder sb78 = new StringBuilder();
            sb78.append("Create capk_AMEX_61 database:");
            sb78.append(false);
            Log(sb78.toString());
        }
        EmvCAPK capk_D0 = new EmvCAPK();
        int i29 = result39;
        capk_D0.RID = new byte[]{-96, 0, 0, 1, 82};
        capk_D0.KeyID = -48;
        capk_D0.HashInd = 1;
        capk_D0.ArithInd = 1;
        capk_D0.Modul = new byte[]{-48, 92, 42, 9, -48, -100, -112, EmvService.TYPE_BALANCE_INQUIRY, 54, 110, -64, -110, -68, -84, 103, -44, -79, -76, -8, -117, 16, 0, 94, 31, -60, 92, 27, 72, 58, -25, -21, -122, -1, 14, -120, 74, 25, -64, 89, 90, 108, 52, -16, 99, -122, -41, 118, -94, 29, 98, 15, -55, -7, -60, -104, -83, -54, 0, -26, 109, 18, -101, -51, -44, 120, -104, 55, -71, 109, -52, Byte.MAX_VALUE, 9, -38, -108, -52, -84, 90, -57, -49, -64, Byte.MAX_VALUE, 70, 0, -33, 120, -28, -109, -36, 25, 87, -34, -70, 63, 72, 56, -92, -72, -67, 76, -17, -28, -28, -58, 17, -112, -123, -27, -69, EmvService.TYPE_SAVE, 7, 115, 65, -59, 104, -94, 29, 101, -48, 73, -42, 102, Byte.MIN_VALUE, 124, 57, -60, 1, -51, -2, -25, -9, -7, -101, -113, -100, -77, 74, -120, 65, -22, 98, -24, 62, -115, 99};
        capk_D0.Exponent = new byte[]{1, 0, 1};
        capk_D0.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_D0.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result40 = EmvService.Emv_AddCapk(capk_D0);
        StringBuilder sb79 = new StringBuilder();
        EmvCAPK emvCAPK28 = capk_AMEX_61;
        sb79.append("Add CAPK capk_D0:");
        sb79.append(result40);
        sb79.append(" ID:");
        sb79.append(capk_D0.KeyID);
        Log(sb79.toString());
        if (result40 == 1) {
            StringBuilder sb80 = new StringBuilder();
            sb80.append("Create capk_D0 database:");
            sb80.append(false);
            Log(sb80.toString());
        }
        EmvCAPK capk_D1 = new EmvCAPK();
        capk_D1.RID = new byte[]{-96, 0, 0, 1, 82};
        capk_D1.KeyID = -47;
        capk_D1.HashInd = 1;
        capk_D1.ArithInd = 1;
        capk_D1.Modul = new byte[]{-89, 26, -7, 119, -63, 7, -109, 4, -42, -33, -13, -10, 101, -85, 109, -77, -5, -33, -95, -79, 112, 40, 122, -58, -41, -68, 10, -4, -73, -94, 2, -92, -56, 21, -31, -4, 46, 52, -9, 90, 5, 37, 100, -18, EmvService.TYPE_SAVE, 72, -93, -100, -42, -80, -13, -100, -6, -17, -107, -16, 41, 74, -122, -61, 25, -114, 52, -97, -8, 46, -20, -26, 51, -43, 14, 88, 96, -95, 80, -126, -76, -77, 66, -87, 9, 40, 2, EmvService.TYPE_TRANSFER, 87, -35, 81, -94, EmvService.TYPE_TRANSFER, 29, 120, 27, 103, -82, 117, -104, -43, -47, -1, 38, -92, 65, -105, 10, 25, -93, -91, Byte.MIN_VALUE, 17, -54, 25, 40, 66, 121, -88, 85, 103, -45, 17, -110, 100, Byte.MIN_VALUE, 108, -81, 118, 17, 34, -89, 31, -64, 73, 42, -56, -40, -44, 43, 3, 108, 57, 79, -60, -108, -32, 59, 67, 96, 13, 126, 2, -53, 82, 103, 117, 90, -50, 100, 67, 124, -6, 123, 71, 90, -44, 13, -36, -109, -72, -55, -68, -83, 99, Byte.MIN_VALUE, 31, -60, -110, -3, 37, 22, EmvService.TYPE_TRANSFER, -28, 31, -47, 63, 110, 35, 31, 86, -7, 114, -125, 68, 122, -76, 76, -66, 17, -111, 13, -77, -57, 82, 67, 120, 74, -87, -67, -11, 117, 57, -61, 27, 81, -55, -13, 91, -8, -68, 36, -107, 118, 40, -127, 37, 84, 120, 38, 75, 121, 43, -67, -54, 100, -104, 119, 122, -23, 18, 14, -39, 53, -69, 62, -117, -22, 62, -85, 19, -39};
        int i30 = result40;
        capk_D1.Exponent = new byte[]{1, 0, 1};
        capk_D1.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_D1.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result41 = EmvService.Emv_AddCapk(capk_D1);
        StringBuilder sb81 = new StringBuilder();
        EmvCAPK emvCAPK29 = capk_D0;
        sb81.append("Add CAPK capk_D1:");
        sb81.append(result41);
        sb81.append(" ID:");
        sb81.append(capk_D1.KeyID);
        Log(sb81.toString());
        if (result41 == 1) {
            StringBuilder sb82 = new StringBuilder();
            sb82.append("Create capk_D1 database:");
            sb82.append(false);
            Log(sb82.toString());
        }
    }

    public static void Add_All_CAPK() {
        new EmvCAPK();
        EmvCAPK capk = new EmvCAPK();
        capk.RID = new byte[]{-96, 0, 0, 0, 3};
        capk.KeyID = 3;
        capk.HashInd = 1;
        capk.ArithInd = 1;
        capk.Modul = StringUtil.hexStringToByte("B3E5E667506C47CAAFB12A2633819350846697DD65A796E5CE77C57C626A66F70BB630911612AD2832909B8062291BECA46CD33B66A6F9C9D48CED8B4FC8561C8A1D8FB15862C9EB60178DEA2BE1F82236FFCFF4F3843C272179DCDD384D541053DA6A6A0D3CE48FDC2DC4E3E0EEE15F");
        capk.Exponent = new byte[]{3};
        capk.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk.CheckSum = StringUtil.hexStringToByte("FE70AB3B4D5A1B9924228ADF8027C758483A8B7E");
        int result = EmvService.Emv_AddCapk(capk);
        StringBuilder sb = new StringBuilder();
        sb.append("Add CAPK capk_D1:");
        sb.append(result);
        sb.append(" ID:");
        sb.append(capk.KeyID);
        sb.append("RID:");
        sb.append(StringUtil.bytesToHexString(capk.RID));
        Log(sb.toString());
        EmvCAPK capk2 = new EmvCAPK();
        capk2.RID = new byte[]{-96, 0, 0, 0, 3};
        capk2.KeyID = 5;
        capk2.HashInd = 1;
        capk2.ArithInd = 1;
        capk2.Modul = StringUtil.hexStringToByte("D0135CE8A4436C7F9D5CC66547E30EA402F98105B71722E24BC08DCC80AB7E71EC23B8CE6A1DC6AC2A8CF55543D74A8AE7B388F9B174B7F0D756C22CBB5974F9016A56B601CCA64C71F04B78E86C501B193A5556D5389ECE4DEA258AB97F52A3");
        capk2.Exponent = new byte[]{3};
        capk2.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk2.CheckSum = StringUtil.hexStringToByte("86DF041E7995023552A79E2623E49180C0CD957A");
        int result2 = EmvService.Emv_AddCapk(capk2);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("Add CAPK capk_D1:");
        sb2.append(result2);
        sb2.append(" ID:");
        sb2.append(capk2.KeyID);
        sb2.append("RID:");
        sb2.append(StringUtil.bytesToHexString(capk2.RID));
        Log(sb2.toString());
        EmvCAPK capk3 = new EmvCAPK();
        capk3.RID = new byte[]{-96, 0, 0, 0, 3};
        capk3.KeyID = 6;
        capk3.HashInd = 1;
        capk3.ArithInd = 1;
        capk3.Modul = StringUtil.hexStringToByte("F934FC032BE59B609A9A649E04446F1B365D1D23A1E6574E490170527EDF32F398326159B39B63D07E95E6276D7FCBB786925182BC0667FBD8F6566B361CA41A38DDF227091B87FA4F47BAC780AC47E15A6A0FB65393EB3473E8D193A07EB579");
        capk3.Exponent = new byte[]{3};
        capk3.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk3.CheckSum = StringUtil.hexStringToByte("A0DF5DAA385AE3E0E21BFD34D9D8A30506B19B12");
        int result3 = EmvService.Emv_AddCapk(capk3);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("Add CAPK capk_D1:");
        sb3.append(result3);
        sb3.append(" ID:");
        sb3.append(capk3.KeyID);
        sb3.append("RID:");
        sb3.append(StringUtil.bytesToHexString(capk3.RID));
        Log(sb3.toString());
        EmvCAPK capk4 = new EmvCAPK();
        capk4.RID = new byte[]{-96, 0, 0, 0, 3};
        capk4.KeyID = 8;
        capk4.HashInd = 1;
        capk4.ArithInd = 1;
        capk4.Modul = StringUtil.hexStringToByte("D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0B");
        capk4.Exponent = new byte[]{3};
        capk4.ExpDate = new byte[]{36, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk4.CheckSum = StringUtil.hexStringToByte("20D213126955DE205ADC2FD2822BD22DE21CF9A8");
        int result4 = EmvService.Emv_AddCapk(capk4);
        StringBuilder sb4 = new StringBuilder();
        sb4.append("Add CAPK capk_D1:");
        sb4.append(result4);
        sb4.append(" ID:");
        sb4.append(capk4.KeyID);
        sb4.append("RID:");
        sb4.append(StringUtil.bytesToHexString(capk4.RID));
        Log(sb4.toString());
        EmvCAPK capk5 = new EmvCAPK();
        capk5.RID = new byte[]{-96, 0, 0, 0, 3};
        capk5.KeyID = 9;
        capk5.HashInd = 1;
        capk5.ArithInd = 1;
        capk5.Modul = StringUtil.hexStringToByte("9D912248DE0A4E39C1A7DDE3F6D2588992C1A4095AFBD1824D1BA74847F2BC4926D2EFD904B4B54954CD189A54C5D1179654F8F9B0D2AB5F0357EB642FEDA95D3912C6576945FAB897E7062CAA44A4AA06B8FE6E3DBA18AF6AE3738E30429EE9BE03427C9D64F695FA8CAB4BFE376853EA34AD1D76BFCAD15908C077FFE6DC5521ECEF5D278A96E26F57359FFAEDA19434B937F1AD999DC5C41EB11935B44C18100E857F431A4A5A6BB65114F174C2D7B59FDF237D6BB1DD0916E644D709DED56481477C75D95CDD68254615F7740EC07F330AC5D67BCD75BF23D28A140826C026DBDE971A37CD3EF9B8DF644AC385010501EFC6509D7A41");
        capk5.Exponent = new byte[]{3};
        capk5.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk5.CheckSum = StringUtil.hexStringToByte("1FF80A40173F52D7D27E0F26A146A1C8CCB29046");
        int result5 = EmvService.Emv_AddCapk(capk5);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("Add CAPK capk_D1:");
        sb5.append(result5);
        sb5.append(" ID:");
        sb5.append(capk5.KeyID);
        sb5.append("RID:");
        sb5.append(StringUtil.bytesToHexString(capk5.RID));
        Log(sb5.toString());
        EmvCAPK capk6 = new EmvCAPK();
        capk6.RID = new byte[]{-96, 0, 0, 0, 3};
        capk6.KeyID = 16;
        capk6.HashInd = 1;
        capk6.ArithInd = 1;
        capk6.Modul = StringUtil.hexStringToByte("9F2701C0909CCBD8C3ED3E071C69F776160022FF3299807ED7A035ED5752770E232D56CC3BE159BD8F0CA8B59435688922F406F55C75639457BBABEFE9A86B2269EF223E34B91AA6DF2CCAD03B4AD4B443D61575CA960845E6C69040101E231D9EF811AD99B0715065A0E661449C41B4B023B7716D1E4AFF1C90704E55AE1225");
        capk6.Exponent = new byte[]{3};
        capk6.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk6.CheckSum = StringUtil.hexStringToByte("833B1947778036B6D759FCE3F618DDEB2749372C");
        int result6 = EmvService.Emv_AddCapk(capk6);
        StringBuilder sb6 = new StringBuilder();
        sb6.append("Add CAPK capk_D1:");
        sb6.append(result6);
        sb6.append(" ID:");
        sb6.append(capk6.KeyID);
        sb6.append("RID:");
        sb6.append(StringUtil.bytesToHexString(capk6.RID));
        Log(sb6.toString());
        EmvCAPK capk7 = new EmvCAPK();
        capk7.RID = new byte[]{-96, 0, 0, 0, 3};
        capk7.KeyID = 32;
        capk7.HashInd = 1;
        capk7.ArithInd = 1;
        capk7.Modul = StringUtil.hexStringToByte("998D2AD946A60FC597D93807DB54B2B0A550871E43F1779F073AF08D9B04ABD17C8A7DAA3E66EE443F30F92648FC53DA57A78364B062FEDB50F7235B937E16E5F6D9E6BA8F106FB325ECA25125111CE04B43098CDEA8A41426FC6D94F8A47619EDB12789581808692CFBA1F38E8008CC5E02066A1889D52F77B9A121E6597F39");
        capk7.Exponent = new byte[]{3};
        capk7.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk7.CheckSum = StringUtil.hexStringToByte("7AC3D80EF01E9A998F0A77181E64B36747DC51EB");
        int result7 = EmvService.Emv_AddCapk(capk7);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("Add CAPK capk_D1:");
        sb7.append(result7);
        sb7.append(" ID:");
        sb7.append(capk7.KeyID);
        sb7.append("RID:");
        sb7.append(StringUtil.bytesToHexString(capk7.RID));
        Log(sb7.toString());
        EmvCAPK capk8 = new EmvCAPK();
        capk8.RID = new byte[]{-96, 0, 0, 0, 3};
        capk8.KeyID = 80;
        capk8.HashInd = 1;
        capk8.ArithInd = 1;
        capk8.Modul = StringUtil.hexStringToByte("D11197590057B84196C2F4D11A8F3C05408F422A35D702F90106EA5B019BB28AE607AA9CDEBCD0D81A38D48C7EBB0062D287369EC0C42124246AC30D80CD602AB7238D51084DED4698162C59D25EAC1E66255B4DB2352526EF0982C3B8AD3D1CCE85B01DB5788E75E09F44BE7361366DEF9D1E1317B05E5D0FF5290F88A0DB47");
        capk8.Exponent = new byte[]{17};
        capk8.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk8.CheckSum = StringUtil.hexStringToByte("B769775668CACB5D22A647D1D993141EDAB7237B");
        int result8 = EmvService.Emv_AddCapk(capk8);
        StringBuilder sb8 = new StringBuilder();
        sb8.append("Add CAPK capk_D1:");
        sb8.append(result8);
        sb8.append(" ID:");
        sb8.append(capk8.KeyID);
        sb8.append("RID:");
        sb8.append(StringUtil.bytesToHexString(capk8.RID));
        Log(sb8.toString());
        EmvCAPK capk9 = new EmvCAPK();
        capk9.RID = new byte[]{-96, 0, 0, 0, 3};
        capk9.KeyID = 81;
        capk9.HashInd = 1;
        capk9.ArithInd = 1;
        capk9.Modul = StringUtil.hexStringToByte("BBE43877CC28C0CE1E14BC14E8477317E218364531D155BB8AC5B63C0D6E284DD24259193899F9C04C30BAF167D57929451F67AEBD3BBD0D41444501847D8F02F2C2A2D14817D97AE2625DC163BF8B484C40FFB51749CEDDE9434FB2A0A41099");
        capk9.Exponent = new byte[]{3};
        capk9.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk9.CheckSum = StringUtil.hexStringToByte("D3D90B35BA8C48731171EAC407D89005ACF6F9DA");
        int result9 = EmvService.Emv_AddCapk(capk9);
        StringBuilder sb9 = new StringBuilder();
        sb9.append("Add CAPK capk_D1:");
        sb9.append(result9);
        sb9.append(" ID:");
        sb9.append(capk9.KeyID);
        sb9.append("RID:");
        sb9.append(StringUtil.bytesToHexString(capk9.RID));
        Log(sb9.toString());
        EmvCAPK capk10 = new EmvCAPK();
        capk10.RID = new byte[]{-96, 0, 0, 0, 3};
        capk10.KeyID = 82;
        capk10.HashInd = 1;
        capk10.ArithInd = 1;
        capk10.Modul = StringUtil.hexStringToByte("B831414E0B4613922BD35B4B36802BC1E1E81C95A27C958F5382003DF646154CA92FC1CE02C3BE047A45E9B02A9089B4B90278237C965192A0FCC86BB49BC82AE6FDC2DE709006B86C7676EFDF597626FAD633A4F7DC48C445D37EB55FCB3B1ABB95BAAA826D5390E15FD14ED403FA2D0CB841C650609524EC555E3BC56CA957");
        capk10.Exponent = new byte[]{17};
        capk10.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk10.CheckSum = StringUtil.hexStringToByte("73A7CA6BA7DB3C37B78E86952BC4EC7754925D54");
        int result10 = EmvService.Emv_AddCapk(capk10);
        StringBuilder sb10 = new StringBuilder();
        sb10.append("Add CAPK capk_D1:");
        sb10.append(result10);
        sb10.append(" ID:");
        sb10.append(capk10.KeyID);
        sb10.append("RID:");
        sb10.append(StringUtil.bytesToHexString(capk10.RID));
        Log(sb10.toString());
        EmvCAPK capk11 = new EmvCAPK();
        capk11.RID = new byte[]{-96, 0, 0, 0, 3};
        capk11.KeyID = 83;
        capk11.HashInd = 1;
        capk11.ArithInd = 1;
        capk11.Modul = StringUtil.hexStringToByte("BCD83721BE52CCCC4B6457321F22A7DC769F54EB8025913BE804D9EABBFA19B3D7C5D3CA658D768CAF57067EEC83C7E6E9F81D0586703ED9DDDADD20675D63424980B10EB364E81EB37DB40ED100344C928886FF4CCC37203EE6106D5B59D1AC102E2CD2D7AC17F4D96C398E5FD993ECB4FFDF79B17547FF9FA2AA8EEFD6CBDA124CBB17A0F8528146387135E226B005A474B9062FF264D2FF8EFA36814AA2950065B1B04C0A1AE9B2F69D4A4AA979D6CE95FEE9485ED0A03AEE9BD953E81CFD1EF6E814DFD3C2CE37AEFA38C1F9877371E91D6A5EB59FDEDF75D3325FA3CA66CDFBA0E57146CC789818FF06BE5FCC50ABD362AE4B80996D");
        capk11.Exponent = new byte[]{3};
        capk11.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk11.CheckSum = StringUtil.hexStringToByte("A84A53964513A5D9363B4BA13AF5D43B83A83CE7");
        int result11 = EmvService.Emv_AddCapk(capk11);
        StringBuilder sb11 = new StringBuilder();
        sb11.append("Add CAPK capk_D1:");
        sb11.append(result11);
        sb11.append(" ID:");
        sb11.append(capk11.KeyID);
        sb11.append("RID:");
        sb11.append(StringUtil.bytesToHexString(capk11.RID));
        Log(sb11.toString());
        EmvCAPK capk12 = new EmvCAPK();
        capk12.RID = new byte[]{-96, 0, 0, 0, 3};
        capk12.KeyID = 88;
        capk12.HashInd = 1;
        capk12.ArithInd = 1;
        capk12.Modul = StringUtil.hexStringToByte("99552C4A1ECD68A0260157FC4151B5992837445D3FC57365CA5692C87BE358CDCDF2C92FB6837522842A48EB11CDFFE2FD91770C7221E4AF6207C2DE4004C7DEE1B6276DC62D52A87D2CD01FBF2DC4065DB52824D2A2167A06D19E6A0F781071CDB2DD314CB94441D8DC0E936317B77BF06F5177F6C5ABA3A3BC6AA30209C97260B7A1AD3A192C9B8CD1D153570AFCC87C3CD681D13E997FE33B3963A0A1C79772ACF991033E1B8397AD0341500E48A24770BC4CBE19D2CCF419504FDBF0389BC2F2FDCD4D44E61F");
        capk12.Exponent = new byte[]{17};
        capk12.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk12.CheckSum = StringUtil.hexStringToByte("E6D302EBE7DC6F267E4D00F7D488F0AB6235F105");
        int result12 = EmvService.Emv_AddCapk(capk12);
        StringBuilder sb12 = new StringBuilder();
        sb12.append("Add CAPK capk_D1:");
        sb12.append(result12);
        sb12.append(" ID:");
        sb12.append(capk12.KeyID);
        sb12.append("RID:");
        sb12.append(StringUtil.bytesToHexString(capk12.RID));
        Log(sb12.toString());
        EmvCAPK capk13 = new EmvCAPK();
        capk13.RID = new byte[]{-96, 0, 0, 0, 3};
        capk13.KeyID = -106;
        capk13.HashInd = 1;
        capk13.ArithInd = 1;
        capk13.Modul = StringUtil.hexStringToByte("B74586D19A207BE6627C5B0AAFBC44A2ECF5A2942D3A26CE19C4FFAEEE920521868922E893E7838225A3947A2614796FB2C0628CE8C11E3825A56D3B1BBAEF783A5C6A81F36F8625395126FA983C5216D3166D48ACDE8A431212FF763A7F79D9EDB7FED76B485DE45BEB829A3D4730848A366D3324C3027032FF8D16A1E44D8D");
        capk13.Exponent = new byte[]{3};
        capk13.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk13.CheckSum = StringUtil.hexStringToByte("7616E9AC8BE014AF88CA11A8FB17967B7394030E");
        int result13 = EmvService.Emv_AddCapk(capk13);
        StringBuilder sb13 = new StringBuilder();
        sb13.append("Add CAPK capk_D1:");
        sb13.append(result13);
        sb13.append(" ID:");
        sb13.append(capk13.KeyID);
        sb13.append("RID:");
        sb13.append(StringUtil.bytesToHexString(capk13.RID));
        Log(sb13.toString());
        EmvCAPK capk14 = new EmvCAPK();
        capk14.RID = new byte[]{-96, 0, 0, 0, 3};
        capk14.KeyID = -105;
        capk14.HashInd = 1;
        capk14.ArithInd = 1;
        capk14.Modul = StringUtil.hexStringToByte("AF0754EAED977043AB6F41D6312AB1E22A6809175BEB28E70D5F99B2DF18CAE73519341BBBD327D0B8BE9D4D0E15F07D36EA3E3A05C892F5B19A3E9D3413B0D97E7AD10A5F5DE8E38860C0AD004B1E06F4040C295ACB457A788551B6127C0B29");
        capk14.Exponent = new byte[]{3};
        capk14.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk14.CheckSum = StringUtil.hexStringToByte("8001CA76C1203955E2C62841CD6F201087E564BF");
        int result14 = EmvService.Emv_AddCapk(capk14);
        StringBuilder sb14 = new StringBuilder();
        sb14.append("Add CAPK capk_D1:");
        sb14.append(result14);
        sb14.append(" ID:");
        sb14.append(capk14.KeyID);
        sb14.append("RID:");
        sb14.append(StringUtil.bytesToHexString(capk14.RID));
        Log(sb14.toString());
        EmvCAPK capk15 = new EmvCAPK();
        capk15.RID = new byte[]{-96, 0, 0, 0, 3};
        capk15.KeyID = -104;
        capk15.HashInd = 1;
        capk15.ArithInd = 1;
        capk15.Modul = StringUtil.hexStringToByte("CA026E52A695E72BD30AF928196EEDC9FAF4A619F2492E3FB31169789C276FFBB7D43116647BA9E0D106A3542E3965292CF77823DD34CA8EEC7DE367E08070895077C7EFAD939924CB187067DBF92CB1E785917BD38BACE0C194CA12DF0CE5B7A50275AC61BE7C3B436887CA98C9FD39");
        capk15.Exponent = new byte[]{3};
        capk15.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk15.CheckSum = StringUtil.hexStringToByte("E7AC9AA8EED1B5FF1BD532CF1489A3E5557572C1");
        int result15 = EmvService.Emv_AddCapk(capk15);
        StringBuilder sb15 = new StringBuilder();
        sb15.append("Add CAPK capk_D1:");
        sb15.append(result15);
        sb15.append(" ID:");
        sb15.append(capk15.KeyID);
        sb15.append("RID:");
        sb15.append(StringUtil.bytesToHexString(capk15.RID));
        Log(sb15.toString());
        EmvCAPK capk16 = new EmvCAPK();
        capk16.RID = new byte[]{-96, 0, 0, 0, 3};
        capk16.KeyID = -103;
        capk16.HashInd = 1;
        capk16.ArithInd = 1;
        capk16.Modul = StringUtil.hexStringToByte("AB79FCC9520896967E776E64444E5DCDD6E13611874F3985722520425295EEA4BD0C2781DE7F31CD3D041F565F747306EED62954B17EDABA3A6C5B85A1DE1BEB9A34141AF38FCF8279C9DEA0D5A6710D08DB4124F041945587E20359BAB47B7575AD94262D4B25F264AF33DEDCF28E09615E937DE32EDC03C54445FE7E382777");
        capk16.Exponent = new byte[]{3};
        capk16.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk16.CheckSum = StringUtil.hexStringToByte("4ABFFD6B1C51212D05552E431C5B17007D2F5E6D");
        int result16 = EmvService.Emv_AddCapk(capk16);
        StringBuilder sb16 = new StringBuilder();
        sb16.append("Add CAPK capk_D1:");
        sb16.append(result16);
        sb16.append(" ID:");
        sb16.append(capk16.KeyID);
        sb16.append("RID:");
        sb16.append(StringUtil.bytesToHexString(capk16.RID));
        Log(sb16.toString());
        EmvCAPK capk17 = new EmvCAPK();
        capk17.RID = new byte[]{-96, 0, 0, 0, 3};
        capk17.KeyID = -13;
        capk17.HashInd = 1;
        capk17.ArithInd = 1;
        capk17.Modul = StringUtil.hexStringToByte("98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3");
        capk17.Exponent = new byte[]{3};
        capk17.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk17.CheckSum = StringUtil.hexStringToByte("128EB33128E63E38C9A83A2B1A9349E178F82196");
        int result17 = EmvService.Emv_AddCapk(capk17);
        StringBuilder sb17 = new StringBuilder();
        sb17.append("Add CAPK capk_D1:");
        sb17.append(result17);
        sb17.append(" ID:");
        sb17.append(capk17.KeyID);
        sb17.append("RID:");
        sb17.append(StringUtil.bytesToHexString(capk17.RID));
        Log(sb17.toString());

        //progressContext = "Adding APP_AMEX";
        //sendMsgInner(HANDLE_UPDATE_PROCESSING);
        EmvApp APP_VERVE = new EmvApp();
        String name = "Verve";
        APP_VERVE.AppName = name.getBytes(StandardCharsets.US_ASCII);
        APP_VERVE.AID = new byte[]{(byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x71, (byte) 0x00, (byte) 0x01};
        APP_VERVE.SelFlag = (byte)0x00;
        APP_VERVE.Priority = (byte)0x00;
        APP_VERVE.TargetPer = (byte)0;
        APP_VERVE.MaxTargetPer = (byte)0;
        APP_VERVE.FloorLimitCheck = (byte)1;
        APP_VERVE.RandTransSel = (byte)1;
        APP_VERVE.VelocityCheck = (byte)1;
        APP_VERVE.FloorLimit = new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x50,(byte)0x00};//9F1B:FloorLimit
        APP_VERVE.Threshold = new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};
        APP_VERVE.TACDenial = new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};
        APP_VERVE.TACOnline = new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};
        APP_VERVE.TACDefault = new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};
        APP_VERVE.AcquierId = new byte[]{(byte)0x01,(byte)0x22,(byte)0x39,(byte)0x66,(byte)0x78,(byte)0x90};
        APP_VERVE.DDOL = new byte[]{(byte)0x03,(byte)0x9F,(byte)0x37,(byte)0x04};
        APP_VERVE.TDOL = new byte[]{(byte)0x0F,(byte)0x9F,(byte)0x02,(byte)0x06,(byte)0x5F,(byte)0x2A,(byte)0x02,(byte)0x9A,(byte)0x03,(byte)0x9C,(byte)0x01,(byte)0x95,(byte)0x05,(byte)0x9F,(byte)0x37,(byte)0x04};
        APP_VERVE.Version = new byte[]{(byte)0x00,(byte)0x01};

        result = EmvService.Emv_AddApp(APP_VERVE);
        Log("ADD APP_VERVE:" + result);
        if(result == EmvService.EMV_TRUE){
//            aiddb = new AIDDB();
//            DataExchange.AIDtoDB(APP_AMEX,aiddb);
//            aiddb.bEnable = true;
//            aiddb.bTDOL = true;
//            aiddb.MerchantCategoryCode = "1872";
//            aiddb.MerchantID = "363630303030303030303030303636";//这是Hex值
//            aiddb.MerchantName = "53484F502035";//(SHOP 5)      //这是Hex值
//            aiddb.TerminalID = "4261636B31353132";              //这是Hex值
//            aiddb.TransCurrCode = "0840";                       //这是Hex值
//            aiddb.TransCurrExponent = "";                     //这是Hex值
//            aiddb.TransReferCurrCode = "";                  //这是Hex值
//            aiddb.TransReferCurrExponent = "";                //这是Hex值
//            dbResult = aiddbDao.create(aiddb);
//            Log("creat APP_VERVE database :" + dbResult);
        }

        
        addPaypassCAPK();
        Add_All_CAPK_Test();
        Add_Default_CAPK();
    }

    static void addPaypassCAPK() {
        EmvCAPK capk_01 = new EmvCAPK();
        capk_01.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_01.KeyID = 0;
        capk_01.HashInd = 1;
        capk_01.ArithInd = 1;
        capk_01.Modul = new byte[]{-72, 4, -118, -68, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -55, 13, -105, 99, 54, 84, 62, 63, -41, 9, 28, -113, -28, Byte.MIN_VALUE, 13, -8, 32, -19, 85, -25, -23, 72, 19, -19, 0, 85, 91, 87, 63, -20, -93, -40, 74, -10, 19, 26, 101, 29, 102, -49, -12, 40, 79, -79, 59, 99, 94, -35, 14, -28, 1, 118, -40, -65, 4, -73, -3, 28, 123, -84, -7, -84, 115, 39, -33, -86, -118, -89, 45, 16, -37, 59, -114, 112, -78, -35, -40, 17, -53, 65, -106, 82, 94, -93, -122, -84, -61, 60, 13, -99, 69, 117, -111, 100, 105, -60, -28, -11, 62, -114, 28, -111, 44, -58, 24, -53, 34, -35, -25, -61, 86, -114, -112, 2, 46, 107, -70, 119, 2, 2, -28, 82, 42, 45, -42, 35, -47, Byte.MIN_VALUE, -30, 21, -67, 29, 21, 7, -2, 61, -55, 12, -93, 16, -46, 123, 62, -4, -51, -113, -125, -34, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 82, -54, -47, -28, -119, 56, -58, -115, 9, 90, -84, -111, -75, -13, 126, 40, -69, 73, -20, 126, -43, -105};
        capk_01.Exponent = new byte[]{5};
        capk_01.ExpDate = new byte[]{EmvService.TYPE_SAVE, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_01.CheckSum = new byte[]{-21, -6, 13, 93, 6, -40, -50, 112, 45, -93, -22, -24, -112, 112, 29, 69, -30, 116, -56, 69};
        int result = EmvService.Emv_AddCapk(capk_01);
        StringBuilder sb = new StringBuilder();
        sb.append("add Capk ");
        sb.append(StringUtil.bytesToHexString_upcase(capk_01.RID));
        sb.append("(");
        sb.append(Integer.toHexString(capk_01.KeyID));
        sb.append(") : ");
        sb.append(result);
        Log(sb.toString());
        EmvCAPK capk_012 = new EmvCAPK();
        capk_012.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_012.KeyID = 6;
        capk_012.HashInd = 1;
        capk_012.ArithInd = 1;
        capk_012.Modul = new byte[]{-53, 38, -4, -125, 11, 67, 120, 91, 43, -50, 55, -56, 30, -45, 52, 98, 47, -106, 34, -12, -56, -102, -82, 100, 16, 70, -78, 53, 52, 51, -120, 63, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, Byte.MAX_VALUE, -73, -55, 116, 22, 45, -89, 47, 122, 78, -57, 93, -99, 101, 115, 54, -122, 91, -115, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 35, -45, -42, 69, 102, 118, 37, -55, -96, 122, 107, 122, 19, 124, -16, -58, 65, -104, -82, 56, -4, 35, Byte.MIN_VALUE, 6, -5, 38, 3, -12, 31, 79, 59, -71, -38, 19, 71, 39, 15, 47, 93, -116, 96, 110, 66, 9, 88, -59, -9, -43, 10, 113, -34, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 20, 47, 112, -34, 70, -120, -119, -75, -29, -96, -122, -107, -71, 56, -91, 15, -55, Byte.MIN_VALUE, 57, 58, -100, -68, -28, 74, -46, -42, 79, 99, 11, -77, 58, -45, -11, -11, -3, 73, 93, EmvService.TYPE_BALANCE_INQUIRY, -13, 120, 24, -63, -39, EmvService.TYPE_TRANSFER, 113, 52, 46, 7, -15, -66, -62, 25, 79, 96, 53, -70, 93, -19, 57, 54, 80, 14, -72, 45, -3, -90, -24, -81, -74, 85, -79, -17, 61, 13, 126, -65, -122, -74, 109, -39, -14, -97, 107, 29, 50, 79, -24, -78, 108, -29, -118, -78, 1, 61, -47, 63, 97, 30, 122, 89, 77, 103, 92, 68, 50, 53, 14, -94, 68, -52, 52, -13, -121, 60, -70, 6, 89, 41, -121, -95, -41, -24, 82, -83, -62, 46, -11, -94, -18, 40, 19, 32, EmvService.TYPE_BALANCE_INQUIRY, -28, -113, 116, 3, 126, 59, 52, -85, 116, Byte.MAX_VALUE};
        capk_012.Exponent = new byte[]{3};
        capk_012.ExpDate = new byte[]{EmvService.TYPE_SAVE, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_012.CheckSum = new byte[]{-7, 16, -95, 80, 77, 95, -5, 121, 61, -108, -13, -75, 0, 118, 94, 26, -68, -83, 114, -39};
        int result2 = EmvService.Emv_AddCapk(capk_012);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("add Capk ");
        sb2.append(StringUtil.bytesToHexString_upcase(capk_012.RID));
        sb2.append("(");
        sb2.append(Integer.toHexString(capk_012.KeyID));
        sb2.append(") : ");
        sb2.append(result2);
        Log(sb2.toString());
        EmvCAPK capk_013 = new EmvCAPK();
        capk_013.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_013.KeyID = 9;
        capk_013.HashInd = 1;
        capk_013.ArithInd = 1;
        capk_013.Modul = StringUtil.hexStringToByte("967B6264436C96AA9305776A5919C70DA796340F9997A6C6EF7BEF1D4DBF9CB4289FB7990ABFF1F3AE692F12844B2452A50AE075FB327976A40E8028F279B1E3CCB623957D696FC1225CA2EC950E2D415E9AA931FF18B13168D661FBD06F0ABB");
        capk_013.Exponent = new byte[]{3};
        capk_013.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_013.CheckSum = StringUtil.hexStringToByte("1D90595C2EF9FC6E71B0C721118333DF8A71FE21");
        int result3 = EmvService.Emv_AddCapk(capk_013);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("add Capk ");
        sb3.append(StringUtil.bytesToHexString_upcase(capk_013.RID));
        sb3.append("(");
        sb3.append(Integer.toHexString(capk_013.KeyID));
        sb3.append(") : ");
        sb3.append(result3);
        Log(sb3.toString());
        EmvCAPK capk_014 = new EmvCAPK();
        capk_014.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_014.KeyID = 34;
        capk_014.HashInd = 1;
        capk_014.ArithInd = 1;
        capk_014.Modul = StringUtil.hexStringToByte("BBE43877CC28C0CE1E14BC14E8477317E218364531D155BB8AC5B63C0D6E284DD24259193899F9C04C30BAF167D57929451F67AEBD3BBD0D41444501847D8F02F2C2A2D14817D97AE2625DC163BF8B484C40FFB51749CEDDE9434FB2A0A41099");
        capk_014.Exponent = new byte[]{3};
        capk_014.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_014.CheckSum = StringUtil.hexStringToByte("008C39B1D119498268B07843349427AC6E98F807");
        int result4 = EmvService.Emv_AddCapk(capk_014);
        StringBuilder sb4 = new StringBuilder();
        sb4.append("add Capk ");
        sb4.append(StringUtil.bytesToHexString_upcase(capk_014.RID));
        sb4.append("(");
        sb4.append(Integer.toHexString(capk_014.KeyID));
        sb4.append(") : ");
        sb4.append(result4);
        Log(sb4.toString());
        EmvCAPK capk_015 = new EmvCAPK();
        capk_015.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_015.KeyID = 82;
        capk_015.HashInd = 1;
        capk_015.ArithInd = 1;
        capk_015.Modul = StringUtil.hexStringToByte("B831414E0B4613922BD35B4B36802BC1E1E81C95A27C958F5382003DF646154CA92FC1CE02C3BE047A45E9B02A9089B4B90278237C965192A0FCC86BB49BC82AE6FDC2DE709006B86C7676EFDF597626FAD633A4F7DC48C445D37EB55FCB3B1ABB95BAAA826D5390E15FD14ED403FA2D0CB841C650609524EC555E3BC56CA957");
        capk_015.Exponent = new byte[]{17};
        capk_015.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_015.CheckSum = StringUtil.hexStringToByte("DEB81EDB2626A4BB6AE23B77D19A77539D0E6716");
        int result5 = EmvService.Emv_AddCapk(capk_015);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("add Capk ");
        sb5.append(StringUtil.bytesToHexString_upcase(capk_015.RID));
        sb5.append("(");
        sb5.append(Integer.toHexString(capk_015.KeyID));
        sb5.append(") : ");
        sb5.append(result5);
        Log(sb5.toString());
        EmvCAPK capk_016 = new EmvCAPK();
        capk_016.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_016.KeyID = -16;
        capk_016.HashInd = 1;
        capk_016.ArithInd = 1;
        capk_016.Modul = StringUtil.hexStringToByte("7563C51B5276AA6370AB8405522414645832B6BEF2A989C771475B2E8DC654DC8A5BFF9E28E31FF1A370A40DC3FFEB06BC85487D5F1CB61C2441FD71CBCD05D883F8DE413B243AFC9DCA768B061E35B884B5D21B6B016AA36BA12DABCFE49F8E528C893C34C7D4793977E4CC99AB09640D9C7AAB7EC5FF3F40E3D4D18DF7E3A7");
        capk_016.Exponent = new byte[]{3};
        capk_016.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_016.CheckSum = StringUtil.hexStringToByte("AE667445F8DE6F82C38800E5EBABA322F03F58F2");
        int result6 = EmvService.Emv_AddCapk(capk_016);
        StringBuilder sb6 = new StringBuilder();
        sb6.append("add Capk ");
        sb6.append(StringUtil.bytesToHexString_upcase(capk_016.RID));
        sb6.append("(");
        sb6.append(Integer.toHexString(capk_016.KeyID));
        sb6.append(") : ");
        sb6.append(result6);
        Log(sb6.toString());
        EmvCAPK capk_017 = new EmvCAPK();
        capk_017.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_017.KeyID = -6;
        capk_017.HashInd = 1;
        capk_017.ArithInd = 1;
        capk_017.Modul = StringUtil.hexStringToByte("9C6BE5ADB10B4BE3DCE2099B4B210672B89656EBA091204F613ECC623BEDC9C6D77B660E8BAEEA7F7CE30F1B153879A4E36459343D1FE47ACDBD41FCD710030C2BA1D9461597982C6E1BDD08554B726F5EFF7913CE59E79E357295C321E26D0B8BE270A9442345C753E2AA2ACFC9D30850602FE6CAC00C6DDF6B8D9D9B4879B2826B042A07F0E5AE526A3D3C4D22C72B9EAA52EED8893866F866387AC05A1399");
        capk_017.Exponent = new byte[]{3};
        capk_017.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_017.CheckSum = StringUtil.hexStringToByte("0ABCADAD2C7558CA9C7081AE55DDDC714F8D45F8");
        int result7 = EmvService.Emv_AddCapk(capk_017);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("add Capk ");
        sb7.append(StringUtil.bytesToHexString_upcase(capk_017.RID));
        sb7.append("(");
        sb7.append(Integer.toHexString(capk_017.KeyID));
        sb7.append(") : ");
        sb7.append(result7);
        Log(sb7.toString());
        EmvCAPK capk_018 = new EmvCAPK();
        capk_018.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_018.KeyID = -5;
        capk_018.HashInd = 1;
        capk_018.ArithInd = 1;
        capk_018.Modul = StringUtil.hexStringToByte("A9548DFB398B48123FAF41E6CFA4AE1E2352B518AB4BCEFECDB0B3EDEC090287D88B12259F361C1CC088E5F066494417E8EE8BBF8991E2B32FF16F994697842B3D6CB37A2BB5742A440B6356C62AA33DB3C455E59EDDF7864701D03A5B83EE9E9BD83AB93302AC2DFE63E66120B051CF081F56326A71303D952BB336FF12610D");
        capk_018.Exponent = new byte[]{2};
        capk_018.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_018.CheckSum = StringUtil.hexStringToByte("6C7289632919ABEE6E1163D7E6BF693FD88EBD35");
        int result8 = EmvService.Emv_AddCapk(capk_018);
        StringBuilder sb8 = new StringBuilder();
        sb8.append("add Capk ");
        sb8.append(StringUtil.bytesToHexString_upcase(capk_018.RID));
        sb8.append("(");
        sb8.append(Integer.toHexString(capk_018.KeyID));
        sb8.append(") : ");
        sb8.append(result8);
        Log(sb8.toString());
        EmvCAPK capk_019 = new EmvCAPK();
        capk_019.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_019.KeyID = -4;
        capk_019.HashInd = 1;
        capk_019.ArithInd = 1;
        capk_019.Modul = StringUtil.hexStringToByte("B37BFD2A9674AD6221C1A001081C62653DC280B0A9BD052C677C913CE7A0D902E77B12F4D4D79037B1E9B923A8BB3FAC3C612045BB3914F8DF41E9A1B61BFA5B41705A691D09CE6F530FE48B30240D98F4E692FFD6AADB87243BA8597AB237586ECF258F4148751BE5DA5A3BE6CC34BD");
        capk_019.Exponent = new byte[]{2};
        capk_019.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_019.CheckSum = StringUtil.hexStringToByte("7FB377EEBBCF7E3A6D04015D10E1BDCB15E21B80");
        int result9 = EmvService.Emv_AddCapk(capk_019);
        StringBuilder sb9 = new StringBuilder();
        sb9.append("add Capk ");
        sb9.append(StringUtil.bytesToHexString_upcase(capk_019.RID));
        sb9.append("(");
        sb9.append(Integer.toHexString(capk_019.KeyID));
        sb9.append(") : ");
        sb9.append(result9);
        Log(sb9.toString());
        EmvCAPK capk_0110 = new EmvCAPK();
        capk_0110.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_0110.KeyID = -3;
        capk_0110.HashInd = 1;
        capk_0110.ArithInd = 1;
        capk_0110.Modul = StringUtil.hexStringToByte("B3572BA49AE4C7B7A0019E5189E142CFCDED9498DDB5F0470567AB0BA713B8DA226424622955B54B937ABFEFAAD97919E377621E22196ABC1419D5ADC123484209EA7CB7029E66A0D54C5B45C8AD615AEDB6AE9E0A2F75310EA8961287241245");
        capk_0110.Exponent = new byte[]{2};
        capk_0110.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_0110.CheckSum = StringUtil.hexStringToByte("23CF0D702E0AEFE518E4FA6B836D3CD45B8AAA71");
        int result10 = EmvService.Emv_AddCapk(capk_0110);
        StringBuilder sb10 = new StringBuilder();
        sb10.append("add Capk ");
        sb10.append(StringUtil.bytesToHexString_upcase(capk_0110.RID));
        sb10.append("(");
        sb10.append(Integer.toHexString(capk_0110.KeyID));
        sb10.append(") : ");
        sb10.append(result10);
        Log(sb10.toString());
        EmvCAPK capk_0111 = new EmvCAPK();
        capk_0111.RID = new byte[]{-96, 0, 0, 0, 4};
        capk_0111.KeyID = -1;
        capk_0111.HashInd = 1;
        capk_0111.ArithInd = 1;
        capk_0111.Modul = StringUtil.hexStringToByte("B855CC64313AF99C453D181642EE7DD21A67D0FF50C61FE213BCDC18AFBCD07722EFDD2594EFDC227DA3DA23ADCC90E3FA907453ACC954C47323BEDCF8D4862C457D25F47B16D7C3502BE081913E5B0482D838484065DA5F6659E00A9E5D570ADA1EC6AF8C57960075119581FC81468D");
        capk_0111.Exponent = new byte[]{3};
        capk_0111.ExpDate = new byte[]{37, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_0111.CheckSum = StringUtil.hexStringToByte("B4E769CECF7AAC4783F305E0B110602A07A6355B");
        int result11 = EmvService.Emv_AddCapk(capk_0111);
        StringBuilder sb11 = new StringBuilder();
        sb11.append("add Capk ");
        sb11.append(StringUtil.bytesToHexString_upcase(capk_0111.RID));
        sb11.append("(");
        sb11.append(Integer.toHexString(capk_0111.KeyID));
        sb11.append(") : ");
        sb11.append(result11);
        Log(sb11.toString());
    }

    public static void Add_All_APP() {
        Add_Default_APP();
        String str = "";
        EmvApp APP_Visa = new EmvApp();
        APP_Visa.AppName = "Visa".getBytes(StandardCharsets.US_ASCII);
        APP_Visa.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16};
        APP_Visa.SelFlag = 0;
        APP_Visa.Priority = 0;
        APP_Visa.TargetPer = 20;
        APP_Visa.MaxTargetPer = 50;
        APP_Visa.FloorLimitCheck = 1;
        APP_Visa.RandTransSel = 1;
        APP_Visa.VelocityCheck = 1;
        APP_Visa.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Visa.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_Visa.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Visa.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Visa.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Visa.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_Visa.DDOL = new byte[]{3, -97, 55, 4};
        APP_Visa.TDOL = new byte[]{3, -97, 2, 6};
        APP_Visa.Version = new byte[]{0, -106};
        int result = EmvService.Emv_AddApp(APP_Visa);
        StringBuilder sb = new StringBuilder();
        sb.append("ADD APP_Visa:");
        sb.append(result);
        Log(sb.toString());
        if (result == 1) {
            StringBuilder sb2 = new StringBuilder();
            sb2.append("creat APP_Visa database :");
            sb2.append(false);
            Log(sb2.toString());
        }
        EmvApp APP_Non_EMV = new EmvApp();
        APP_Non_EMV.AppName = "Non_EMV".getBytes(StandardCharsets.US_ASCII);
        APP_Non_EMV.AID = new byte[]{-96, 0, 0, 0, -103, -112, -112};
        APP_Non_EMV.SelFlag = 0;
        APP_Non_EMV.Priority = 0;
        APP_Non_EMV.TargetPer = 0;
        APP_Non_EMV.MaxTargetPer = 0;
        APP_Non_EMV.FloorLimitCheck = 1;
        APP_Non_EMV.RandTransSel = 1;
        APP_Non_EMV.VelocityCheck = 1;
        APP_Non_EMV.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_Non_EMV.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_Non_EMV.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Non_EMV.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Non_EMV.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Non_EMV.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_Non_EMV.DDOL = new byte[]{3, -97, 55, 4};
        APP_Non_EMV.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_Non_EMV.Version = new byte[]{0, 9};
        int result2 = EmvService.Emv_AddApp(APP_Non_EMV);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("ADD APP_Non_EMV:");
        sb3.append(result2);
        Log(sb3.toString());
        if (result2 == 1) {
            StringBuilder sb4 = new StringBuilder();
            sb4.append("creat APP_Non_EMV database :");
            sb4.append(false);
            Log(sb4.toString());
        }
        EmvApp APP_Test = new EmvApp();
        APP_Test.AppName = "Test".getBytes(StandardCharsets.US_ASCII);
        APP_Test.AID = new byte[]{-96, 0, 0, -103, -103, 1};
        APP_Test.SelFlag = 0;
        APP_Test.Priority = 0;
        APP_Test.TargetPer = 0;
        APP_Test.MaxTargetPer = 0;
        APP_Test.FloorLimitCheck = 1;
        APP_Test.RandTransSel = 1;
        APP_Test.VelocityCheck = 1;
        APP_Test.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_Test.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_Test.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Test.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Test.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Test.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_Test.DDOL = new byte[]{3, -97, 55, 4};
        APP_Test.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_Test.Version = new byte[]{-103, -103};
        int result3 = EmvService.Emv_AddApp(APP_Test);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("ADD APP_Test:");
        sb5.append(result3);
        Log(sb5.toString());
        if (result3 == 1) {
            StringBuilder sb6 = new StringBuilder();
            sb6.append("creat APP_Test database :");
            sb6.append(false);
            Log(sb6.toString());
        }
        EmvApp APP_ANO3 = new EmvApp();
        APP_ANO3.AppName = "ANO3".getBytes(StandardCharsets.US_ASCII);
        APP_ANO3.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 3};
        APP_ANO3.SelFlag = 0;
        APP_ANO3.Priority = 0;
        APP_ANO3.TargetPer = 0;
        APP_ANO3.MaxTargetPer = 0;
        APP_ANO3.FloorLimitCheck = 1;
        APP_ANO3.RandTransSel = 1;
        APP_ANO3.VelocityCheck = 1;
        APP_ANO3.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANO3.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANO3.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANO3.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANO3.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANO3.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANO3.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANO3.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANO3.Version = new byte[]{0, -106};
        int result4 = EmvService.Emv_AddApp(APP_ANO3);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("ADD APP_ANO3:");
        sb7.append(result4);
        Log(sb7.toString());
        if (result4 == 1) {
            StringBuilder sb8 = new StringBuilder();
            sb8.append("creat APP_ANO3 database :");
            sb8.append(false);
            Log(sb8.toString());
        }
        EmvApp APP_ANO4 = new EmvApp();
        APP_ANO4.AppName = "ANO4".getBytes(StandardCharsets.US_ASCII);
        APP_ANO4.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 4};
        APP_ANO4.SelFlag = 0;
        APP_ANO4.Priority = 0;
        APP_ANO4.TargetPer = 0;
        APP_ANO4.MaxTargetPer = 0;
        APP_ANO4.FloorLimitCheck = 1;
        APP_ANO4.RandTransSel = 1;
        APP_ANO4.VelocityCheck = 1;
        APP_ANO4.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANO4.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANO4.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANO4.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANO4.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANO4.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANO4.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANO4.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANO4.Version = new byte[]{0, -106};
        int result5 = EmvService.Emv_AddApp(APP_ANO4);
        StringBuilder sb9 = new StringBuilder();
        sb9.append("ADD APP_ANO4:");
        sb9.append(result5);
        Log(sb9.toString());
        if (result5 == 1) {
            StringBuilder sb10 = new StringBuilder();
            sb10.append("creat APP_ANO4 database :");
            sb10.append(false);
            Log(sb10.toString());
        }
        EmvApp APP_ANO5 = new EmvApp();
        APP_ANO5.AppName = "ANO5".getBytes(StandardCharsets.US_ASCII);
        APP_ANO5.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 5};
        APP_ANO5.SelFlag = 0;
        APP_ANO5.Priority = 0;
        APP_ANO5.TargetPer = 0;
        APP_ANO5.MaxTargetPer = 0;
        APP_ANO5.FloorLimitCheck = 1;
        APP_ANO5.RandTransSel = 1;
        APP_ANO5.VelocityCheck = 1;
        APP_ANO5.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANO5.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANO5.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANO5.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANO5.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANO5.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANO5.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANO5.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANO5.Version = new byte[]{0, -106};
        int result6 = EmvService.Emv_AddApp(APP_ANO5);
        StringBuilder sb11 = new StringBuilder();
        sb11.append("ADD APP_ANO5:");
        sb11.append(result6);
        Log(sb11.toString());
        if (result6 == 1) {
            StringBuilder sb12 = new StringBuilder();
            sb12.append("creat APP_ANO5 database :");
            sb12.append(false);
            Log(sb12.toString());
        }
        EmvApp APP_ANO6 = new EmvApp();
        APP_ANO6.AppName = "ANO6".getBytes(StandardCharsets.US_ASCII);
        APP_ANO6.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 6};
        APP_ANO6.SelFlag = 0;
        APP_ANO6.Priority = 0;
        APP_ANO6.TargetPer = 0;
        APP_ANO6.MaxTargetPer = 0;
        APP_ANO6.FloorLimitCheck = 1;
        APP_ANO6.RandTransSel = 1;
        APP_ANO6.VelocityCheck = 1;
        APP_ANO6.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANO6.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANO6.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANO6.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANO6.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANO6.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANO6.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANO6.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANO6.Version = new byte[]{0, -106};
        int result7 = EmvService.Emv_AddApp(APP_ANO6);
        StringBuilder sb13 = new StringBuilder();
        sb13.append("ADD APP_ANO6:");
        sb13.append(result7);
        Log(sb13.toString());
        if (result7 == 1) {
            StringBuilder sb14 = new StringBuilder();
            sb14.append("creat APP_ANO6 database :");
            sb14.append(false);
            Log(sb14.toString());
        }
        EmvApp APP_ANO7 = new EmvApp();
        APP_ANO7.AppName = "ANO7".getBytes(StandardCharsets.US_ASCII);
        APP_ANO7.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 7};
        APP_ANO7.SelFlag = 1;
        APP_ANO7.Priority = 0;
        APP_ANO7.TargetPer = 0;
        APP_ANO7.MaxTargetPer = 0;
        APP_ANO7.FloorLimitCheck = 1;
        APP_ANO7.RandTransSel = 1;
        APP_ANO7.VelocityCheck = 1;
        APP_ANO7.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANO7.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANO7.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANO7.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANO7.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANO7.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANO7.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANO7.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANO7.Version = new byte[]{0, -106};
        int result8 = EmvService.Emv_AddApp(APP_ANO7);
        StringBuilder sb15 = new StringBuilder();
        sb15.append("ADD APP_ANO7:");
        sb15.append(result8);
        Log(sb15.toString());
        if (result8 == 1) {
            StringBuilder sb16 = new StringBuilder();
            sb16.append("creat APP_ANO7 database :");
            sb16.append(false);
            Log(sb16.toString());
        }
        EmvApp APP_MasterCard = new EmvApp();
        APP_MasterCard.AppName = "Master Card".getBytes(StandardCharsets.US_ASCII);
        APP_MasterCard.AID = new byte[]{-96, 0, 0, 0, 4, 16, 16};
        APP_MasterCard.SelFlag = 0;
        APP_MasterCard.Priority = 0;
        APP_MasterCard.TargetPer = 0;
        APP_MasterCard.MaxTargetPer = 0;
        APP_MasterCard.FloorLimitCheck = 1;
        APP_MasterCard.RandTransSel = 1;
        APP_MasterCard.VelocityCheck = 1;
        APP_MasterCard.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_MasterCard.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_MasterCard.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_MasterCard.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_MasterCard.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_MasterCard.AcquierId = new byte[]{1, 34, 85, 102, 51, EmvService.TYPE_TRANSFER};
        APP_MasterCard.DDOL = new byte[]{3, -97, 55, 4};
        APP_MasterCard.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_MasterCard.Version = new byte[]{0, 2};
        int result9 = EmvService.Emv_AddApp(APP_MasterCard);
        StringBuilder sb17 = new StringBuilder();
        sb17.append("ADD APP_MasterCard:");
        sb17.append(result9);
        Log(sb17.toString());
        if (result9 == 1) {
            StringBuilder sb18 = new StringBuilder();
            sb18.append("creat APP_MasterCard database :");
            sb18.append(false);
            Log(sb18.toString());
        }
        EmvApp APP_JCB = new EmvApp();
        APP_JCB.AppName = "JCB".getBytes(StandardCharsets.US_ASCII);
        APP_JCB.AID = new byte[]{-96, 0, 0, 0, 101, 16, 16};
        APP_JCB.SelFlag = 0;
        APP_JCB.Priority = 0;
        APP_JCB.TargetPer = 0;
        APP_JCB.MaxTargetPer = 0;
        APP_JCB.FloorLimitCheck = 1;
        APP_JCB.RandTransSel = 1;
        APP_JCB.VelocityCheck = 1;
        APP_JCB.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_JCB.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_JCB.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_JCB.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_JCB.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_JCB.AcquierId = new byte[]{1, 34, 85, 102, 51, EmvService.TYPE_TRANSFER};
        APP_JCB.DDOL = new byte[]{3, -97, 55, 4};
        APP_JCB.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_JCB.Version = new byte[]{2, 0};
        int result10 = EmvService.Emv_AddApp(APP_JCB);
        StringBuilder sb19 = new StringBuilder();
        sb19.append("ADD APP_JCB:");
        sb19.append(result10);
        Log(sb19.toString());
        if (result10 == 1) {
            StringBuilder sb20 = new StringBuilder();
            sb20.append("creat APP_JCB database :");
            sb20.append(false);
            Log(sb20.toString());
        }
        EmvApp APP_AMEX = new EmvApp();
        String name = "AMEX";
        APP_AMEX.AppName = name.getBytes(StandardCharsets.US_ASCII);
        String str2 = name;
        APP_AMEX.AID = new byte[]{-96, 0, 0, 0, 37, 1, 5, 1};
        APP_AMEX.SelFlag = 0;
        APP_AMEX.Priority = 0;
        APP_AMEX.TargetPer = 0;
        APP_AMEX.MaxTargetPer = 0;
        APP_AMEX.FloorLimitCheck = 1;
        APP_AMEX.RandTransSel = 1;
        APP_AMEX.VelocityCheck = 1;
        APP_AMEX.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_AMEX.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_AMEX.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_AMEX.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_AMEX.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_AMEX.AcquierId = new byte[]{1, 34, 57, 102, 120, -112};
        APP_AMEX.DDOL = new byte[]{3, -97, 55, 4};
        APP_AMEX.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_AMEX.Version = new byte[]{0, 1};
        int result11 = EmvService.Emv_AddApp(APP_AMEX);
        StringBuilder sb21 = new StringBuilder();
        sb21.append("ADD APP_AMEX:");
        sb21.append(result11);
        Log(sb21.toString());
        if (result11 == 1) {
            StringBuilder sb22 = new StringBuilder();
            sb22.append("creat APP_AMEX database :");
            sb22.append(false);
            Log(sb22.toString());
        }
        EmvApp APP_Discover = new EmvApp();
        int i = result11;
        APP_Discover.AppName = "Discover".getBytes(StandardCharsets.US_ASCII);
        EmvApp emvApp = APP_ANO3;
        APP_Discover.AID = new byte[]{-96, 0, 0, 1, 82, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 16};
        APP_Discover.SelFlag = 0;
        APP_Discover.Priority = 0;
        APP_Discover.TargetPer = 0;
        APP_Discover.MaxTargetPer = 0;
        APP_Discover.FloorLimitCheck = 1;
        APP_Discover.RandTransSel = 1;
        APP_Discover.VelocityCheck = 1;
        APP_Discover.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Discover.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_Discover.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Discover.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Discover.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Discover.AcquierId = new byte[]{1, 40, 117, 102, 120, -112};
        APP_Discover.DDOL = new byte[]{3, -97, 55, 4};
        APP_Discover.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_Discover.Version = new byte[]{0, 1};
        int result12 = EmvService.Emv_AddApp(APP_Discover);
        StringBuilder sb23 = new StringBuilder();
        EmvApp emvApp2 = APP_Discover;
        sb23.append("ADD APP_Discover:");
        sb23.append(result12);
        Log(sb23.toString());
        if (result12 == 1) {
            StringBuilder sb24 = new StringBuilder();
            sb24.append("creat APP_Discover database :");
            sb24.append(false);
            Log(sb24.toString());
        }
        EmvApp APP_CUP_01 = new EmvApp();
        APP_CUP_01.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        int i2 = result12;
        APP_CUP_01.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 1};
        APP_CUP_01.SelFlag = 0;
        APP_CUP_01.Priority = 0;
        APP_CUP_01.TargetPer = 0;
        APP_CUP_01.MaxTargetPer = 0;
        APP_CUP_01.FloorLimitCheck = 1;
        APP_CUP_01.RandTransSel = 1;
        APP_CUP_01.VelocityCheck = 1;
        APP_CUP_01.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_CUP_01.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_01.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_CUP_01.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_01.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_01.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result13 = EmvService.Emv_AddApp(APP_CUP_01);
        StringBuilder sb25 = new StringBuilder();
        EmvApp emvApp3 = APP_CUP_01;
        sb25.append("ADD APP_CUP_01:");
        sb25.append(result13);
        Log(sb25.toString());
        if (result13 == 1) {
            StringBuilder sb26 = new StringBuilder();
            sb26.append("creat APP_CUP_01 database :");
            sb26.append(false);
            Log(sb26.toString());
        }
        EmvApp APP_CUP_02 = new EmvApp();
        APP_CUP_02.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        int i3 = result13;
        APP_CUP_02.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 2};
        APP_CUP_02.SelFlag = 0;
        APP_CUP_02.Priority = 0;
        APP_CUP_02.TargetPer = 0;
        APP_CUP_02.MaxTargetPer = 0;
        APP_CUP_02.FloorLimitCheck = 1;
        APP_CUP_02.RandTransSel = 1;
        APP_CUP_02.VelocityCheck = 1;
        APP_CUP_02.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_CUP_02.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_02.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.AcquierId = new byte[]{1, 38, 105, 102, 120, -112};
        APP_CUP_02.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_02.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_02.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result14 = EmvService.Emv_AddApp(APP_CUP_02);
        StringBuilder sb27 = new StringBuilder();
        EmvApp emvApp4 = APP_CUP_02;
        sb27.append("ADD APP_CUP_02:");
        sb27.append(result14);
        Log(sb27.toString());
        if (result14 == 1) {
            StringBuilder sb28 = new StringBuilder();
            sb28.append("creat APP_CUP_02 database :");
            sb28.append(false);
            Log(sb28.toString());
        }
        EmvApp APP_CUP_03 = new EmvApp();
        APP_CUP_03.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        APP_CUP_03.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 3};
        APP_CUP_03.SelFlag = 0;
        APP_CUP_03.Priority = 0;
        APP_CUP_03.TargetPer = 0;
        APP_CUP_03.MaxTargetPer = 0;
        APP_CUP_03.FloorLimitCheck = 1;
        APP_CUP_03.RandTransSel = 1;
        APP_CUP_03.VelocityCheck = 1;
        int i4 = result14;
        APP_CUP_03.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_CUP_03.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_03.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_CUP_03.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_03.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_03.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result15 = EmvService.Emv_AddApp(APP_CUP_03);
        StringBuilder sb29 = new StringBuilder();
        EmvApp emvApp5 = APP_CUP_03;
        sb29.append("ADD APP_CUP_03:");
        sb29.append(result15);
        Log(sb29.toString());
        if (result15 == 1) {
            StringBuilder sb30 = new StringBuilder();
            sb30.append("creat APP_CUP_03 database :");
            sb30.append(false);
            Log(sb30.toString());
        }
        EmvApp APP_ANOD = new EmvApp();
        APP_ANOD.AppName = "ANOD".getBytes(StandardCharsets.US_ASCII);
        int i5 = result15;
        APP_ANOD.AID = new byte[]{-95, 34, 51, 68, 85};
        APP_ANOD.SelFlag = 0;
        APP_ANOD.Priority = 0;
        APP_ANOD.TargetPer = 0;
        APP_ANOD.MaxTargetPer = 0;
        APP_ANOD.FloorLimitCheck = 1;
        APP_ANOD.RandTransSel = 1;
        APP_ANOD.VelocityCheck = 1;
        APP_ANOD.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANOD.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANOD.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANOD.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANOD.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANOD.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANOD.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANOD.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANOD.Version = new byte[]{18, 52};
        int result16 = EmvService.Emv_AddApp(APP_ANOD);
        StringBuilder sb31 = new StringBuilder();
        EmvApp emvApp6 = APP_ANOD;
        sb31.append("ADD APP_ANOD:");
        sb31.append(result16);
        Log(sb31.toString());
        if (result16 == 1) {
            StringBuilder sb32 = new StringBuilder();
            sb32.append("creat APP_ANOD database :");
            sb32.append(false);
            Log(sb32.toString());
        }
        EmvApp APP_ANOE = new EmvApp();
        APP_ANOE.AppName = "ANOE".getBytes(StandardCharsets.US_ASCII);
        int i6 = result16;
        APP_ANOE.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        APP_ANOE.SelFlag = 0;
        APP_ANOE.Priority = 0;
        APP_ANOE.TargetPer = 0;
        APP_ANOE.MaxTargetPer = 0;
        APP_ANOE.FloorLimitCheck = 1;
        APP_ANOE.RandTransSel = 1;
        APP_ANOE.VelocityCheck = 1;
        APP_ANOE.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_ANOE.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_ANOE.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_ANOE.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_ANOE.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_ANOE.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_ANOE.DDOL = new byte[]{3, -97, 55, 4};
        APP_ANOE.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_ANOE.Version = new byte[]{18, 52};
        int result17 = EmvService.Emv_AddApp(APP_ANOE);
        StringBuilder sb33 = new StringBuilder();
        EmvApp emvApp7 = APP_ANOE;
        sb33.append("ADD APP_ANOE:");
        sb33.append(result17);
        Log(sb33.toString());
        if (result17 == 1) {
            StringBuilder sb34 = new StringBuilder();
            sb34.append("creat APP_ANOE database :");
            sb34.append(false);
            Log(sb34.toString());
        }
        EmvApp PBOC_TEST_APP = new EmvApp();
        int i7 = result17;
        PBOC_TEST_APP.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1};
        PBOC_TEST_APP.Priority = 0;
        PBOC_TEST_APP.TargetPer = 0;
        PBOC_TEST_APP.MaxTargetPer = 0;
        PBOC_TEST_APP.FloorLimitCheck = 1;
        PBOC_TEST_APP.RandTransSel = 1;
        PBOC_TEST_APP.VelocityCheck = 1;
        PBOC_TEST_APP.FloorLimit = new byte[]{0, 0, 0, 0, 32, 0};
        PBOC_TEST_APP.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        PBOC_TEST_APP.TACDenial = new byte[]{0, 16, 0, 0, 0};
        PBOC_TEST_APP.TACOnline = new byte[]{-40, EmvService.TYPE_TRANSFER, 4, -8, 0};
        PBOC_TEST_APP.TACDefault = new byte[]{-40, EmvService.TYPE_TRANSFER, 0, -88, 0};
        PBOC_TEST_APP.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        PBOC_TEST_APP.DDOL = new byte[]{3, -97, 55, 4};
        PBOC_TEST_APP.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        PBOC_TEST_APP.Version = new byte[]{0, -116};
        int result18 = EmvService.Emv_AddApp(PBOC_TEST_APP);
        StringBuilder sb35 = new StringBuilder();
        EmvApp emvApp8 = PBOC_TEST_APP;
        sb35.append("ADD PBOC_TEST_APP:");
        sb35.append(result18);
        Log(sb35.toString());
        if (result18 == 1) {
            StringBuilder sb36 = new StringBuilder();
            sb36.append("creat PBOC_TEST_APP database :");
            sb36.append(false);
            Log(sb36.toString());
        }
        addPaypassAid();
        EmvApp APP_Visa1 = new EmvApp();
        APP_Visa.AppName = "Visa1".getBytes(StandardCharsets.US_ASCII);
        int i8 = result18;
        APP_Visa1.AID = new byte[]{-96, 0, 0, 0, 3, 16, 16};
        APP_Visa1.SelFlag = 0;
        APP_Visa1.Priority = 0;
        APP_Visa1.TargetPer = 20;
        APP_Visa1.MaxTargetPer = 50;
        APP_Visa1.FloorLimitCheck = 1;
        APP_Visa1.RandTransSel = 1;
        APP_Visa1.VelocityCheck = 1;
        APP_Visa1.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Visa1.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_Visa1.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Visa1.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Visa1.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Visa1.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_Visa1.DDOL = new byte[]{3, -97, 55, 4};
        APP_Visa1.TDOL = new byte[]{3, -97, 2, 6};
        APP_Visa1.Version = new byte[]{0, -106};
        int result19 = EmvService.Emv_AddApp(APP_Visa1);
        StringBuilder sb37 = new StringBuilder();
        EmvApp emvApp9 = APP_Visa1;
        sb37.append("ADD APP_Visa:");
        sb37.append(result19);
        Log(sb37.toString());
        if (result19 == 1) {
            StringBuilder sb38 = new StringBuilder();
            sb38.append("creat APP_Visa database :");
            sb38.append(false);
            Log(sb38.toString());
        }
        EmvApp APP_Visa2 = new EmvApp();
        APP_Visa.AppName = "Visa2".getBytes(StandardCharsets.US_ASCII);
        int i9 = result19;
        APP_Visa2.AID = new byte[]{-96, 0, 0, 0, 3, 32, 16};
        APP_Visa2.SelFlag = 0;
        APP_Visa2.Priority = 0;
        APP_Visa2.TargetPer = 20;
        APP_Visa2.MaxTargetPer = 50;
        APP_Visa2.FloorLimitCheck = 1;
        APP_Visa2.RandTransSel = 1;
        APP_Visa2.VelocityCheck = 1;
        APP_Visa2.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Visa2.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_Visa2.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Visa2.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Visa2.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Visa2.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_Visa2.DDOL = new byte[]{3, -97, 55, 4};
        APP_Visa2.TDOL = new byte[]{3, -97, 2, 6};
        APP_Visa2.Version = new byte[]{0, -106};
        int result20 = EmvService.Emv_AddApp(APP_Visa2);
        StringBuilder sb39 = new StringBuilder();
        EmvApp emvApp10 = APP_Visa2;
        sb39.append("ADD APP_Visa:");
        sb39.append(result20);
        Log(sb39.toString());
        if (result20 == 1) {
            StringBuilder sb40 = new StringBuilder();
            sb40.append("creat APP_Visa database :");
            sb40.append(false);
            Log(sb40.toString());
        }
        EmvApp APP_Visa3 = new EmvApp();
        APP_Visa.AppName = "Visa3".getBytes(StandardCharsets.US_ASCII);
        int i10 = result20;
        APP_Visa3.AID = new byte[]{-96, 0, 0, 0, 3, 32, 32};
        APP_Visa3.SelFlag = 0;
        APP_Visa3.Priority = 0;
        APP_Visa3.TargetPer = 20;
        APP_Visa3.MaxTargetPer = 50;
        APP_Visa3.FloorLimitCheck = 1;
        APP_Visa3.RandTransSel = 1;
        APP_Visa3.VelocityCheck = 1;
        APP_Visa3.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Visa3.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_Visa3.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Visa3.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Visa3.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Visa3.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_Visa3.DDOL = new byte[]{3, -97, 55, 4};
        APP_Visa3.TDOL = new byte[]{3, -97, 2, 6};
        APP_Visa3.Version = new byte[]{0, -106};
        int result21 = EmvService.Emv_AddApp(APP_Visa3);
        StringBuilder sb41 = new StringBuilder();
        EmvApp emvApp11 = APP_Visa3;
        sb41.append("ADD APP_Visa:");
        sb41.append(result21);
        Log(sb41.toString());
        if (result21 == 1) {
            StringBuilder sb42 = new StringBuilder();
            sb42.append("creat APP_Visa database :");
            sb42.append(false);
            Log(sb42.toString());
        }
        EmvApp APP_Visa4 = new EmvApp();
        APP_Visa.AppName = "Visa4".getBytes(StandardCharsets.US_ASCII);
        APP_Visa4.AID = new byte[]{-96, 0, 0, 0, 3, Byte.MIN_VALUE, 16};
        APP_Visa4.SelFlag = 0;
        APP_Visa4.Priority = 0;
        APP_Visa4.TargetPer = 20;
        APP_Visa4.MaxTargetPer = 50;
        APP_Visa4.FloorLimitCheck = 1;
        APP_Visa4.RandTransSel = 1;
        APP_Visa4.VelocityCheck = 1;
        int i11 = result21;
        APP_Visa4.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_Visa4.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_Visa4.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_Visa4.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_Visa4.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_Visa4.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_Visa4.DDOL = new byte[]{3, -97, 55, 4};
        APP_Visa4.TDOL = new byte[]{3, -97, 2, 6};
        APP_Visa4.Version = new byte[]{0, -106};
        int result22 = EmvService.Emv_AddApp(APP_Visa4);
        StringBuilder sb43 = new StringBuilder();
        EmvApp emvApp12 = APP_Visa4;
        sb43.append("ADD APP_Visa:");
        sb43.append(result22);
        Log(sb43.toString());
        if (result22 == 1) {
            StringBuilder sb44 = new StringBuilder();
            sb44.append("creat APP_Visa database :");
            sb44.append(false);
            Log(sb44.toString());
        }
    }

    static void addPaypassAid() {
        EmvApp APP_1 = new EmvApp();
        APP_1.AppName = "Mastercard".getBytes(StandardCharsets.US_ASCII);
        APP_1.AID = new byte[]{-96, 0, 0, 0, 4, 16, 16};
        APP_1.SelFlag = 0;
        APP_1.Priority = 0;
        APP_1.TargetPer = 20;
        APP_1.MaxTargetPer = 50;
        APP_1.FloorLimitCheck = 1;
        APP_1.RandTransSel = 1;
        APP_1.VelocityCheck = 1;
        APP_1.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_1.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_1.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_1.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_1.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_1.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_1.DDOL = new byte[]{3, -97, 55, 4};
        APP_1.TDOL = new byte[]{3, -97, 2, 6};
        APP_1.Version = new byte[]{0, -106};
        APP_1.RiskManData = new byte[]{108, -1, 0, 0, 0, 0, 0, 0};
        int Emv_AddApp = EmvService.Emv_AddApp(APP_1);
        EmvApp APP_12 = new EmvApp();
        APP_12.AppName = "Maestro".getBytes(StandardCharsets.US_ASCII);
        APP_12.AID = new byte[]{-96, 0, 0, 0, 4, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 96};
        APP_12.SelFlag = 0;
        APP_12.Priority = 0;
        APP_12.TargetPer = 0;
        APP_12.MaxTargetPer = 0;
        APP_12.FloorLimitCheck = 1;
        APP_12.RandTransSel = 1;
        APP_12.VelocityCheck = 1;
        APP_12.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_12.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_12.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_12.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_12.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_12.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_12.DDOL = new byte[]{3, -97, 55, 4};
        APP_12.TDOL = new byte[]{3, -97, 2, 6};
        APP_12.Version = new byte[]{0, -106};
        APP_12.RiskManData = new byte[]{68, -1, Byte.MIN_VALUE, 0, 0, 0, 0, 0};
        int Emv_AddApp2 = EmvService.Emv_AddApp(APP_12);
        EmvApp APP_13 = new EmvApp();
        APP_13.AppName = "Test1".getBytes(StandardCharsets.US_ASCII);
        APP_13.AID = new byte[]{-80, 18, 52, 86, 120};
        APP_13.SelFlag = 0;
        APP_13.Priority = 0;
        APP_13.TargetPer = 0;
        APP_13.MaxTargetPer = 0;
        APP_13.FloorLimitCheck = 1;
        APP_13.RandTransSel = 1;
        APP_13.VelocityCheck = 1;
        APP_13.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_13.Threshold = new byte[]{0, 0, 0, 0, 1, 0};
        APP_13.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_13.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_13.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_13.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_13.DDOL = new byte[]{3, -97, 55, 4};
        APP_13.TDOL = new byte[]{3, -97, 2, 6};
        APP_13.Version = new byte[]{0, -106};
        APP_13.RiskManData = new byte[]{108, -1, 0, 0, 0, 0, 0, 0};
        int result = EmvService.Emv_AddApp(APP_13);
    }

    public static void Add_Default_APP() {
        String str = "";
        EmvApp APP_CUP_01 = new EmvApp();
        APP_CUP_01.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        APP_CUP_01.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 1};
        APP_CUP_01.SelFlag = 0;
        APP_CUP_01.Priority = 0;
        APP_CUP_01.TargetPer = 0;
        APP_CUP_01.MaxTargetPer = 0;
        APP_CUP_01.FloorLimitCheck = 1;
        APP_CUP_01.RandTransSel = 1;
        APP_CUP_01.VelocityCheck = 1;
        APP_CUP_01.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_CUP_01.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_01.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_01.AcquierId = new byte[]{1, 35, 69, 103, -119, 16};
        APP_CUP_01.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_01.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_01.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result = EmvService.Emv_AddApp(APP_CUP_01);
        StringBuilder sb = new StringBuilder();
        sb.append("ADD APP_CUP_01:");
        sb.append(result);
        Log(sb.toString());
        EmvApp APP_CUP_02 = new EmvApp();
        APP_CUP_02.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        APP_CUP_02.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 2};
        APP_CUP_02.SelFlag = 0;
        APP_CUP_02.Priority = 0;
        APP_CUP_02.TargetPer = 0;
        APP_CUP_02.MaxTargetPer = 0;
        APP_CUP_02.FloorLimitCheck = 1;
        APP_CUP_02.RandTransSel = 1;
        APP_CUP_02.VelocityCheck = 1;
        APP_CUP_02.FloorLimit = new byte[]{0, 0, 0, 1, 80, 0};
        APP_CUP_02.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_02.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_02.AcquierId = new byte[]{1, 38, 105, 102, 120, -112};
        APP_CUP_02.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_02.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_02.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result2 = EmvService.Emv_AddApp(APP_CUP_02);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("ADD APP_CUP_02:");
        sb2.append(result2);
        Log(sb2.toString());
        EmvApp APP_CUP_03 = new EmvApp();
        APP_CUP_03.AppName = "China Union Pay".getBytes(StandardCharsets.US_ASCII);
        APP_CUP_03.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 3};
        APP_CUP_03.SelFlag = 0;
        APP_CUP_03.Priority = 0;
        APP_CUP_03.TargetPer = 0;
        APP_CUP_03.MaxTargetPer = 0;
        APP_CUP_03.FloorLimitCheck = 1;
        APP_CUP_03.RandTransSel = 1;
        APP_CUP_03.VelocityCheck = 1;
        APP_CUP_03.FloorLimit = new byte[]{0, 0, 0, 0, 1, 80};
        APP_CUP_03.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        APP_CUP_03.TACDenial = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.TACOnline = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.TACDefault = new byte[]{0, 0, 0, 0, 0};
        APP_CUP_03.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        APP_CUP_03.DDOL = new byte[]{3, -97, 55, 4};
        APP_CUP_03.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        APP_CUP_03.Version = new byte[]{0, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY};
        int result3 = EmvService.Emv_AddApp(APP_CUP_03);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("ADD APP_CUP_03:");
        sb3.append(result3);
        Log(sb3.toString());
        EmvApp PBOC_TEST_APP = new EmvApp();
        PBOC_TEST_APP.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1};
        PBOC_TEST_APP.Priority = 0;
        PBOC_TEST_APP.TargetPer = 0;
        PBOC_TEST_APP.MaxTargetPer = 0;
        PBOC_TEST_APP.FloorLimitCheck = 1;
        PBOC_TEST_APP.RandTransSel = 1;
        PBOC_TEST_APP.VelocityCheck = 1;
        PBOC_TEST_APP.FloorLimit = new byte[]{0, 0, 0, 0, 32, 0};
        PBOC_TEST_APP.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        PBOC_TEST_APP.TACDenial = new byte[]{0, 16, 0, 0, 0};
        PBOC_TEST_APP.TACOnline = new byte[]{-40, EmvService.TYPE_TRANSFER, 4, -8, 0};
        PBOC_TEST_APP.TACDefault = new byte[]{-40, EmvService.TYPE_TRANSFER, 0, -88, 0};
        PBOC_TEST_APP.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        PBOC_TEST_APP.DDOL = new byte[]{3, -97, 55, 4};
        PBOC_TEST_APP.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        PBOC_TEST_APP.Version = new byte[]{0, -116};
        int result4 = EmvService.Emv_AddApp(PBOC_TEST_APP);
        StringBuilder sb4 = new StringBuilder();
        sb4.append("ADD PBOC_TEST_APP:");
        sb4.append(result4);
        Log(sb4.toString());
        EmvApp qPBOC_test1 = new EmvApp();
        PBOC_TEST_APP.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 1};
        PBOC_TEST_APP.Priority = 0;
        PBOC_TEST_APP.TargetPer = 0;
        PBOC_TEST_APP.MaxTargetPer = 0;
        PBOC_TEST_APP.FloorLimitCheck = 1;
        PBOC_TEST_APP.RandTransSel = 1;
        PBOC_TEST_APP.VelocityCheck = 1;
        PBOC_TEST_APP.FloorLimit = new byte[]{0, 0, 0, 0, 32, 0};
        PBOC_TEST_APP.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        PBOC_TEST_APP.TACDenial = new byte[]{0, 16, 0, 0, 0};
        PBOC_TEST_APP.TACOnline = new byte[]{-40, EmvService.TYPE_TRANSFER, 4, -8, 0};
        PBOC_TEST_APP.TACDefault = new byte[]{-40, EmvService.TYPE_TRANSFER, 0, -88, 0};
        PBOC_TEST_APP.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        PBOC_TEST_APP.DDOL = new byte[]{3, -97, 55, 4};
        PBOC_TEST_APP.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        PBOC_TEST_APP.Version = new byte[]{0, -116};
        int result5 = EmvService.Emv_AddApp(qPBOC_test1);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("ADD PBOC_TEST_APP:");
        sb5.append(result5);
        Log(sb5.toString());
        EmvApp qPBOC_test2 = new EmvApp();
        PBOC_TEST_APP.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 2};
        PBOC_TEST_APP.Priority = 0;
        PBOC_TEST_APP.TargetPer = 0;
        PBOC_TEST_APP.MaxTargetPer = 0;
        PBOC_TEST_APP.FloorLimitCheck = 1;
        PBOC_TEST_APP.RandTransSel = 1;
        PBOC_TEST_APP.VelocityCheck = 1;
        PBOC_TEST_APP.FloorLimit = new byte[]{0, 0, 0, 0, 32, 0};
        PBOC_TEST_APP.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        PBOC_TEST_APP.TACDenial = new byte[]{0, 16, 0, 0, 0};
        PBOC_TEST_APP.TACOnline = new byte[]{-40, EmvService.TYPE_TRANSFER, 4, -8, 0};
        PBOC_TEST_APP.TACDefault = new byte[]{-40, EmvService.TYPE_TRANSFER, 0, -88, 0};
        PBOC_TEST_APP.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        PBOC_TEST_APP.DDOL = new byte[]{3, -97, 55, 4};
        PBOC_TEST_APP.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        PBOC_TEST_APP.Version = new byte[]{0, -116};
        int result6 = EmvService.Emv_AddApp(qPBOC_test2);
        StringBuilder sb6 = new StringBuilder();
        sb6.append("ADD PBOC_TEST_APP:");
        sb6.append(result6);
        Log(sb6.toString());
        EmvApp qPBOC_test3 = new EmvApp();
        PBOC_TEST_APP.AID = new byte[]{-96, 0, 0, 3, 51, 1, 1, 3};
        PBOC_TEST_APP.Priority = 0;
        PBOC_TEST_APP.TargetPer = 0;
        PBOC_TEST_APP.MaxTargetPer = 0;
        PBOC_TEST_APP.FloorLimitCheck = 1;
        PBOC_TEST_APP.RandTransSel = 1;
        PBOC_TEST_APP.VelocityCheck = 1;
        PBOC_TEST_APP.FloorLimit = new byte[]{0, 0, 0, 0, 32, 0};
        PBOC_TEST_APP.Threshold = new byte[]{0, 0, 0, 0, 0, 0};
        PBOC_TEST_APP.TACDenial = new byte[]{0, 16, 0, 0, 0};
        PBOC_TEST_APP.TACOnline = new byte[]{-40, EmvService.TYPE_TRANSFER, 4, -8, 0};
        PBOC_TEST_APP.TACDefault = new byte[]{-40, EmvService.TYPE_TRANSFER, 0, -88, 0};
        PBOC_TEST_APP.AcquierId = new byte[]{0, 0, 0, 18, 52, 86};
        PBOC_TEST_APP.DDOL = new byte[]{3, -97, 55, 4};
        PBOC_TEST_APP.TDOL = new byte[]{15, -97, 2, 6, 95, 42, 2, -102, 3, -100, 1, -107, 5, -97, 55, 4};
        PBOC_TEST_APP.Version = new byte[]{0, -116};
        int result7 = EmvService.Emv_AddApp(qPBOC_test3);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("ADD PBOC_TEST_APP:");
        sb7.append(result7);
        Log(sb7.toString());
    }

    public static void Add_Default_CAPK() {
        EmvCAPK capk_pobc_80 = new EmvCAPK();
        capk_pobc_80.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_80.KeyID = Byte.MIN_VALUE;
        capk_pobc_80.HashInd = 1;
        capk_pobc_80.ArithInd = 1;
        capk_pobc_80.Modul = new byte[]{-52, -37, -90, -122, -30, -17, -72, 76, -30, -22, 1, 32, -98, -21, 83, -66, -14, 26, -74, -45, 83, 39, 79, -8, 57, 29, 112, 53, -41, 110, EmvService.TYPE_SAVE, 86, -54, -19, -48, 117, 16, -32, 125, -81, -54, -54, -69, 124, -53, 9, 80, -70, 47, 10, 60, -20, EmvService.TYPE_BALANCE_INQUIRY, 60, 82, -18, 108, -48, -98, -16, 4, 1, -93, -42, -52, 95, 104, -54, 95, -51, 10, -58, 19, EmvService.TYPE_SAVE, 65, -6, -3, 28, -6, 54, -94, 105, 45, 2, -35, -62, 126, -38, 76, -43, -66, -90, -1, EmvService.TYPE_SAVE, -111, 59, 81, 60, -25, -117, -13, 62, 104, 119, -86, 91, 96, 91, -58, -102, 83, 79, 55, 119, -53, -19, 99, 118, -70, 100, -100, 114, 81, 106, 126, 22, -81, -123};
        capk_pobc_80.Exponent = new byte[]{1, 0, 1};
        capk_pobc_80.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_80.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result = EmvService.Emv_AddCapk(capk_pobc_80);
        StringBuilder sb = new StringBuilder();
        sb.append("Add CAPK capk_pobc_80:");
        sb.append(result);
        sb.append(" ID:");
        sb.append(capk_pobc_80.KeyID);
        Log(sb.toString());
        EmvCAPK capk_pobc_C0 = new EmvCAPK();
        capk_pobc_C0.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_C0.KeyID = -64;
        capk_pobc_C0.HashInd = 1;
        capk_pobc_C0.ArithInd = 1;
        capk_pobc_C0.Modul = new byte[]{-57, -51, -74, -14, -93, -2, Byte.MIN_VALUE, -88, -125, 76, -35, -35, 50, 110, 16, -126, -86, 34, -120, -12, 124, 70, 77, 87, -77, 71, 24, 25, 52, EmvService.TYPE_BALANCE_INQUIRY, 113, 26, 68, 17, -111, 72, 5, 80, 68, -49, -29, EmvService.TYPE_BALANCE_INQUIRY, 55, 8, -66, -48, -55, -114, 28, 88, -101, 15, 83, -49, 109, 126, -126, -97, -51, -112, 109, EmvService.TYPE_SAVE, -87, 15, -44, -53, 107, -81, 19, 17, 12, 70, -123, 16, 124, 39, -32, 9, -127, -37, 41, -36, 10, -63, -122, -26, -41, 1, 87, Byte.MAX_VALUE, 35, -122, 86, 38, 36, 78, 31, -101, 44, -47, -35, -4, -71, -24, -103, -76, 31, 80, -124, -40, -52, -63, 120, -89, -61, -12, 84, 108, -7, EmvService.TYPE_BALANCE_INQUIRY, -121, 16, 111, -85, 5, 90, 122, -58, 125, -10, 46, 119, -116, -72, -120, 35, -70, 88, -49, 117, 70, -62, -80, -97};
        capk_pobc_C0.Exponent = new byte[]{1, 0, 1};
        capk_pobc_C0.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_C0.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result2 = EmvService.Emv_AddCapk(capk_pobc_C0);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("Add CAPK capk_pobc_C0:");
        sb2.append(result2);
        sb2.append(" ID:");
        sb2.append(capk_pobc_C0.KeyID);
        Log(sb2.toString());
        EmvCAPK capk_pobc_C1 = new EmvCAPK();
        capk_pobc_C1.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_C1.KeyID = -63;
        capk_pobc_C1.HashInd = 1;
        capk_pobc_C1.ArithInd = 1;
        capk_pobc_C1.Modul = new byte[]{-110, -16, -125, -53, -28, 111, -115, -52, 12, 4, -28, -104, -70, -103, 82, -70, -99, 76, 9, -56, 13, -46, 119, -27, 121, -16, 126, 69, 119, 40, 70, -6, 67, -35, 58, -77, 28, -58, -80, -115, -47, -122, -107, 113, 89, 73, -5, 16, -114, 83, -96, 113, -45, -109, -89, -3, -37, -7, -59, -5, 11, 5, 7, 19, -121, -105, EmvService.TYPE_BALANCE_INQUIRY, 116, Byte.MIN_VALUE, -4, 72, -42, 51, -19, 56, -76, 1, -92, 81, 68, 58, -41, -15, 95, -84, -38, 69, -90, 42, -66, 36, -1, 99, 67, -83, -48, -112, -98, -88, 56, -109, 72, -27, 78, 38, -8, 66, -120, 13, 26, 105, -7, EmvService.TYPE_SAVE, 67, 104, -70, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -63, -115, -27, -59, -32, -53, -110, 83, -75, -85, -59, 95, -74, -17, 10, 115, -115, -110, 116, -108, -93, 11, -65, -126, -29, EmvService.TYPE_TRANSFER, 40, 83, 99, -74, -6, -95, 86, 115, -126, -99, -69, EmvService.TYPE_SAVE, 14, 113, 13, -91, -114, -23, -27, 120, -25, -50, 85, -36, -127, 42, -73, -42, -36, -50, 14, 59, 26, -31, 121, -42, 100, -13, 53, 110, -71, 81, -29, -55, 26, 28, -69, -10, -89, -54, -115, 12, 126, -55, -58, -81, 122, 73, 65, -59, 5, 16, -103, -71, 120, 78, 86, -55, 22, 32, 103, -72, -61, -79, 92, 95, -92, 72, 10, 100, 92, -46, 82, 106, 105, -56, 11, -88, -17, 54, 27, -30, -86, -108, 23, -34, -4, -29, 91, 98, -80, -55, -49, 9, 125};
        capk_pobc_C1.Exponent = new byte[]{1, 0, 1};
        capk_pobc_C1.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_C1.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result3 = EmvService.Emv_AddCapk(capk_pobc_C1);
        StringBuilder sb3 = new StringBuilder();
        sb3.append("Add CAPK capk_pobc_C1:");
        sb3.append(result3);
        sb3.append(" ID:");
        sb3.append(capk_pobc_C1.KeyID);
        Log(sb3.toString());
        EmvCAPK capk_pobc_61 = new EmvCAPK();
        capk_pobc_61.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_61.KeyID = 97;
        capk_pobc_61.HashInd = 1;
        capk_pobc_61.ArithInd = 1;
        capk_pobc_61.Modul = new byte[]{-125, 77, 42, 56, 124, 90, 95, 23, 110, -13, -26, 108, -86, -8, 63, 25, 75, 21, -86, -46, 71, 12, 120, -57, 125, 110, -77, -114, -38, -29, -94, -7, -70, 22, 35, -10, -91, -116, -119, 44, -55, 37, 99, 45, -1, 72, -50, -107, 75, EmvService.TYPE_SAVE, -91, 62, 31, 30, 67, 102, -66, EmvService.TYPE_TRANSFER, 60, 39, -101, -112, 2, 124, -68, 114, 96, 93, -74, -57, -112, 73, -72, -103, 44, -76, -111, 46, -6, 39, 11, -20, -85, 58, 124, -17, -32, 91, -6, 70, -28, -57, -69, -49, 124, 122, 23, 59, -39, -120, -39, -119, -77, 44, -73, -97, -84, -114, 53, -5, -31, -122, 14, 126, -87, -14, 56, -87, 42, 53, -109, 85, 45, 3, -47, -29, -122, 1};
        capk_pobc_61.Exponent = new byte[]{3};
        capk_pobc_61.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_61.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result4 = EmvService.Emv_AddCapk(capk_pobc_61);
        StringBuilder sb4 = new StringBuilder();
        sb4.append("Add CAPK capk_pobc_61:");
        sb4.append(result4);
        sb4.append(" ID:");
        sb4.append(capk_pobc_61.KeyID);
        Log(sb4.toString());
        EmvCAPK capk_pobc_62 = new EmvCAPK();
        capk_pobc_62.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_62.KeyID = 98;
        capk_pobc_62.HashInd = 1;
        capk_pobc_62.ArithInd = 1;
        capk_pobc_62.Modul = new byte[]{-75, -51, -47, -27, 54, -120, 25, -4, 62, -90, 91, Byte.MIN_VALUE, -58, -127, 23, -69, -62, -97, -112, -106, -21, -46, 23, 38, -101, 88, 59, 7, 69, -32, -63, 100, 51, -43, 75, -114, -13, -121, -79, -26, -51, -38, -19, 73, 35, -61, -98, 55, 14, 92, -83, -2, 4, 23, 115, 2, 58, 107, -64, -96, 51, -80, 3, 27, 0, 72, -15, -118, -63, 89, 119, 60, -74, 105, 94, -23, -97, 85, 31, 65, 72, -125, -5, 5, -27, 38, EmvService.TYPE_TRANSFER, -24, -109, -12, -127, 96, -126, 36, 29, 123, -6, 54, EmvService.TYPE_TRANSFER, -106, 0, 3, -83, 117, 23, -119, 92, 80, -31, -124, -86, -107, 99, 103, -73, -65, -4, 109, -122, 22, -89, -75, 126, 45, 68, 122, -77, -31};
        capk_pobc_62.Exponent = new byte[]{1, 0, 1};
        capk_pobc_62.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_62.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result5 = EmvService.Emv_AddCapk(capk_pobc_62);
        StringBuilder sb5 = new StringBuilder();
        sb5.append("Add CAPK capk_pobc_62:");
        sb5.append(result5);
        Log(sb5.toString());
        EmvCAPK capk_pobc_63 = new EmvCAPK();
        capk_pobc_63.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_63.KeyID = 99;
        capk_pobc_63.HashInd = 1;
        capk_pobc_63.ArithInd = 1;
        capk_pobc_63.Modul = new byte[]{-122, 126, -54, 38, -91, 116, 114, -34, -5, 108, -87, 66, -119, EmvService.TYPE_BALANCE_INQUIRY, 43, -93, -100, 99, 5, 37, 24, -36, 72, 11, 110, -44, -111, -84, -61, 124, 2, -120, 70, -12, -41, -73, -102, -6, -18, -6, 7, -5, 1, 29, -86, 70, -64, 96, EmvService.TYPE_SAVE, -23, 50, -43, 1, -65, 82, -14, -125, 74, -34, 58, -57, 104, -98, -108, -78, 72, -78, -113, 63, -30, Byte.MIN_VALUE, 54, 105, -34, -38, 0, 9, -120, -38, 18, 73, -7, -88, -111, 85, -118, 5, -95, -27, -89, -67, 44, 40, 47, -31, -115, 32, 65, -119, -87, -103, 77, 74, -35, -122, -64, -50, 80, -107, 46, -40, -68, -20, 12, -26, 51, 103, -111, -120, 40, 94, 81, -31, -66, -40, EmvService.TYPE_TRANSFER, -4, -65, -63, 9, 83, -109, -102, -12, -99, -71, 0, 72, -111, 46, 72, -76, 65, -127};
        capk_pobc_63.Exponent = new byte[]{3};
        capk_pobc_63.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_63.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result6 = EmvService.Emv_AddCapk(capk_pobc_63);
        StringBuilder sb6 = new StringBuilder();
        sb6.append("Add CAPK capk_pobc_63:");
        sb6.append(result6);
        sb6.append(" ID:");
        sb6.append(capk_pobc_63.KeyID);
        Log(sb6.toString());
        EmvCAPK capk_pobc_64 = new EmvCAPK();
        capk_pobc_64.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_64.KeyID = 100;
        capk_pobc_64.HashInd = 1;
        capk_pobc_64.ArithInd = 1;
        byte[] bArr = new byte[EmvService.QVSDC_ONLINE_APPROVE];
        // fill-array-data instruction
        bArr[0] = -111;
        bArr[1] = 18;
        bArr[2] = 62;
        bArr[3] = -49;
        bArr[4] = 2;
        bArr[5] = 48;
        bArr[6] = -29;
        bArr[7] = -53;
        bArr[8] = 36;
        bArr[9] = 92;
        bArr[10] = -120;
        bArr[11] = -35;
        bArr[12] = -6;
        bArr[13] = 62;
        bArr[14] = -27;
        bArr[15] = 123;
        bArr[16] = -59;
        bArr[17] = -114;
        bArr[18] = -48;
        bArr[19] = 11;
        bArr[20] = 54;
        bArr[21] = 123;
        bArr[22] = 56;
        bArr[23] = 117;
        bArr[24] = -4;
        bArr[25] = -73;
        bArr[26] = -107;
        bArr[27] = 72;
        bArr[28] = -121;
        bArr[29] = 38;
        bArr[30] = -128;
        bArr[31] = -10;
        bArr[32] = 1;
        bArr[33] = -24;
        bArr[34] = -56;
        bArr[35] = 57;
        bArr[36] = -84;
        bArr[37] = 7;
        bArr[38] = 33;
        bArr[39] = -70;
        bArr[40] = -77;
        bArr[41] = -72;
        bArr[42] = -98;
        bArr[43] = -46;
        bArr[44] = 22;
        bArr[45] = 7;
        bArr[46] = 40;
        bArr[47] = 28;
        bArr[48] = -119;
        bArr[49] = 25;
        bArr[50] = -65;
        bArr[51] = 114;
        bArr[52] = 98;
        bArr[53] = 102;
        bArr[54] = -22;
        bArr[55] = -72;
        bArr[56] = 72;
        bArr[57] = 80;
        bArr[58] = 42;
        bArr[59] = -40;
        bArr[60] = 116;
        bArr[61] = -75;
        bArr[62] = 16;
        bArr[63] = 122;
        bArr[64] = 78;
        bArr[65] = 101;
        bArr[66] = 78;
        bArr[67] = -10;
        bArr[68] = -45;
        bArr[69] = 119;
        bArr[70] = 115;
        bArr[71] = 52;
        bArr[72] = 63;
        bArr[73] = 70;
        bArr[74] = 20;
        bArr[75] = 53;
        bArr[76] = -56;
        bArr[77] = 110;
        bArr[78] = 74;
        bArr[79] = -113;
        bArr[80] = -122;
        bArr[81] = 111;
        bArr[82] = -79;
        bArr[83] = -116;
        bArr[84] = 124;
        bArr[85] = -70;
        bArr[86] = 73;
        bArr[87] = 123;
        bArr[88] = 66;
        bArr[89] = 98;
        bArr[90] = -112;
        bArr[91] = -61;
        bArr[92] = -115;
        bArr[93] = 25;
        bArr[94] = 110;
        bArr[95] = 42;
        bArr[96] = -1;
        bArr[97] = 51;
        bArr[98] = -64;
        bArr[99] = -112;
        bArr[100] = 111;
        bArr[101] = -110;
        bArr[102] = -106;
        bArr[103] = -14;
        bArr[104] = -105;
        bArr[105] = -31;
        bArr[106] = 86;
        bArr[107] = -36;
        bArr[108] = 96;
        bArr[109] = 42;
        bArr[110] = 94;
        bArr[111] = 101;
        bArr[112] = 60;
        bArr[113] = -95;
        bArr[114] = 22;
        bArr[115] = -113;
        bArr[116] = 17;
        bArr[117] = 9;
        bArr[118] = 38;
        bArr[119] = 17;
        bArr[120] = 20;
        bArr[121] = -65;
        bArr[122] = 123;
        bArr[123] = -24;
        bArr[124] = 18;
        bArr[125] = 122;
        bArr[126] = 62;
        bArr[127] = -128;
        bArr[128] = 7;
        bArr[129] = 25;
        bArr[130] = 24;
        bArr[131] = 48;
        bArr[132] = 19;
        bArr[133] = 66;
        bArr[134] = -103;
        bArr[135] = 57;
        bArr[136] = 92;
        bArr[137] = -30;
        bArr[138] = -77;
        bArr[139] = 34;
        bArr[140] = 34;
        bArr[141] = -122;
        bArr[142] = 103;
        bArr[143] = -73;
        bArr[144] = 110;
        bArr[145] = 7;
        bArr[146] = 46;
        bArr[147] = -73;
        bArr[148] = -3;
        bArr[149] = 93;
        bArr[150] = 15;
        bArr[151] = -77;
        bArr[152] = -88;
        bArr[153] = 62;
        bArr[154] = -118;
        bArr[155] = -47;
        bArr[156] = -41;
        bArr[157] = -10;
        bArr[158] = -3;
        bArr[159] = -127;
        capk_pobc_64.Modul = bArr;
        capk_pobc_64.Exponent = new byte[]{3};
        capk_pobc_64.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_64.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result7 = EmvService.Emv_AddCapk(capk_pobc_64);
        StringBuilder sb7 = new StringBuilder();
        sb7.append("Add CAPK capk_pobc_64:");
        sb7.append(result7);
        sb7.append(" ID:");
        sb7.append(capk_pobc_64.KeyID);
        Log(sb7.toString());
        EmvCAPK capk_pobc_65 = new EmvCAPK();
        capk_pobc_65.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_65.KeyID = 101;
        capk_pobc_65.HashInd = 1;
        capk_pobc_65.ArithInd = 1;
        capk_pobc_65.Modul = new byte[]{-127, -70, 30, 107, -97, 103, 28, -4, -124, -116, -94, -84, -40, -31, 122, -12, 6, -76, -45, 41, -47, -20, -91, -48, 27, -64, -108, -88, 124, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -81, 73, -122, 121, 68, -58, 50, -24, 24, 80, 116, 101, 95, -91, 53, -83, -116, -92, 42, -125, -76, 26, -86, -22, -123, -97, 67, 47, -96, -72, 24, -25, 45, -64, 126, -45, -9, Byte.MAX_VALUE, -77, 24, -92, 117, -94, 97, -64, 118, 10, 21, 110, 93, -36, 21, 122, -24, -73, -101, -89, 45, -119, -42, -97, -1, 117, 70, 25, -23, 40, -15, 81, 106, 42, 114, -64, -8, 107, 9, -72, -22, 37, -8, 109, -59, -92, -114, -68, 90, 22, -8, 63, -70, -113, -60, -29, -87, -126, 120, -111, 34, 73, -12, -32, 121, -68, -68, 6, -25, -66, -39, -82, -45, -105, -121, -99, 39, -98, -39, 25, 37, 57, 73, 1, 38, 9, 73, -68, -50, 111, -95, 22, -105, -104, -94, 113, 93, -82, 50, -104, -117, -17, -66, -106, EmvService.TYPE_SAVE, -82, 21, -32, -63};
        capk_pobc_65.Exponent = new byte[]{1, 0, 1};
        capk_pobc_65.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_65.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result8 = EmvService.Emv_AddCapk(capk_pobc_65);
        StringBuilder sb8 = new StringBuilder();
        sb8.append("Add CAPK capk_pobc_65:");
        sb8.append(result8);
        sb8.append(" ID:");
        sb8.append(capk_pobc_65.KeyID);
        Log(sb8.toString());
        EmvCAPK capk_pobc_66 = new EmvCAPK();
        capk_pobc_66.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_66.KeyID = 102;
        capk_pobc_66.HashInd = 1;
        capk_pobc_66.ArithInd = 1;
        capk_pobc_66.Modul = new byte[]{Byte.MAX_VALUE, 90, 57, 69, 121, 77, 107, 21, -11, -14, 107, 74, EmvService.TYPE_SAVE, -90, 58, 94, -13, 85, EmvService.TYPE_TRANSFER, -40, -56, -64, -103, 21, 31, 34, 121, 120, 10, 92, 24, -93, 23, 112, 60, -104, 99, 46, Byte.MIN_VALUE, 77, 37, 87, 106, 123, 70, 12, 5, 6, 30, 3, -105, 94, 80, -5, -41, 73, 91, 58, -36, -114, 66, 94, 83, -33, 118, -6, EmvService.TYPE_TRANSFER, -80, 53, -24, Byte.MAX_VALUE, 105, -85, -8, 118, 90, 82, 82, 63, 59, 26, 57, -79, -107, 40, -80, 2, 35, -112, 21, -6, -37, -91, -110, 16, 81};
        capk_pobc_66.Exponent = new byte[]{1, 0, 1};
        capk_pobc_66.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_66.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result9 = EmvService.Emv_AddCapk(capk_pobc_66);
        StringBuilder sb9 = new StringBuilder();
        sb9.append("Add CAPK capk_pobc_66:");
        sb9.append(result9);
        sb9.append(" ID:");
        sb9.append(capk_pobc_66.KeyID);
        Log(sb9.toString());
        EmvCAPK capk_pobc_05 = new EmvCAPK();
        capk_pobc_05.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_05.KeyID = 5;
        capk_pobc_05.HashInd = 1;
        capk_pobc_05.ArithInd = 1;
        capk_pobc_05.Modul = new byte[]{-105, -49, -117, -83, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -54, -32, -7, -88, -110, -123, 69, 77, -35, -23, 103, -86, -5, -51, 75, -64, -73, -113, 41, -20, -79, 0, 82, -122, -15, 95, 109, 117, 50, -87, -60, 118, 96, 124, 115, -1, 116, 36, EmvService.TYPE_BALANCE_INQUIRY, 109, -4, 116, 24, -108, -86, 82, -19, -70, -7, 9, 113, -100, 123, 83, 68, -125, 67, -76, 92, -14, -16, 10, -118, -65, -73, -116, -18, -66, -124, -119, 51, -86, -19, -105, -37, -24, 79, 7, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -13, 79, -79, -86, 21, 40, -45, -42, -20, 117, -73, 50, 82, -93, 13, 12, 113, 117, 24, -66, 54, 69, -118, -35, 15, -65, -123, 76, 101, 73, Byte.MAX_VALUE, 63, 84, 8, 65, 84, -74, 15, 81, 86, 19, 97, -18, -114, -123, -9, 66, -91, EmvService.TYPE_TRANSFER, 5, 82, 76, -80, 15, -21, -61, 52, 39, 110, 14, 99, -38, -40, 108, 7, -102, -102, 61, -11, -35, 50, -66, -54, -34, 26, -78, -73, 31, 95, 10, 14, -107, -92, 0, 13, 1, -15, 4, 74, 87, -118, -83, -110, -23, -3, -23, 46, 60, 106, -93, -36, -44, -111, 61, -6, 85, 82, 83, 126, 125, -25, 94, 36, 31, -82, -44, 85, -41, 108, -72, -4, -81, -18, -45, -3, 109, -85, 36, -41, -87, -61, 40, 82, -8, 102, -57, 81, -41, 113, 15, 73, 74, 13, -15, 27, 103, -6, -20, -35, -121, -87, -92, -30, -52, 68, -10, -14, 126, 70, -29, -64, -52, -51, 15};
        capk_pobc_05.Exponent = new byte[]{3};
        capk_pobc_05.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_05.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result10 = EmvService.Emv_AddCapk(capk_pobc_05);
        StringBuilder sb10 = new StringBuilder();
        sb10.append("Add CAPK capk_pobc_05:");
        sb10.append(result10);
        sb10.append(" ID:");
        sb10.append(capk_pobc_05.KeyID);
        Log(sb10.toString());
        EmvCAPK capk_pobc_08 = new EmvCAPK();
        capk_pobc_08.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_08.KeyID = 8;
        capk_pobc_08.HashInd = 1;
        capk_pobc_08.ArithInd = 1;
        capk_pobc_08.Modul = new byte[]{-74, 22, 69, -19, -3, 84, -104, -5, 36, 100, 68, 3, 122, 15, -95, -116, 15, 16, 30, -67, -114, -6, 84, 87, 60, -26, -26, -89, -5, -10, 62, -46, 29, 102, 52, 8, 82, -80, EmvService.TYPE_SAVE, 28, -11, -18, -10, -95, -51, -104, -97, 102, -81, EmvService.TYPE_SAVE, -88, -21, 25, -37, -40, -37, -61, 112, 109, 19, 83, 99, -96, -42, -125, -48, 70, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 79, 90, -125, 107, -63, -68, 99, 40, EmvService.TYPE_SAVE, -81, -25, -94, -9, 93, -93, -59, 10, -57, 76, 84, 90, 117, 69, 98, 32, 65, 55, 22, -106, 99, -49, -52, 11, 6, -26, 126, EmvService.TYPE_SAVE, 9, -21, -92, 27, -58, Byte.MAX_VALUE, -14, 12, -56, -84, Byte.MIN_VALUE, -41, -74, -18, 26, -107, 70, 91, 59, 38, 87, 83, 62, -91, 109, -110, -43, 57, -27, 6, 67, 96, -22, 72, 80, -2, -46, -47, -65};
        capk_pobc_08.Exponent = new byte[]{3};
        capk_pobc_08.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_08.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result11 = EmvService.Emv_AddCapk(capk_pobc_08);
        StringBuilder sb11 = new StringBuilder();
        sb11.append("Add CAPK capk_pobc_08:");
        sb11.append(result11);
        sb11.append(" ID:");
        sb11.append(capk_pobc_08.KeyID);
        Log(sb11.toString());
        EmvCAPK capk_pobc_09 = new EmvCAPK();
        capk_pobc_09.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_09.KeyID = 8;
        capk_pobc_09.HashInd = 1;
        capk_pobc_09.ArithInd = 1;
        capk_pobc_09.Modul = new byte[]{-21, 55, 77, -4, 90, -106, -73, 29, 40, 99, -121, 94, -38, 46, -81, -71, 107, 27, 67, -99, 62, -50, 11, 24, 38, -94, 103, 46, -18, -6, 121, -112, 40, 103, 118, -8, -67, -104, -102, 21, 20, 26, 117, -61, -124, -33, -63, 79, -17, -110, 67, -86, -77, 39, 7, 101, -101, -23, -28, 121, 122, 36, 124, 47, 11, 109, -103, 55, 47, 56, 74, -10, 47, -30, 59, -59, 75, -51, -59, 122, -102, -51, 29, 85, -123, -61, 3, -14, 1, -17, 78, -117, Byte.MIN_VALUE, 106, -5, Byte.MIN_VALUE, -99, -79, -93, -37, 28, -47, 18, -84, -120, 79, 22, 74, 103, -71, -100, 125, 110, 90, -118, 109, -15, -45, -54, -26, -41, -19, 61, 91, -25, 37, -78, -34, 74, -34, 35, -6, 103, -101, -12, -21, 21, -87, 61, -118, 110, 41, -57, -1, -95, -89, 13, -30, -27, 79, 89, 61, -112, -118, 59, -7, -21, -67, 118, 11, -65, -36, -115, -72, -75, 68, -105, -26, -59, -66, 14, 74, 77, -84, 41, -27};
        capk_pobc_09.Exponent = new byte[]{3};
        capk_pobc_09.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_09.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result12 = EmvService.Emv_AddCapk(capk_pobc_09);
        StringBuilder sb12 = new StringBuilder();
        sb12.append("Add CAPK capk_pobc_09:");
        sb12.append(result12);
        sb12.append(" ID:");
        sb12.append(capk_pobc_09.KeyID);
        Log(sb12.toString());
        EmvCAPK capk_pobc_0B = new EmvCAPK();
        capk_pobc_0B.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_0B.KeyID = 11;
        capk_pobc_0B.HashInd = 1;
        capk_pobc_0B.ArithInd = 1;
        capk_pobc_0B.Modul = new byte[]{-49, -97, -33, 70, -77, 86, 55, -114, -102, -13, 17, -80, -7, -127, -78, 26, 31, 34, -14, 80, -5, 17, -11, 92, -107, -121, 9, -29, -57, 36, 25, 24, 41, 52, -125, 40, -98, -82, 104, -118, 9, 76, 2, -61, 68, -30, -103, -97, EmvService.TYPE_BALANCE_INQUIRY, 90, 114, -124, 31, 72, -98, 36, -79, -70, 0, 86, -49, -85, 59, 71, -99, 14, -126, 100, 82, 55, 93, -51, -69, 103, -23, 126, -62, -86, 102, -12, 96, 29, 119, 79, -22, -17, 119, 90, -52, -58, EmvService.TYPE_SAVE, -65, -21, 101, -5, 0, 83, -4, 95, 57, 42, -91, -31, -44, -60, 26, 77, -23, -1, -33, -33, 19, 39, -60, -69, -121, 79, 31, 99, -91, -103, -18, 57, 2, -2, -107, -25, 41, -3, 120, -44, 35, 77, -57, -26, -49, 26, -70, -70, -93, -10, -37, 41, -73, -16, 93, 29, -112, 29, 46, 118, -90, 6, -88, -53, -1, -1, -20, -67, -111, -113, -94, -46, 120, -67, -76, 59, 4, 52, -11, -44, 81, 52, -66, 28, 39, -127, -47, 87, -43, 1, -1, 67, -27, -15, -60, 112, -106, 124, -43, 124, -27, 59, 100, -40, 41, 116, -56, 39, 89, 55, -59, -40, 80, 42, 18, 82, -88, -91, -42, 8, -118, 37, -101, 105, 79, -104, 100, -115, -102, -14, -53, 14, -3, -99, -108, 60, 105, -8, -106, -44, -97, -93, -105, 2, 22, 42, -53, 90, -14, -101, -112, -70, -34, 0, 91, -63, 87};
        capk_pobc_0B.Exponent = new byte[]{3};
        capk_pobc_0B.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_0B.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result13 = EmvService.Emv_AddCapk(capk_pobc_0B);
        StringBuilder sb13 = new StringBuilder();
        sb13.append("Add CAPK capk_pobc_0B:");
        sb13.append(result13);
        sb13.append(" ID:");
        sb13.append(capk_pobc_0B.KeyID);
        Log(sb13.toString());
        EmvCAPK capk_pobc_84 = new EmvCAPK();
        int i = result13;
        capk_pobc_84.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_84.KeyID = -124;
        capk_pobc_84.HashInd = 1;
        capk_pobc_84.ArithInd = 1;
        capk_pobc_84.Modul = new byte[]{-7, -22, 85, 3, -49, -28, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 56, 89, 108, 114, 6, 69, -87, 78, 1, 84, 121, 61, -25, 58, -27, -87, 53, -47, -5, -99, 15, -25, 114, -122, -74, 18, 97, -29, -69, 29, 61, -2, -59, 71, 68, -103, -110, -30, 3, 124, 1, -1, 78, -5, -120, -38, -118, -126, -13, 15, -22, EmvService.TYPE_BALANCE_INQUIRY, -104, -43, -47, 103, 84, 36, 122, 22, 38, -23, -49, -5, 76, -39, -29, 19, -103, -103, 14, 67, -4, -89, 124, 116, 74, -109, 104, 90, 38, 10, 32, -26, -90, 7, -13, -18, 63, -82, 42, -69, -23, -106, 120, -55, -15, -99, -3, 45, -114, -89, 103, -119, 35, -99, 19, 54, -99, 125, 45, 86, -81, 63, 39, -109, 6, -119, 80, -75, -67, Byte.MIN_VALUE, -116, 70, 37, 113, 102, 45, 67, 100, -77, 10, 37, -126, -107, -99, -78, 56, 51, 59, -83, -84, -76, 66, -7, 81, 107, 92, 51, 108, -118, 97, 63, -32, 20, -73, -41, 115, 88, 26, -31, 15, -33, 123, -37, 38, 105, 1, 45};
        capk_pobc_84.Exponent = new byte[]{3};
        capk_pobc_84.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_84.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result14 = EmvService.Emv_AddCapk(capk_pobc_84);
        StringBuilder sb14 = new StringBuilder();
        EmvCAPK emvCAPK = capk_pobc_80;
        sb14.append("Add CAPK capk_pobc_84:");
        sb14.append(result14);
        sb14.append(" ID:");
        sb14.append(capk_pobc_84.KeyID);
        Log(sb14.toString());
        EmvCAPK capk_pobc_85 = new EmvCAPK();
        capk_pobc_85.RID = new byte[]{-96, 0, 0, 3, 51};
        capk_pobc_85.KeyID = -123;
        capk_pobc_85.HashInd = 1;
        capk_pobc_85.ArithInd = 1;
        capk_pobc_85.Modul = new byte[]{-55, 36, 46, -58, 3, 15, 16, -27, 34, 94, 114, 42, -95, 125, -99, -56, -108, 41, -110, 51, -82, -61, EmvService.TYPE_SAVE, -101, -107, 13, 79, 36, 58, -11, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, -6, 19, -29, -93, 26, -6, -96, -44, -65, 77, -27, 98, -74, -76, -61, 16, -118, -21, -68, 108, -80, Byte.MIN_VALUE, -7, 7, 112, -43, 50, -14, 65, -68, 21, 54, EmvService.TYPE_TRANSFER, 30, 27, -9, 47, -99, -63, -80, -119, 51, -71, -65, 119, EmvService.TYPE_TRANSFER, 63, 106, 15, -75, 119, 123, -86, 76, -101, -23, 21, 116, -69, -65, -75, EmvService.TYPE_SAVE, 52, 42, 32, 56, 103, -112, 81, 34, EmvService.TYPE_SAVE, -12, 119, -5, -59, 63, -15, -74, 83, 58, 1, 88, 21, 67, 84, 16, -20, 39, 47, 10, 52, -22, 7, 53, -60, 57, 103, 125, 126, 70, -5, -89, 102, -20, 0, -50, -43, -101, 103, 21, -29, 65, 45, 111, -72, -87, 52, -65, -99, 20, -105, -94, 74, 98, 82, -59, 45, 117, -122, -3, 102, -92, 80, -5, 93, 43, 68, -124, -20, -110, EmvService.TYPE_AVAILABLE_FUNDS_INQUIRY, 97, 67, -106, 34, -68, 5, 53, EmvService.TYPE_BALANCE_INQUIRY, 108, -44, 35, 28, 19, -58, 39, -65, 77, 46, -34, 28, 2, -56, 2, 70, 70, 88, -15, -71, -41, -1, 35, -93, 105, -123, 16, -6, -112, -48, -61, 22, 73, 66, -5, 53, -110, 85, -51, -126, 60, -78, 99, 91, 63, 22, Byte.MAX_VALUE, -67, -4, -112, 6, 65, -71, 112, -42, 2, -94, 119, 26, Byte.MAX_VALUE, 79, -108, -33, 109, 52, -66, -117, -69};
        int i2 = result14;
        capk_pobc_85.Exponent = new byte[]{3};
        capk_pobc_85.ExpDate = new byte[]{21, 18, EmvService.TYPE_BALANCE_INQUIRY};
        capk_pobc_85.CheckSum = new byte[]{-52, -107, -123, -24, -26, 55, 25, 28, 16, -4, -20, -77, 43, 90, -31, -71, -44, 16, -75, 45};
        int result15 = EmvService.Emv_AddCapk(capk_pobc_85);
        StringBuilder sb15 = new StringBuilder();
        EmvCAPK emvCAPK2 = capk_pobc_0B;
        sb15.append("Add CAPK capk_pobc_85:");
        sb15.append(result15);
        sb15.append(" ID:");
        sb15.append(capk_pobc_85.KeyID);
        Log(sb15.toString());
    }
}
